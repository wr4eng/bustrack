package com.thingtrack.bustrack.view.web.form;

import java.util.Date;

import org.osgi.framework.BundleContext;
import org.osgi.framework.FrameworkUtil;
import org.osgi.framework.ServiceReference;
import org.springframework.beans.factory.annotation.Autowired;

import com.thingtrack.konekti.domain.Client;
import com.thingtrack.konekti.domain.ServiceStatus;
import com.thingtrack.konekti.domain.ServiceType;
import com.thingtrack.konekti.service.api.ClientService;
import com.thingtrack.konekti.service.api.ServiceService;
import com.thingtrack.konekti.service.api.ServiceStatusService;
import com.thingtrack.konekti.service.api.ServiceTypeService;
import com.thingtrack.konekti.view.addon.ui.WindowDialog;
import com.thingtrack.konekti.view.addon.ui.WindowDialog.DialogResult;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.web.form.ClientViewForm;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;

@SuppressWarnings("serial")
public class ServiceHeaderViewForm extends CustomComponent {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private VerticalLayout verticalLayout_2;
	@AutoGenerated
	private HorizontalLayout clientLayout;
	@AutoGenerated
	private Button addClientButton;
	@AutoGenerated
	private ComboBox clientField;
	@AutoGenerated
	private HorizontalLayout serviceLayout;
	@AutoGenerated
	private ComboBox serviceStatusField;
	@AutoGenerated
	private ComboBox serviceTypeField;
	@AutoGenerated
	private HorizontalLayout dateLayout;
	@AutoGenerated
	private DateField scheduleDateField;
	@AutoGenerated
	private DateField reservationDateField;
	@AutoGenerated
	private TextField descriptionField;
	@AutoGenerated
	private TextField codeField;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private IWorkbenchContext context;
	
	// Service Date range
	private Date startFirstRoute;

	private Date endLastRoute;

	/** Enterprise Services **/	
	private ServiceService serviceService;

	private ServiceStatusService serviceStatusService;

	private ServiceTypeService serviceTypeService;

	private BeanItemContainer<Client> clientDatasource;
	private ClientService clientService;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 * 
	 * @throws Exception
	 * @throws IllegalArgumentException
	 */
	@Autowired
	public ServiceHeaderViewForm(final IWorkbenchContext context) {

		buildMainLayout();
		setCompositionRoot(mainLayout);

		this.context = context;
		
		codeField.setImmediate(true);
		scheduleDateField.setImmediate(true);
		reservationDateField.setImmediate(true);
		serviceTypeField.setImmediate(true);
		serviceStatusField.setImmediate(true);

		descriptionField.setNullRepresentation("");
		
		codeField.setRequiredError(codeField.getCaption()
				+ " es un campo requerido");
		reservationDateField.setRequiredError(reservationDateField.getCaption()
				+ " es un campo requerido");
		serviceTypeField.setRequiredError(serviceTypeField.getCaption()
				+ " es un campo requerido");
		serviceStatusField.setRequiredError(serviceStatusField.getCaption()
				+ " es un campo requerido");

		// Retrieve the enterprise services
		getServices();

		// Adding field validators
		codeField.setValidationVisible(false);

		// Load fields
		addClientButton.addListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {
				Client client = null;
				try {
					client = clientService.createNewClient(context.getOrganization());
				} catch (Exception e) {
					throw new RuntimeException(
							"¡No se pudo crear el nuevo código cliente!",
							e);
				}	
				
				try {
					@SuppressWarnings("unused")
					WindowDialog<Client> windowDialog = new WindowDialog<Client>(
							getApplication().getMainWindow(), "Nuevo Cliente", "Guardar", DialogResult.SAVE,
							"Cancelar", DialogResult.CANCEL, new ClientViewForm(), client,
							new WindowDialog.CloseWindowDialogListener<Client>() {
								public void windowDialogClose(
										WindowDialog<Client>.CloseWindowDialogEvent<Client> event) {
									if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
										return;

									try {
										Client savingClient = event.getDomainEntity();

										Client savedClient = clientService.save(savingClient);
											
										// refresh
										clientDatasource.removeAllItems();
										clientDatasource.addAll(clientService.getAll());
																				
									} catch (Exception e) {
										throw new RuntimeException(
												"¡No se pudo crear el nuevo cliente!",
												e);

									}
								}

							});
				} catch (IllegalArgumentException e) {
					throw new RuntimeException(
							"¡No se pudo abrir el formulario Nuevo Cliente!", e);
				} catch (Exception e) {
					throw new RuntimeException(
							"¡No se pudo abrir el formulario Nuevo Cliente!", e);
				}
			}
		});
		
		try {
			loadData();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void getServices() {

		BundleContext bundleContext = FrameworkUtil.getBundle(this.getClass())
				.getBundleContext();

		ServiceReference serviceServiceReference = (ServiceReference) bundleContext
				.getServiceReference(ServiceService.class.getName());
		serviceService = (ServiceService) bundleContext
				.getService(serviceServiceReference);

		ServiceReference serviceStatusServiceReference = bundleContext
				.getServiceReference(ServiceStatusService.class.getName());
		serviceStatusService = (ServiceStatusService) bundleContext
				.getService(serviceStatusServiceReference);

		ServiceReference serviceTypeServiceReference = bundleContext
				.getServiceReference(ServiceTypeService.class.getName());
		serviceTypeService = (ServiceTypeService) bundleContext
				.getService(serviceTypeServiceReference);

		ServiceReference clientServiceReference = bundleContext
				.getServiceReference(ClientService.class.getName());
		clientService = (ClientService) bundleContext
				.getService(clientServiceReference);

	}

	private void loadData() throws IllegalArgumentException, Exception {

		// Service type data source
		BeanItemContainer<ServiceType> serviceTypeDatasource = new BeanItemContainer<ServiceType>(
				ServiceType.class, serviceTypeService.getAll());

		serviceTypeField.setContainerDataSource(serviceTypeDatasource);
		serviceTypeField.setItemCaptionPropertyId("description");
		serviceTypeField.setNullSelectionAllowed(false);

		// Service Status data source
		BeanItemContainer<ServiceStatus> serviceStatusDatasource = new BeanItemContainer<ServiceStatus>(
				ServiceStatus.class, serviceStatusService.getAll());

		serviceStatusField.setContainerDataSource(serviceStatusDatasource);
		serviceStatusField.setItemCaptionPropertyId("description");
		serviceStatusField.setNullSelectionAllowed(false);

		// Client data source
		clientDatasource = new BeanItemContainer<Client>(Client.class, clientService.getAll());

		clientField.setContainerDataSource(clientDatasource);
		clientField.setItemCaptionPropertyId("name");

	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("600px");
		mainLayout.setHeight("350px");
		mainLayout.setMargin(true);
		
		// top-level component properties
		setWidth("600px");
		setHeight("350px");
		
		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		mainLayout.addComponent(verticalLayout_2);
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("100.0%");
		verticalLayout_2.setHeight("100.0%");
		verticalLayout_2.setMargin(true);
		
		// codeField
		codeField = new TextField();
		codeField.setCaption("Código");
		codeField.setImmediate(false);
		codeField.setWidth("50.0%");
		codeField.setHeight("-1px");
		codeField.setRequired(true);
		codeField.setNullSettingAllowed(true);
		verticalLayout_2.addComponent(codeField);
		
		// descriptionField
		descriptionField = new TextField();
		descriptionField.setCaption("Descripción");
		descriptionField.setImmediate(false);
		descriptionField.setWidth("100.0%");
		descriptionField.setHeight("120px");
		verticalLayout_2.addComponent(descriptionField);
		
		// dateLayout
		dateLayout = buildDateLayout();
		verticalLayout_2.addComponent(dateLayout);
		
		// serviceLayout
		serviceLayout = buildServiceLayout();
		verticalLayout_2.addComponent(serviceLayout);
		
		// clientLayout
		clientLayout = buildClientLayout();
		verticalLayout_2.addComponent(clientLayout);
		verticalLayout_2.setExpandRatio(clientLayout, 1.0f);
		
		return verticalLayout_2;
	}

	@AutoGenerated
	private HorizontalLayout buildDateLayout() {
		// common part: create layout
		dateLayout = new HorizontalLayout();
		dateLayout.setImmediate(false);
		dateLayout.setWidth("100.0%");
		dateLayout.setHeight("-1px");
		dateLayout.setMargin(false);
		dateLayout.setSpacing(true);
		
		// reservationDateField
		reservationDateField = new DateField();
		reservationDateField.setCaption("Reserva");
		reservationDateField.setImmediate(false);
		reservationDateField.setWidth("100.0%");
		reservationDateField.setHeight("-1px");
		reservationDateField.setInvalidAllowed(false);
		reservationDateField.setRequired(true);
		reservationDateField.setResolution(2);
		dateLayout.addComponent(reservationDateField);
		dateLayout.setExpandRatio(reservationDateField, 1.0f);
		
		// scheduleDateField
		scheduleDateField = new DateField();
		scheduleDateField.setCaption("Planificación");
		scheduleDateField.setImmediate(false);
		scheduleDateField.setWidth("100.0%");
		scheduleDateField.setHeight("-1px");
		scheduleDateField.setInvalidAllowed(false);
		scheduleDateField.setResolution(2);
		dateLayout.addComponent(scheduleDateField);
		dateLayout.setExpandRatio(scheduleDateField, 1.0f);
		
		return dateLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildServiceLayout() {
		// common part: create layout
		serviceLayout = new HorizontalLayout();
		serviceLayout.setImmediate(false);
		serviceLayout.setWidth("100.0%");
		serviceLayout.setHeight("-1px");
		serviceLayout.setMargin(false);
		serviceLayout.setSpacing(true);
		
		// serviceTypeField
		serviceTypeField = new ComboBox();
		serviceTypeField.setCaption("Tipo");
		serviceTypeField.setImmediate(false);
		serviceTypeField.setWidth("100.0%");
		serviceTypeField.setHeight("-1px");
		serviceTypeField.setRequired(true);
		serviceLayout.addComponent(serviceTypeField);
		serviceLayout.setExpandRatio(serviceTypeField, 1.0f);
		
		// serviceStatusField
		serviceStatusField = new ComboBox();
		serviceStatusField.setCaption("Estado");
		serviceStatusField.setImmediate(false);
		serviceStatusField.setWidth("100.0%");
		serviceStatusField.setHeight("-1px");
		serviceStatusField.setRequired(true);
		serviceLayout.addComponent(serviceStatusField);
		serviceLayout.setExpandRatio(serviceStatusField, 1.0f);
		
		return serviceLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildClientLayout() {
		// common part: create layout
		clientLayout = new HorizontalLayout();
		clientLayout.setImmediate(false);
		clientLayout.setWidth("100.0%");
		clientLayout.setHeight("-1px");
		clientLayout.setMargin(false);
		clientLayout.setSpacing(true);
		
		// clientField
		clientField = new ComboBox();
		clientField.setCaption("Cliente");
		clientField.setImmediate(false);
		clientField.setWidth("100.0%");
		clientField.setHeight("-1px");
		clientLayout.addComponent(clientField);
		clientLayout.setExpandRatio(clientField, 1.0f);
		clientLayout.setComponentAlignment(clientField, new Alignment(33));
		
		// addClientButton
		addClientButton = new Button();
		addClientButton.setCaption("Añadir Cliente");
		addClientButton.setImmediate(true);
		addClientButton.setWidth("-1px");
		addClientButton.setHeight("-1px");
		clientLayout.addComponent(addClientButton);
		clientLayout.setComponentAlignment(addClientButton, new Alignment(9));
		
		return clientLayout;
	}

}

package com.thingtrack.bustrack.view.web.form;

import org.osgi.framework.BundleContext;
import org.osgi.framework.FrameworkUtil;
import org.osgi.framework.ServiceReference;

import com.thingtrack.bustrack.domain.VehicleType;
import com.thingtrack.bustrack.service.api.VehicleTypeService;
import com.thingtrack.konekti.domain.Calendar;
import com.thingtrack.konekti.domain.EmployeeAgent;
import com.thingtrack.konekti.domain.OfferRequestLineStatus;
import com.thingtrack.konekti.domain.ServiceType;
import com.thingtrack.konekti.service.api.CalendarService;
import com.thingtrack.konekti.service.api.EmployeeAgentService;
import com.thingtrack.konekti.service.api.OfferRequestLineStatusService;
import com.thingtrack.konekti.service.api.ServiceTypeService;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.Select;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Button.ClickEvent;

@SuppressWarnings("serial")
public class OfferRequestLineRegularServiceViewForm extends CustomComponent {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button btnOpenCalendarBundle;
	@AutoGenerated
	private ComboBox vehicleTypeField;
	@AutoGenerated
	private TextField numberField;
	@AutoGenerated
	private ComboBox serviceTypeField;
	@AutoGenerated
	private TextField paymentField;
	@AutoGenerated
	private ComboBox offerRequestLineStatusField;
	@AutoGenerated
	private DateField offerRequestLineDateField;
	@AutoGenerated
	private ComboBox driverField;
	@AutoGenerated
	private TextField commentField;
	@AutoGenerated
	private ComboBox calendarField;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private IWorkbenchContext konektiContext;
	
	// form services
	private OfferRequestLineStatusService offerRequestLineStatusService;
	private ServiceTypeService serviceTypeService;
	private VehicleTypeService vehicleTypeService;
	private EmployeeAgentService employeeAgentService;
	private CalendarService calendarService;
	
	// form datasources
	private BeanItemContainer<OfferRequestLineStatus> bcOfferRequestLineStatus = new BindingSource<OfferRequestLineStatus>(OfferRequestLineStatus.class);
	private BeanItemContainer<ServiceType> bcServiceType = new BindingSource<ServiceType>(ServiceType.class);
	private BeanItemContainer<VehicleType> bcVehicleType = new BindingSource<VehicleType>(VehicleType.class);
	private BeanItemContainer<EmployeeAgent> bcEmployeeAgent = new BindingSource<EmployeeAgent>(EmployeeAgent.class);
	private BeanItemContainer<Calendar> bcCalendar = new BindingSource<Calendar>(Calendar.class);
	
	private final static String CALENDAR_BUNDLE_SYMBOLIC_NAME = "com.thingtrack.konekti.view.module.calendar";
	private final static String CALENDAR_BUNDLE_VERSION = "0.0.1.SNAPSHOT";
	
	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 * @throws Exception 
	 * @throws IllegalArgumentException 
	 */
	public OfferRequestLineRegularServiceViewForm(IWorkbenchContext context) throws IllegalArgumentException, Exception {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		this.konektiContext = context;  
				
		initComponents();
		
		// configure Organization Type data
		offerRequestLineStatusField.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
		offerRequestLineStatusField.setItemCaptionPropertyId("description");
			
		serviceTypeField.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
		serviceTypeField.setItemCaptionPropertyId("description");

		vehicleTypeField.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
		vehicleTypeField.setItemCaptionPropertyId("description");
		
		driverField.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
		driverField.setItemCaptionPropertyId("name");
		
		calendarField.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
		calendarField.setItemCaptionPropertyId("name");
		
		// get form services from OSGi Service Registry
		getServices();
			
		// load data sources
		loadData();

		btnOpenCalendarBundle.addListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {
				try {
					konektiContext.openBundle(CALENDAR_BUNDLE_SYMBOLIC_NAME, CALENDAR_BUNDLE_VERSION);
				} catch (Exception e) {
					throw new RuntimeException("¡No se pudo abrir el bundle!", e);
				}
				
			}
		});
	}
	
	private void initComponents() {
		paymentField.setNullRepresentation("");
		numberField.setNullRepresentation("");
		commentField.setNullRepresentation("");
		offerRequestLineDateField.setDateFormat("dd/MM/yyyy HH:mm");
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private void getServices() {
		try {
			BundleContext bundleContext = FrameworkUtil.getBundle(OfferRequestLineRegularServiceViewForm.class).getBundleContext();

			ServiceReference offerRequestLineStatusServiceReference = bundleContext.getServiceReference(OfferRequestLineStatusService.class.getName());
			offerRequestLineStatusService = OfferRequestLineStatusService.class.cast(bundleContext.getService(offerRequestLineStatusServiceReference));
			
			ServiceReference serviceTypeServiceReference = bundleContext.getServiceReference(ServiceTypeService.class.getName());
			serviceTypeService = ServiceTypeService.class.cast(bundleContext.getService(serviceTypeServiceReference));
			
			ServiceReference vehicleTypeServiceReference = bundleContext.getServiceReference(VehicleTypeService.class.getName());
			vehicleTypeService = VehicleTypeService.class.cast(bundleContext.getService(vehicleTypeServiceReference));
			
			ServiceReference employeeAgentServiceReference = bundleContext.getServiceReference(EmployeeAgentService.class.getName());
			employeeAgentService = EmployeeAgentService.class.cast(bundleContext.getService(employeeAgentServiceReference));
			
			ServiceReference calendarServiceReference = bundleContext.getServiceReference(CalendarService.class.getName());
			calendarService = CalendarService.class.cast(bundleContext.getService(calendarServiceReference));
		}
		catch (Exception e) {
			e.getMessage();
			
		}
		
	}
	
	private void loadData() throws IllegalArgumentException, Exception {		
		bcOfferRequestLineStatus.removeAllItems();
		bcOfferRequestLineStatus.addAll(offerRequestLineStatusService.getAll());
		
		offerRequestLineStatusField.setContainerDataSource(bcOfferRequestLineStatus);
		
		bcServiceType.removeAllItems();
		bcServiceType.addAll(serviceTypeService.getAll());
		
		serviceTypeField.setContainerDataSource(bcServiceType);
		
		bcVehicleType.removeAllItems();
		bcVehicleType.addAll(vehicleTypeService.getAll());
		
		vehicleTypeField.setContainerDataSource(bcVehicleType);
		
		bcEmployeeAgent.removeAllItems();
		bcEmployeeAgent.addAll(employeeAgentService.getAll());
		
		driverField.setContainerDataSource(bcEmployeeAgent);
		
		bcCalendar.removeAllItems();
		bcCalendar.addAll(calendarService.getAll());
		
		calendarField.setContainerDataSource(bcCalendar);
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("570px");
		mainLayout.setHeight("220px");
		mainLayout.setMargin(true);
		
		// top-level component properties
		setWidth("570px");
		setHeight("220px");
		
		// calendarField
		calendarField = new ComboBox();
		calendarField.setCaption("Calendario");
		calendarField.setImmediate(false);
		calendarField.setWidth("263px");
		calendarField.setHeight("-1px");
		mainLayout.addComponent(calendarField, "top:98.0px;left:17.0px;");
		
		// commentField
		commentField = new TextField();
		commentField.setCaption("Comentarios");
		commentField.setImmediate(false);
		commentField.setWidth("546px");
		commentField.setHeight("64px");
		commentField.setSecret(false);
		mainLayout.addComponent(commentField, "top:140.0px;left:17.0px;");
		
		// driverField
		driverField = new ComboBox();
		driverField.setCaption("Conductor");
		driverField.setImmediate(false);
		driverField.setWidth("180px");
		driverField.setHeight("-1px");
		mainLayout.addComponent(driverField, "top:58.0px;left:220.0px;");
		
		// offerRequestLineDateField
		offerRequestLineDateField = new DateField();
		offerRequestLineDateField.setCaption("Fecha Registro");
		offerRequestLineDateField.setImmediate(false);
		offerRequestLineDateField.setWidth("143px");
		offerRequestLineDateField.setHeight("-1px");
		offerRequestLineDateField.setInvalidAllowed(false);
		mainLayout.addComponent(offerRequestLineDateField,
				"top:20.0px;left:420.0px;");
		
		// offerRequestLineStatusField
		offerRequestLineStatusField = new ComboBox();
		offerRequestLineStatusField.setCaption("Estado Línea");
		offerRequestLineStatusField.setImmediate(false);
		offerRequestLineStatusField.setWidth("145px");
		offerRequestLineStatusField.setHeight("-1px");
		mainLayout.addComponent(offerRequestLineStatusField,
				"top:57.0px;left:420.0px;");
		
		// paymentField
		paymentField = new TextField();
		paymentField.setCaption("Forma de Pago");
		paymentField.setImmediate(false);
		paymentField.setWidth("236px");
		paymentField.setHeight("24px");
		paymentField.setSecret(false);
		mainLayout.addComponent(paymentField, "top:98.0px;left:327.0px;");
		
		// serviceTypeField
		serviceTypeField = new ComboBox();
		serviceTypeField.setCaption("Tipo Servicio");
		serviceTypeField.setImmediate(false);
		serviceTypeField.setWidth("-1px");
		serviceTypeField.setHeight("-1px");
		mainLayout.addComponent(serviceTypeField, "top:17.0px;left:140.0px;");
		
		// numberField
		numberField = new TextField();
		numberField.setCaption("Número Linea");
		numberField.setImmediate(false);
		numberField.setWidth("100px");
		numberField.setHeight("-1px");
		numberField.setSecret(false);
		mainLayout.addComponent(numberField, "top:17.0px;left:20.0px;");
		
		// vehicleTypeField
		vehicleTypeField = new ComboBox();
		vehicleTypeField.setCaption("Tipo Vehículo");
		vehicleTypeField.setImmediate(false);
		vehicleTypeField.setWidth("180px");
		vehicleTypeField.setHeight("-1px");
		mainLayout.addComponent(vehicleTypeField, "top:58.0px;left:20.0px;");
		
		// btnOpenCalendarBundle
		btnOpenCalendarBundle = new Button();
		btnOpenCalendarBundle.setImmediate(false);
		btnOpenCalendarBundle.setWidth("35px");
		btnOpenCalendarBundle.setHeight("-1px");
		btnOpenCalendarBundle.setIcon(new ThemeResource("../konekti/images/icons/bean.png"));
		mainLayout.addComponent(btnOpenCalendarBundle,
				"top:96.0px;left:280.0px;");
		
		return mainLayout;
	}
}

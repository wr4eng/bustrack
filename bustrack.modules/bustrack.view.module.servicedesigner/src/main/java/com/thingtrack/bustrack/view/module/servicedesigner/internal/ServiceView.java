package com.thingtrack.bustrack.view.module.servicedesigner.internal;

import java.text.SimpleDateFormat;
import java.util.Date;

import com.thingtrack.bustrack.domain.dto.ServiceDto;
import com.thingtrack.bustrack.service.dto.api.ServiceServiceDto;
import com.thingtrack.bustrack.view.web.form.ServiceHeaderViewForm;
import com.thingtrack.konekti.domain.Service;
import com.thingtrack.konekti.service.api.ServiceService;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickFilterButtonListener;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickPrintButtonListener;
import com.thingtrack.konekti.view.addon.ui.DataGridView;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickAddButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickEditButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickRemoveButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickDownButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickNavigationEvent;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickRefreshButtonListener;
import com.thingtrack.konekti.view.addon.ui.WindowDialog;
import com.thingtrack.konekti.view.addon.ui.WindowDialog.DialogResult;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;

import org.vaadin.dialogs.ConfirmDialog;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.ui.CustomTable;
import com.vaadin.ui.CustomTable.ColumnGenerator;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class ServiceView extends AbstractView implements
		ClickRefreshButtonListener, ClickDownButtonListener,
		ClickAddButtonListener, ClickEditButtonListener,
		ClickRemoveButtonListener, ClickFilterButtonListener, ClickPrintButtonListener {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private DataGridView dgService;

	private ServiceService serviceService;

	private ServiceServiceDto serviceServiceDto;

	private BindingSource<ServiceDto> bsService = new BindingSource<ServiceDto>(ServiceDto.class, 0);

	private NavigationToolbar navigationToolbar;
	private EditionToolbar editionToolbar;
	private BoxToolbar boxToolbar;

	private IViewContainer viewContainer;
	
	private IWorkbenchContext context;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public ServiceView(IViewContainer viewContainer) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		// set Slide View Services and ViewContainer to navigate
		this.viewContainer = viewContainer;
		this.serviceService = ServiceDesignerViewContainer.getServiceService();
		this.serviceServiceDto = ServiceDesignerViewContainer.getServiceServiceDto();
		
		if(viewContainer instanceof ServiceDesignerViewContainer)
			context = ((ServiceDesignerViewContainer) viewContainer).getContext();

		// initialize datasource views
		initView();

	}

	private void initView() {
		// initialize Slide View Organization View
		dgService.setImmediate(true);

		refreshBindindSource();

		// STEP 01: create grid view for slide Organization View
		try {

			dgService.setBindingSource(bsService);

			dgService.setFilterDecorator(new ServiceFilterDecorator());
			dgService.setFilterGenerator(new ServiceFilterGenerator());

			dgService.setVisibleColumns(new String[] { "service.serviceType.description", "serviceCode", 
													   "offerClientName", "offerClientVat", 
													   "offerTypeDescription", "offerCode", "offerRevision", "offerDate",					
													   "offerStatusDescription", "offerLineNumber",
													   "offerLineStatusDescription" });

			dgService
					.setColumnHeaders(new String[] { "Tipo Servicio",  "Servicio", "Cliente", "VAT Client", 
													 "Tipo Oferta", "Código Oferta",  "Revisión", "fecha Oferta", 
													 "Estado Oferta", "Número Línea Oferta", "Estado Línea Oferta" });

		} catch (Exception ex) {
			ex.getMessage();
		}

		// STEP 02: create toolbar for slide Organization View
		navigationToolbar = new NavigationToolbar(0, bsService, viewContainer);
		editionToolbar = new EditionToolbar(1, bsService);
		boxToolbar = new BoxToolbar(1, bsService);

		navigationToolbar.addListenerRefreshButton(this);
		navigationToolbar.addListenerDownButton(this);

		editionToolbar.addListenerAddButton(this);
		editionToolbar.addListenerEditButton(this);
		editionToolbar.addListenerDeleteButton(this);

		boxToolbar.addListenerFilterButton(this);
		boxToolbar.addListenerPrintButton(this);
		
		dgService.addListenerAddButton(this);
		dgService.addListenerEditButton(this);
		dgService.addListenerDeleteButton(this);
		
		removeAllToolbar();

		addToolbar(navigationToolbar);
		addToolbar(editionToolbar);
		addToolbar(boxToolbar);

	}

	private void refreshBindindSource() {
		try {
			bsService.removeAllItems();
			bsService.addAll(serviceServiceDto.getAll());
			
			bsService.addNestedContainerProperty("service.serviceType.description");

		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void refreshButtonClick(ClickNavigationEvent event) {
		refreshBindindSource();

	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// dataGridView_1
		dgService = new DataGridView() {
			@Override
			protected String formatPropertyValue(Object rowId, Object colId,
					Property property) {
				// Format by property type
				if (property.getType() == Date.class) {
					SimpleDateFormat df = new SimpleDateFormat(
							"dd/MM/yyyy HH:mm");

					if (property.getValue() != null)
						return df.format((Date) property.getValue());
					else
						return null;
				}

				return super.formatPropertyValue(rowId, colId, property);
			}
		};

		dgService.setImmediate(false);
		dgService.setWidth("100.0%");
		dgService.setHeight("100.0%");
		mainLayout.addComponent(dgService);
		mainLayout.setExpandRatio(dgService, 1.0f);

		return mainLayout;
	}

	@Override
	public void downButtonClick(ClickNavigationEvent event) {

		ServiceDto serviceSelected = null;

		if (bsService.getItemIds().size() > 0) {
			// get selected Organization
			serviceSelected = (ServiceDto) bsService.getItemId();

			// inject the routes data from service in the service designer view
			ServiceDesignerView serviceDesignerView = (ServiceDesignerView) viewContainer
					.getNext();
			serviceDesignerView.setSelectedService(serviceSelected.getService());

			// roll to the detail Location View
			viewContainer.getSliderView().rollNext();
		}

	}

	@Override
	public void addButtonClick(EditionToolbar.ClickNavigationEvent event) {
		//Create a service
		final Service service;
		try {
			service = serviceService.createNewService(context.getOrganization());
		} catch (Exception e) {
			throw new RuntimeException("¡No se pudo crear el nuevo servicio!", e);
		}
		
		//ServiceDto serviceDto = bsService.getItemId();
		/*OfferLine offerLine;
		try {
			offerLine = offerLineService.getByNumber(serviceDto.getOfferLineNumber().intValue());
			service.setOfferLine(offerLine);
			service.setClient(offerLine.getOffer().getOfferClient());
		} catch (Exception e1) {
			throw new RuntimeException(e1);
		}*/
		
		try {
			@SuppressWarnings("unused")
			WindowDialog<Service> windowDialog = new WindowDialog<Service>(
					getWindow(), "Nuevo Servicio", "Guardar",
					DialogResult.SAVE, "Cancelar", DialogResult.CANCEL,
					new ServiceHeaderViewForm(context), service,
					new WindowDialog.CloseWindowDialogListener<Service>() {
						public void windowDialogClose(
								WindowDialog<Service>.CloseWindowDialogEvent<Service> event) {
							
							if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
								return;

							try {
								
								Service savingService = event.getDomainEntity();
								
								Service savedService = serviceService.save(savingService);
								savedService = serviceService.get(savedService.getServiceId());
								
								// refresh
		            			refreshBindindSource();
								
								// inject the routes data from service in the service designer view
								ServiceDesignerView serviceDesignerView = (ServiceDesignerView) viewContainer
										.getNext();
								serviceDesignerView.setSelectedService(savedService);

								// roll to the detail Location View
								viewContainer.getSliderView().rollNext();
								
								
							} catch (Exception e) {
								throw new RuntimeException(e);
							}
						}

					});
		} catch (Exception e) {
			throw new RuntimeException(e); 
		}

	}

	@SuppressWarnings("unused")
	@Override
	public void editButtonClick(EditionToolbar.ClickNavigationEvent event) {
		ServiceDto serviceDto = bsService.getItemId();
		Service service = serviceDto.getService();
		
		WindowDialog<Service> windowDialog = new WindowDialog<Service>(
				getWindow(), "Nuevo Servicio", "Guardar",
				DialogResult.SAVE, "Cancelar", DialogResult.CANCEL,
				new ServiceHeaderViewForm(context), service,
				new WindowDialog.CloseWindowDialogListener<Service>() {
					public void windowDialogClose(
							WindowDialog<Service>.CloseWindowDialogEvent<Service> event) {
						
						if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
							return;

						try {
							
							Service savingService = event.getDomainEntity();
							
							Service savedService = serviceService.save(savingService);
							
							// refresh
	            			refreshBindindSource();
							
							// inject the routes data from service in the service designer view
							ServiceDesignerView serviceDesignerView = (ServiceDesignerView) viewContainer
									.getNext();
							serviceDesignerView.setSelectedService(savedService);

							// roll to the detail Location View
							viewContainer.getSliderView().rollNext();
							
							
						} catch (Exception e) {
							throw new RuntimeException(e);
						}
					}

				});

	}
	
	@Override
	public void deleteButtonClick(EditionToolbar.ClickNavigationEvent event) {
		
		final ServiceDto removingService = (ServiceDto) event.getRegister();
		
		if (removingService == null)
			return;

		ConfirmDialog.show(getWindow(), "Borrar Oferta",
		        "¿Estás seguro?", "Si", "No",
		        new ConfirmDialog.Listener() {

		            public void onClose(ConfirmDialog dialog) {
		                if (dialog.isConfirmed()) {
		            		try {
		            			serviceService.delete(removingService.getService());
		            			
		            			// refresh
		            			refreshBindindSource();
		            			
		            		} catch (IllegalArgumentException e) {
								throw new RuntimeException(
										"¡No se pudo borrar la oferta!", e);
		            		} catch (Exception e) {
								throw new RuntimeException(
										"¡No se pudo borrar la oferta!", e);
		            		}
		                } 
		            }
		        });

	}
	
	@Override
	public void filterButtonClick(BoxToolbar.ClickNavigationEvent event) {
		dgService.setFilterBarVisible();

	}

	@Override
	public void printButtonClick(BoxToolbar.ClickNavigationEvent event) {
		try {
			dgService.print("Listado Servicios");
		}
		catch (Exception e) {
			throw new RuntimeException("¡No se pudo imprimir el informe!", e);
		}
		
	}
	
	public class OfferLineCodeColumn implements ColumnGenerator {

		public static final String OFFER_LINE_CODE_COLUMN = "offer_line_code_column";

		@Override
		public Object generateCell(CustomTable source, Object itemId,
				Object columnId) {

			Label offerLineCodeLabel;

			Service service = (Service) itemId;

			if (service != null) {
				if (service.getOfferLine() != null) {

					offerLineCodeLabel = new Label(service.getOfferLine()
							.getNumber().toString());
					return offerLineCodeLabel;
				}
			}

			return null;
		}

	}

	public class OfferCodeColumn implements ColumnGenerator {

		public static final String OFFER_CODE_COLUMN = "offer_code_column";

		@Override
		public Object generateCell(CustomTable source, Object itemId,
				Object columnId) {

			Label offerCodeLabel;

			Service service = (Service) itemId;

			if (service != null) {
				if (service.getOfferLine() != null) {

					if (service.getOfferLine().getOffer() != null) {

						offerCodeLabel = new Label(service.getOfferLine()
								.getOffer().getCode());
						return offerCodeLabel;
					}
				}
			}

			return null;
		}

	}

	public class VehicleTypeColumn implements ColumnGenerator {

		public static final String VEHICLE_TYPE_COLUMN = "vehicleTypeColumn";

		@Override
		public Object generateCell(CustomTable source, Object itemId,
				Object columnId) {

			Label vehicleTypeLabel;

			Service service = (Service) itemId;

			if (service != null) {
				if (service.getVehicleType() != null) {

					vehicleTypeLabel = new Label(service.getVehicleType()
							.getCode());
					return vehicleTypeLabel;
				}
			}

			return null;
		}

	}

}

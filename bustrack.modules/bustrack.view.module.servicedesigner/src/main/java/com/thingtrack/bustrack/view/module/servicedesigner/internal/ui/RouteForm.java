package com.thingtrack.bustrack.view.module.servicedesigner.internal.ui;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.vaadin.addons.locationtextfield.GeocodedLocation;
import org.vaadin.cssinject.CSSInject;

import com.thingtrack.bustrack.domain.Stop;
import com.thingtrack.bustrack.view.module.servicedesigner.internal.ServiceDesignerView;
import com.thingtrack.bustrack.view.module.servicedesigner.internal.ServiceDesignerViewContainer;
import com.thingtrack.bustrack.view.module.servicedesigner.internal.model.Maneuver;
import com.thingtrack.bustrack.view.module.servicedesigner.internal.model.MapCoordinates;
import com.thingtrack.bustrack.view.module.servicedesigner.internal.model.Route;
import com.thingtrack.bustrack.view.module.servicedesigner.internal.model.RoutePlannerException;
import com.thingtrack.bustrack.view.module.servicedesigner.internal.ui.CustomizedLocationTextField.StopType;
import com.thingtrack.bustrack.view.module.servicedesigner.internal.webservice.MapQuestOpenDirectionsService;
import com.thingtrack.bustrack.view.module.servicedesigner.internal.webservice.MapQuestOpenDirectionsService.RoutingOption;
import com.thingtrack.konekti.domain.Service;
import com.thingtrack.konekti.service.api.ServiceService;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.web.form.field.LocalizationField;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.terminal.ExternalResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.ComponentContainer;
import com.vaadin.ui.ComponentContainer.ComponentDetachListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnGenerator;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window.Notification;
import com.vaadin.ui.themes.Reindeer;

public class RouteForm extends CustomComponent implements ValueChangeListener,
		ComponentDetachListener {

	@AutoGenerated
	private Panel mainLayout;
	@AutoGenerated
	private VerticalLayout verticalLayout_2;
	@AutoGenerated
	private Label resultValueLabel;
	@AutoGenerated
	private Label resultCaptionLabel;
	@AutoGenerated
	private Button createRouteButton;
	@AutoGenerated
	private Button addStopButton;
	@AutoGenerated
	private CustomizedLocationTextField destStopcustomizedLocationTextField;
	@AutoGenerated
	private CustomizedLocationTextField origStopcustomizedLocationTextField;

	private RouteTypeField routeTypeField;

	private IWorkbenchContext context;

	public RouteTypeField getRouteTypeField() {
		return routeTypeField;
	}

	private RouteAvoidsField routeAvoidsField;

	public RouteAvoidsField getRouteAvoidsField() {
		return routeAvoidsField;
	}

	private Date selectedStartingRouteDate;

	private int stopAsciiCounter = 66;
	private Map<Component, MapCoordinates> stops = new HashMap<Component, MapCoordinates>();

	// Load the route's maneuvers
	BeanItemContainer<Maneuver> maneuverBeanItemContainer;

	private Route designedRoute;

	public Route getDesignedRoute() {
		return designedRoute;
	}

	private List<CustomizedLocationTextField> customizedLocationTextFields = new ArrayList<CustomizedLocationTextField>();

	private ServiceService serviceService;

	private Service selectedService;

	public void setSelectedService(Service selectedService) {

		this.selectedService = selectedService;

		//Clean previous result
		resultValueLabel.setValue(null);
		
		// Load the form
		routeTypeField.setValue(this.selectedService.getRouteType());
		routeAvoidsField.setValue(this.selectedService.getRouteAvoids());

		// Remove all components
		for (CustomizedLocationTextField customizedLocationTextField : customizedLocationTextFields) {

			if(customizedLocationTextField.getStopType() == StopType.INTERMEDIATE)
				verticalLayout_2.removeComponent(customizedLocationTextField);
				
		}

		customizedLocationTextFields.clear();
		customizedLocationTextFields.add(origStopcustomizedLocationTextField);
		customizedLocationTextFields.add(destStopcustomizedLocationTextField);
		
		//Clean origin and destination 
		origStopcustomizedLocationTextField.setValue(null);
		destStopcustomizedLocationTextField.setValue(null);

		// Insert new components for each stop object
		for (com.thingtrack.bustrack.domain.Route route : this.selectedService
				.getRoutes()) {

			for (Stop stop : route.getStops()) {

				double longitude = stop.getStopAddress().getLongitude();
				double latitude = stop.getStopAddress().getLatitude();
				
				//Origin 
				if(this.selectedService.getRoutes().get(0) == route && route.getStops().get(0) == stop){
					origStopcustomizedLocationTextField.setValue(stop);
					continue;
				}
				//Destination
				else if(this.selectedService.getRoutes().get(this.selectedService.getRoutes().size() -1)  == route && route.getStops().get(route.getStops().size() - 1) == stop){
					destStopcustomizedLocationTextField.setValue(stop);
					continue;
				}
				//Intermediate
				else{
					addStop(longitude, latitude);
				}
			}
		}
	}

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public RouteForm() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		origStopcustomizedLocationTextField.setCaptionAndColor(new Character(
				(char) 65).toString(), "green1");
		origStopcustomizedLocationTextField
				.setStopType(CustomizedLocationTextField.StopType.ORIGIN);

		destStopcustomizedLocationTextField.setCaptionAndColor(new Character(
				(char) 66).toString(), "red1");
		destStopcustomizedLocationTextField
				.setStopType(CustomizedLocationTextField.StopType.DESTINATION);

		CSSInject routePlannesStyles = new CSSInject(
				"/* Lay the options horizontally */"
						+ ".v-select-optiongroup-horizontal .v-select-option {"
						+ "display: inline-block;" + "}"

						+ "/* Some extra spacing is needed */"
						+ ".v-select-optiongroup-horizontal"
						+ ".v-select-option.v-radiobutton {"
						+ "padding-right: 10px;" + "}"

						+ "/* Bolder captions*/" + ".v-caption-bolder{"
						+ "font-weight: bolder;" + "}" + "");

		mainLayout.addComponent(routePlannesStyles);

		routeTypeField.addStyleName("bolder");
		routeAvoidsField.addStyleName("bolder");

		resultCaptionLabel.setStyleName(Reindeer.LABEL_H2);
		resultValueLabel.setStyleName(Reindeer.LABEL_H2);
		addStopButton.addStyleName(Reindeer.BUTTON_LINK);

		origStopcustomizedLocationTextField.setData(1);
		origStopcustomizedLocationTextField.addStyleName("bolder");
		origStopcustomizedLocationTextField
				.addListener((ValueChangeListener) this);
		destStopcustomizedLocationTextField.setData(2);
		destStopcustomizedLocationTextField
				.addListener((ValueChangeListener) this);

		addStopButton.addListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				addStop();
			}
		});
	}

	public RouteForm(IWorkbenchContext context,
			ClickListener createRouClickListener) {

		this();

		createRouteButton.addListener(createRouClickListener);

		customizedLocationTextFields.add(origStopcustomizedLocationTextField);
		customizedLocationTextFields.add(destStopcustomizedLocationTextField);

		this.serviceService = ServiceDesignerViewContainer.getServiceService();
	}

	@Override
	public void attach() {
		super.attach();

		CSSInject routePlannesStyles = new CSSInject(
				"/* Lay the options horizontally */"
						+ ".v-select-optiongroup-horizontal .v-select-option {"
						+ "display: inline-block;"
						+ "}"

						+ "/* Some extra spacing is needed */"
						+ ".v-select-optiongroup-horizontal"
						+ ".v-select-option.v-radiobutton {"
						+ "padding-right: 10px;"
						+ "}"

						+ "/* Bolder captions*/"
						+ ".v-caption-bolder{"
						+ "font-weight: bolder;"
						+ "}"
						+

						".v-filterselect-validated .v-filterselect-input {"
						+ "background: url('"
						+ getApplication().getURL()
						+ "VAADIN/themes/konekti/images/icons/servicedesigner-module/tick.png') no-repeat right center, "
						+ "url('"
						+ getApplication().getURL()
						+ "VAADIN/themes/reindeer/common/img/vertical-sprites.png') repeat-x scroll left -499px transparent;"
						+ "}"
						+

						".v-filterselect-validated.v-filterselect-focus .v-filterselect-input{"
						+ "background: url('"
						+ getApplication().getURL()
						+ "VAADIN/themes/konekti/images/icons/servicedesigner-module/tick.png') no-repeat right center, "
						+ "url('"
						+ getApplication().getURL()
						+ "VAADIN/themes/reindeer/common/img/vertical-sprites.png') repeat-x scroll left -573px transparent;"
						+ "}" +

						"");

		mainLayout.addComponent(routePlannesStyles);
	}

	@Override
	public void valueChange(ValueChangeEvent event) {

		com.vaadin.ui.Field.ValueChangeEvent locationTextFieldEvent = (com.vaadin.ui.Field.ValueChangeEvent) event;

		GeocodedLocation geocodedLocation = (GeocodedLocation) locationTextFieldEvent
				.getProperty().getValue();
		
		if(geocodedLocation == null)
			return;

		stops.put(locationTextFieldEvent.getComponent(), new MapCoordinates(
				geocodedLocation.getLat(), geocodedLocation.getLon()));

	}

	public void routeCalculation() {

		if (stops.size() < 2)
			return;

		List<Component> stopComponents = new ArrayList<Component>(
				stops.keySet());
		Collections.sort(stopComponents, new StopComparator());

		List<MapCoordinates> routeCoordinates = new ArrayList<MapCoordinates>();
		for (Component stopComponent : stopComponents)
			routeCoordinates.add(stops.get(stopComponent));

		MapQuestOpenDirectionsService mapQuestOpenDirectionsService = MapQuestOpenDirectionsService
				.getInstance();

		// Routing options
		createRouteOptions(mapQuestOpenDirectionsService);

		MapCoordinates[] routeCoordinatesArray = new MapCoordinates[routeCoordinates
				.size()];
		routeCoordinates.toArray(routeCoordinatesArray);

		try {
			designedRoute = mapQuestOpenDirectionsService
					.getRoute(routeCoordinatesArray);

			// Show the summarized result
			resultValueLabel.setValue(getEstimatedServiceResult(designedRoute));

			ServiceDesignerView routePlannerLayout = (ServiceDesignerView) this
					.getData();

			// Draw in the map
			routePlannerLayout.drawRouteStroke(selectedStartingRouteDate,
					designedRoute);

			// Load maneuver table
			routePlannerLayout.loadManeuverTable(designedRoute);

			// Draw in the charts
			routePlannerLayout.drawCharts(designedRoute);

		} catch (RoutePlannerException e) {
			getApplication().getMainWindow().showNotification(
					"Hubo un error calculando la ruta",
					Notification.TYPE_ERROR_MESSAGE);
		}

	}

	private String getEstimatedServiceResult(Route route) {

		StringBuilder stringBuilder = new StringBuilder();

		stringBuilder.append(getServiceEstimatedDistance(route.getDistance()));
		stringBuilder.append(" / ");
		stringBuilder.append(getServiceEstimatedFormattedTime(route.getTime()));

		return stringBuilder.toString();
	}

	private String getServiceEstimatedDistance(double kilometeres) {

		if (kilometeres < 0) {
			throw new IllegalArgumentException(
					"El tiempo estimado del servicio debe ser mayor que cero");
		}

		StringBuilder stringBuilder = new StringBuilder();

		stringBuilder.append((int) kilometeres);
		stringBuilder.append(" Kilómetros ");

		return stringBuilder.toString();

	}

	private String getServiceEstimatedFormattedTime(long seconds) {

		if (seconds < 0) {
			throw new IllegalArgumentException(
					"El tiempo estimado del servicio debe ser mayor que cero");
		}

		long days = TimeUnit.SECONDS.toDays(seconds);
		seconds -= TimeUnit.DAYS.toSeconds(days);
		long hours = TimeUnit.SECONDS.toHours(seconds);
		seconds -= TimeUnit.HOURS.toSeconds(hours);
		long minutes = TimeUnit.SECONDS.toMinutes(seconds);

		StringBuilder stringBuilder = new StringBuilder();

		if (days > 0) {
			stringBuilder.append(days);
			stringBuilder.append(" días ");
		}
		if (hours > 0) {
			stringBuilder.append(hours);
			stringBuilder.append(" horas ");
		}
		if (minutes > 0) {
			stringBuilder.append(minutes);
			stringBuilder.append(" minutos ");
		}

		return stringBuilder.toString();
	}

	private void addRoutingOptions(
			MapQuestOpenDirectionsService mapQuestOpenDirectionsService) {

		// Custom time
		mapQuestOpenDirectionsService.addRoutingOption(RoutingOption.TIME_TYPE,
				2);
		mapQuestOpenDirectionsService.addRoutingOption(RoutingOption.DATE_TYPE,
				selectedStartingRouteDate);
		mapQuestOpenDirectionsService.addRoutingOption(
				RoutingOption.LOCAL_TIME, selectedStartingRouteDate);
	}

	/* PRIVATE CLASS */
	private class StopComparator implements Comparator<Component> {

		@Override
		public int compare(Component comp0, Component comp1) {

			@SuppressWarnings("rawtypes")
			Integer index0 = (Integer) ((LocalizationField) comp0).getData();
			@SuppressWarnings("rawtypes")
			Integer index1 = (Integer) ((LocalizationField) comp1).getData();

			return index0.compareTo(index1);
		}
	}

	private class DirectionIconColumnGenerator implements ColumnGenerator {

		static final String DIRECTION_ICON_COLUMN_ID = "direction-icon";

		@Override
		public Object generateCell(Table source, Object itemId, Object columnId) {

			Maneuver maneuverItem = (Maneuver) itemId;

			if (maneuverItem.getIconUrl() == null)
				return null;

			Embedded directionEmbedded = new Embedded("", new ExternalResource(
					maneuverItem.getIconUrl()));
			return directionEmbedded;
		}

	}

	@Override
	public void componentDetachedFromContainer(ComponentDetachEvent event) {

		if (!(event.getDetachedComponent() instanceof CustomizedLocationTextField))
			return;

		CustomizedLocationTextField removingCustomizedLocationTextField = (CustomizedLocationTextField) event
				.getDetachedComponent();
		stops.remove(removingCustomizedLocationTextField
				.getStopLocalizationField());

		int removingComponentIndex = verticalLayout_2
				.getComponentIndex(removingCustomizedLocationTextField);
		int destComponentIndex = verticalLayout_2
				.getComponentIndex(destStopcustomizedLocationTextField);

		for (int i = removingComponentIndex + 1; i <= destComponentIndex; i++) {

			CustomizedLocationTextField customizedLocationTextField = (CustomizedLocationTextField) verticalLayout_2
					.getComponent(i);

			int index = customizedLocationTextField.getStopCaption().charAt(0);
			index--;
			customizedLocationTextField.setCaption(new Character((char) index)
					.toString());

		}

		stopAsciiCounter--;
		customizedLocationTextFields
				.remove(removingCustomizedLocationTextField);
		verticalLayout_2.removeComponent(removingCustomizedLocationTextField);
	}

	public List<CustomizedLocationTextField> getCustomizedLocationTextFields() {
		return customizedLocationTextFields;
	}

	@AutoGenerated
	private Panel buildMainLayout() {
		// common part: create layout
		mainLayout = new Panel();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		setWidth("100.0%");
		setHeight("100.0%");

		// verticalLayout_1
		verticalLayout_2 = buildVerticalLayout_2();
		mainLayout.addComponent(verticalLayout_2);

		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setMargin(false);
		verticalLayout_2.setSpacing(true);

		// routeTypeField
		routeTypeField = new RouteTypeField();
		routeTypeField.setCaption("Optimiza tu ruta:");
		routeTypeField.setWidth("100.0%");
		routeTypeField.setHeight("-1px");

		verticalLayout_2.addComponent(routeTypeField);

		// avoidanceStrategiesOptionGroup
		routeAvoidsField = new RouteAvoidsField();
		routeAvoidsField.setCaption("Evitar lo siguiente:");
		routeAvoidsField.setImmediate(false);
		routeAvoidsField.setWidth("100.0%");
		routeAvoidsField.setHeight("-1px");

		verticalLayout_2.addComponent(routeAvoidsField);

		// origStopcustomizedLocationTextField
		origStopcustomizedLocationTextField = new CustomizedLocationTextField();
		origStopcustomizedLocationTextField.setCaption("Paradas");
		origStopcustomizedLocationTextField.setImmediate(false);
		origStopcustomizedLocationTextField.setDescription("Primera parada");
		origStopcustomizedLocationTextField.setWidth("100.0%");
		origStopcustomizedLocationTextField.setHeight("-1px");
		verticalLayout_2.addComponent(origStopcustomizedLocationTextField);

		// destStopcustomizedLocationTextField
		destStopcustomizedLocationTextField = new CustomizedLocationTextField();

		destStopcustomizedLocationTextField.setDescription("Última parada");

		destStopcustomizedLocationTextField.setWidth("100.0%");
		destStopcustomizedLocationTextField.setHeight("-1px");

		verticalLayout_2.addComponent(destStopcustomizedLocationTextField);

		// addStopButton
		addStopButton = new Button();
		addStopButton.setCaption("+ Añadir parada");
		addStopButton.setImmediate(true);
		addStopButton.setWidth("-1px");
		addStopButton.setHeight("-1px");

		verticalLayout_2.addComponent(addStopButton);

		// createRouteButton
		createRouteButton = new Button();
		createRouteButton.setCaption("Crear ruta");
		createRouteButton.setImmediate(true);
		createRouteButton.setWidth("-1px");
		createRouteButton.setHeight("-1px");

		verticalLayout_2.addComponent(createRouteButton);
		verticalLayout_2.setComponentAlignment(createRouteButton,
				Alignment.MIDDLE_RIGHT);

		// resultCaptionLabel
		resultCaptionLabel = new Label();
		resultCaptionLabel.setImmediate(false);
		resultCaptionLabel.setWidth("-1px");
		resultCaptionLabel.setHeight("-1px");
		resultCaptionLabel.setValue("Resultado");
		verticalLayout_2.addComponent(resultCaptionLabel);

		// resultValueLabel
		resultValueLabel = new Label();
		resultValueLabel.setImmediate(false);
		resultValueLabel.setWidth("100.0%");
		resultValueLabel.setHeight("100.0%");

		verticalLayout_2.addComponent(resultValueLabel);
		verticalLayout_2.setExpandRatio(resultValueLabel, 1.0f);

		return verticalLayout_2;

	}

	private void createRouteOptions(
			MapQuestOpenDirectionsService mapQuestOpenDirectionsService) {

		// Clear old options
		mapQuestOpenDirectionsService.removeAllOptions();

		// Route type
		String routeType = null;
		if (Service.ROUTE_TYPE.FASTEST.toString().equals(getRouteType()))
			routeType = "fastest";
		else if (Service.ROUTE_TYPE.SHORTEST.toString().equals(getRouteType()))
			routeType = "shortest";

		mapQuestOpenDirectionsService.addRoutingOption(
				RoutingOption.ROUTE_TYPE, routeType);

		// Route avoids
		List<String> routeAvoidsList = new ArrayList<String>();

		for (char avoid : getRouteAvoids()) {

			if (Service.ROUTE_AVOIDS.AVOID_COUNTRY_BORDERS.getValue() == avoid) {
				routeAvoidsList.add("Country+border+crossing");
				continue;
			}
			if (Service.ROUTE_AVOIDS.AVOID_FERRIES.getValue() == avoid) {
				routeAvoidsList.add("Ferry");
				continue;
			}
			if (Service.ROUTE_AVOIDS.AVOID_HIGHWAYS.getValue() == avoid) {
				routeAvoidsList.add("Limited+Access");
				continue;
			}
			if (Service.ROUTE_AVOIDS.AVOID_SEASONAL_ROADS.getValue() == avoid) {
				routeAvoidsList.add("Approximate+Seasonal+Closure");
				continue;
			}
			if (Service.ROUTE_AVOIDS.AVOID_TOLLS.getValue() == avoid) {
				routeAvoidsList.add("Toll+road");
				continue;
			}
			if (Service.ROUTE_AVOIDS.AVOID_UNPAVED.getValue() == avoid) {
				routeAvoidsList.add("Unpaved");
				continue;
			}

		}

		if (routeAvoidsList.size() > 0)
			mapQuestOpenDirectionsService.addRoutingOption(
					RoutingOption.AVOIDS, routeAvoidsList);

	}

	private String getRouteType() {

		return (String) routeTypeField.getValue();
	}

	private char[] getRouteAvoids() {

		String avoidsArray = (String) routeAvoidsField.getValue();
		return avoidsArray.toCharArray();
	}

	private void addStop() {

		stopAsciiCounter++;
		int destStopComponentIndex = verticalLayout_2
				.getComponentIndex(destStopcustomizedLocationTextField);
		CustomizedLocationTextField intermediateCustomizedLocationTextField = new CustomizedLocationTextField();
		intermediateCustomizedLocationTextField.setStopType(StopType.INTERMEDIATE);
		intermediateCustomizedLocationTextField
				.setCaption(destStopcustomizedLocationTextField.getStopCaption());
		intermediateCustomizedLocationTextField
				.setDescription("Parada intermedia");
		intermediateCustomizedLocationTextField
				.addListener((ValueChangeListener) RouteForm.this);
		intermediateCustomizedLocationTextField
				.addListener((ComponentDetachListener) RouteForm.this);
		intermediateCustomizedLocationTextField
				.setData(destStopcustomizedLocationTextField.getData());

		verticalLayout_2.addComponent(intermediateCustomizedLocationTextField,
				destStopComponentIndex);
		// Update last stop
		destStopcustomizedLocationTextField.setCaption(new Character(
				(char) stopAsciiCounter).toString());

		int lastIndex = ((Integer) destStopcustomizedLocationTextField
				.getData()) + 1;
		destStopcustomizedLocationTextField.setData(lastIndex);

		customizedLocationTextFields.add(customizedLocationTextFields
				.indexOf(destStopcustomizedLocationTextField),
				intermediateCustomizedLocationTextField);
	}

	public void addStop(double longitude, double latitude) {

		if (checkStopExists(longitude, latitude))
			return;

		stopAsciiCounter++;
		int destStopComponentIndex = verticalLayout_2
				.getComponentIndex(destStopcustomizedLocationTextField);
		CustomizedLocationTextField intermediateCustomizedLocationTextField = new CustomizedLocationTextField();
		intermediateCustomizedLocationTextField.setStopType(StopType.INTERMEDIATE);
		intermediateCustomizedLocationTextField
				.setCaption(destStopcustomizedLocationTextField.getStopCaption());
		intermediateCustomizedLocationTextField
				.setDescription("Parada intermedia");
		intermediateCustomizedLocationTextField
				.addListener((ValueChangeListener) RouteForm.this);
		intermediateCustomizedLocationTextField
				.addListener((ComponentDetachListener) RouteForm.this);
		intermediateCustomizedLocationTextField
				.setData(destStopcustomizedLocationTextField.getData());

		verticalLayout_2.addComponent(intermediateCustomizedLocationTextField,
				destStopComponentIndex);
		
		//Set the coordinates
		intermediateCustomizedLocationTextField
		.setLocation(longitude, latitude);
		
		// Update last stop
		destStopcustomizedLocationTextField.setCaption(new Character(
				(char) stopAsciiCounter).toString());

		int lastIndex = ((Integer) destStopcustomizedLocationTextField
				.getData()) + 1;
		destStopcustomizedLocationTextField.setData(lastIndex);

		customizedLocationTextFields.add(customizedLocationTextFields
				.indexOf(destStopcustomizedLocationTextField),
				intermediateCustomizedLocationTextField);
	}

	public void removeStop(double longitude, double latitude) {

		CustomizedLocationTextField removingStopComponent = getCustomizedLocationTextField(
				longitude, latitude);

		ComponentContainer parentContainer = (ComponentContainer) removingStopComponent
				.getParent();

		if (parentContainer != null) {

			this.componentDetachedFromContainer(new ComponentDetachEvent(
					parentContainer, removingStopComponent));
		}
	}

	private boolean checkStopExists(double longitude, double latitude) {

		return getCustomizedLocationTextField(longitude, latitude) != null;
	}

	private CustomizedLocationTextField getCustomizedLocationTextField(
			double longitude, double latitude) {

		for (CustomizedLocationTextField customizedLocationTextField : customizedLocationTextFields) {

			MapCoordinates mapCoordinates = stops
					.get(customizedLocationTextField.getStopLocalizationField());
			
			if(mapCoordinates == null)
				continue;

			if (Math.abs(longitude - mapCoordinates.getLng()) <= 0.00001
					&& Math.abs(latitude - mapCoordinates.getLat()) <= 0.00001) {
				return customizedLocationTextField;
			}

		}

		return null;
	}
	
	public void resetStopAsciiCounter(){
		
		//Reset the stop counter
		this.stopAsciiCounter = 66;
		
		//Reset the origin and destination captions
		origStopcustomizedLocationTextField.setCaption(new Character(
				(char) 65).toString());
		destStopcustomizedLocationTextField.setCaption(new Character(
				(char) 66).toString());
		
		//Reset the location values
		origStopcustomizedLocationTextField.setValue(null);
		destStopcustomizedLocationTextField.setValue(null);
	}

}

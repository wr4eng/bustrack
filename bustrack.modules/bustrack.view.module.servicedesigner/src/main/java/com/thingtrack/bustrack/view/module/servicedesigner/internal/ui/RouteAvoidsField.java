package com.thingtrack.bustrack.view.module.servicedesigner.internal.ui;

import org.vaadin.addon.customfield.CustomField;

import com.thingtrack.konekti.domain.Service;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.VerticalLayout;

public class RouteAvoidsField extends CustomField {

	public static final String AVOID_HIGHWAYS = "Autopistas";
	public static final String AVOID_TOLLS = "Peajes";
	public static final String AVOID_UNPAVED = "VÃ­as sin pavimentar";
	public static final String AVOID_FERRIES = "Ferries";
	public static final String AVOID_COUNTRY_BORDERS = "Fronteras";
	public static final String AVOID_SEASONAL_ROADS = "Carreras estacionarias";
	public static final String AVOID_TIMED_RESTRICTIONS = "Restricciones temporales";
	
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private OptionGroup avoidanceStrategiesOptionGroup;

	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public RouteAvoidsField() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		
		// Use the multiple selection mode.
		avoidanceStrategiesOptionGroup.setMultiSelect(true);
		avoidanceStrategiesOptionGroup.setStyleName("horizontal");
		
		avoidanceStrategiesOptionGroup.addItem(AVOID_HIGHWAYS);
		avoidanceStrategiesOptionGroup.addItem(AVOID_TOLLS);
		avoidanceStrategiesOptionGroup.addItem(AVOID_FERRIES);
		avoidanceStrategiesOptionGroup.addItem(AVOID_UNPAVED);
		avoidanceStrategiesOptionGroup.addItem(AVOID_COUNTRY_BORDERS);
		avoidanceStrategiesOptionGroup.addItem(AVOID_SEASONAL_ROADS);
		avoidanceStrategiesOptionGroup.addItem(AVOID_TIMED_RESTRICTIONS);

	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// avoidanceStrategiesOptionGroup
		avoidanceStrategiesOptionGroup = new OptionGroup();
		avoidanceStrategiesOptionGroup.setImmediate(false);
		avoidanceStrategiesOptionGroup.setWidth("100.0%");
		avoidanceStrategiesOptionGroup.setHeight("100.0%");
		mainLayout.addComponent(avoidanceStrategiesOptionGroup);
		mainLayout.setExpandRatio(avoidanceStrategiesOptionGroup, 1.0f);
		
		return mainLayout;
	}

	
	@Override
	public void setPropertyDataSource(Property newDataSource) {
		
		String collectionsValue = (String) newDataSource.getValue();

		char[] stringArray;
		
		if (collectionsValue == null)
			return;
		
		stringArray = collectionsValue.toCharArray();
		
	    //display the array
	    for(int index=0; index < stringArray.length; index++) {
	    	if (stringArray[index] == Service.ROUTE_AVOIDS.AVOID_HIGHWAYS.getValue())
	    		avoidanceStrategiesOptionGroup.select(AVOID_HIGHWAYS);
	    	
	    	if (stringArray[index] == Service.ROUTE_AVOIDS.AVOID_TOLLS.getValue())
	    		avoidanceStrategiesOptionGroup.select(AVOID_TOLLS);
	    	
	    	if (stringArray[index] == Service.ROUTE_AVOIDS.AVOID_UNPAVED.getValue())
	    		avoidanceStrategiesOptionGroup.select(AVOID_UNPAVED);
	    	
	    	if (stringArray[index] == Service.ROUTE_AVOIDS.AVOID_FERRIES.getValue())
	    		avoidanceStrategiesOptionGroup.select(AVOID_FERRIES);
	    	
	    	if (stringArray[index] == Service.ROUTE_AVOIDS.AVOID_COUNTRY_BORDERS.getValue())
	    		avoidanceStrategiesOptionGroup.select(AVOID_COUNTRY_BORDERS);
	    	
	    	if (stringArray[index] == Service.ROUTE_AVOIDS.AVOID_SEASONAL_ROADS.getValue())
	    		avoidanceStrategiesOptionGroup.select(AVOID_SEASONAL_ROADS);
	    	
	    	if(stringArray[index] == Service.ROUTE_AVOIDS.AVOID_TIMED_RESTRICTIONS.getValue())
	    		avoidanceStrategiesOptionGroup.select(AVOID_TIMED_RESTRICTIONS);	
	    }

	    super.setPropertyDataSource(newDataSource);
	}
	
	@Override
	public Object getValue() {
		
		StringBuilder avoidsValue = new StringBuilder();
		
		if(avoidanceStrategiesOptionGroup.isSelected(AVOID_HIGHWAYS)){
			avoidsValue.append(Service.ROUTE_AVOIDS.AVOID_HIGHWAYS.getValue());
		}
		
		if(avoidanceStrategiesOptionGroup.isSelected(AVOID_TOLLS)){
			avoidsValue.append(Service.ROUTE_AVOIDS.AVOID_TOLLS.getValue());
		}
		
		if(avoidanceStrategiesOptionGroup.isSelected(AVOID_UNPAVED)){
			avoidsValue.append(Service.ROUTE_AVOIDS.AVOID_UNPAVED.getValue());
		}
		
		if(avoidanceStrategiesOptionGroup.isSelected(AVOID_FERRIES)){
			avoidsValue.append(Service.ROUTE_AVOIDS.AVOID_FERRIES.getValue());
		}

		if(avoidanceStrategiesOptionGroup.isSelected(AVOID_COUNTRY_BORDERS)){
			avoidsValue.append(Service.ROUTE_AVOIDS.AVOID_COUNTRY_BORDERS.getValue());
		}

		if(avoidanceStrategiesOptionGroup.isSelected(AVOID_SEASONAL_ROADS)){
			avoidsValue.append(Service.ROUTE_AVOIDS.AVOID_SEASONAL_ROADS.getValue());
		}
		
		if(avoidanceStrategiesOptionGroup.isSelected(AVOID_TIMED_RESTRICTIONS)){
			avoidsValue.append(Service.ROUTE_AVOIDS.AVOID_TIMED_RESTRICTIONS.getValue());
		}
		
		return avoidsValue.toString();
		
	}
	
	@Override
	public void setValue(Object newValue) throws ReadOnlyException,
			ConversionException {

		//Deselect all
		avoidanceStrategiesOptionGroup.setValue(null);
		
		if(newValue == null)
			return;
		
		if(!(newValue instanceof String))
			throw new ConversionException("The value in not a String.class");
		
		String collectionsValue = (String) newValue;

		char[] stringArray;
		
		if (collectionsValue == null)
			return;
		
		stringArray = collectionsValue.toCharArray();
		
	    //display the array
	    for(int index=0; index < stringArray.length; index++) {
	    	if (stringArray[index] == Service.ROUTE_AVOIDS.AVOID_HIGHWAYS.getValue())
	    		avoidanceStrategiesOptionGroup.select(AVOID_HIGHWAYS);
	    	
	    	if (stringArray[index] == Service.ROUTE_AVOIDS.AVOID_TOLLS.getValue())
	    		avoidanceStrategiesOptionGroup.select(AVOID_TOLLS);
	    	
	    	if (stringArray[index] == Service.ROUTE_AVOIDS.AVOID_UNPAVED.getValue())
	    		avoidanceStrategiesOptionGroup.select(AVOID_UNPAVED);
	    	
	    	if (stringArray[index] == Service.ROUTE_AVOIDS.AVOID_FERRIES.getValue())
	    		avoidanceStrategiesOptionGroup.select(AVOID_FERRIES);
	    	
	    	if (stringArray[index] == Service.ROUTE_AVOIDS.AVOID_COUNTRY_BORDERS.getValue())
	    		avoidanceStrategiesOptionGroup.select(AVOID_COUNTRY_BORDERS);
	    	
	    	if (stringArray[index] == Service.ROUTE_AVOIDS.AVOID_SEASONAL_ROADS.getValue())
	    		avoidanceStrategiesOptionGroup.select(AVOID_SEASONAL_ROADS);
	    	
	    	if(stringArray[index] == Service.ROUTE_AVOIDS.AVOID_TIMED_RESTRICTIONS.getValue())
	    		avoidanceStrategiesOptionGroup.select(AVOID_TIMED_RESTRICTIONS);	
	    }

	}
	
	@Override
	public Class<?> getType() {
		// TODO Auto-generated method stub
		return null;
	}

}

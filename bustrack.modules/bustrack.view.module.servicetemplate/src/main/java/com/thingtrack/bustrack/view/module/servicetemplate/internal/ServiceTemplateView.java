package com.thingtrack.bustrack.view.module.servicetemplate.internal;

import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;

import org.vaadin.dialogs.ConfirmDialog;

import com.thingtrack.bustrack.domain.ServiceTemplate;
import com.thingtrack.bustrack.service.api.ServiceTemplateService;
import com.thingtrack.bustrack.view.module.servicetemplate.addon.ServiceTemplateToolbar;
import com.thingtrack.bustrack.view.module.servicetemplate.addon.ServiceTemplateToolbar.ClickParsingTemplateButtonListener;
import com.thingtrack.bustrack.view.module.servicetemplate.addon.parser.ServiceTemplateParser;
import com.thingtrack.bustrack.view.module.servicetemplate.addon.parser.exception.NoServiceException;
import com.thingtrack.bustrack.view.module.servicetemplate.addon.parser.exception.ServiceParsingException;
import com.thingtrack.bustrack.view.web.form.ServiceTemplateViewForm;
import com.thingtrack.konekti.domain.Service;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar;
import com.thingtrack.konekti.view.addon.ui.UploadViewForm;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickFilterButtonListener;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickPrintButtonListener;
import com.thingtrack.konekti.view.addon.ui.DataGridView;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickAddButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickEditButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickRemoveButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickNavigationEvent;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickRefreshButtonListener;
import com.thingtrack.konekti.view.addon.ui.WindowDialog;
import com.thingtrack.konekti.view.addon.ui.WindowDialog.DialogResult;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomTable;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomTable.ColumnGenerator;
import com.vaadin.ui.Window.CloseEvent;
import com.vaadin.ui.Window.CloseListener;

@SuppressWarnings("serial")
public class ServiceTemplateView extends AbstractView 
	implements ClickRefreshButtonListener, ClickAddButtonListener, ClickEditButtonListener, 
	ClickRemoveButtonListener, ClickFilterButtonListener, ClickPrintButtonListener, ClickParsingTemplateButtonListener {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private DataGridView dgServiceTemplate;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private ServiceTemplateService serviceTemplateService;
	
	private BindingSource<ServiceTemplate> bsServiceTemplate =  new BindingSource<ServiceTemplate>(ServiceTemplate.class, 0);
	
	private NavigationToolbar navigationToolbar;
	private EditionToolbar editionToolbar;
	private BoxToolbar boxToolbar;
	private ServiceTemplateToolbar serviceTemplateToolbar;
	
	private IViewContainer viewContainer;
	
	private ServiceTemplateParser serviceTemplateParser = new ServiceTemplateParser();
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ServiceTemplateView(IViewContainer viewContainer) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		
		// set Slide View Services and ViewContainer to navigate
		this.viewContainer = viewContainer;
		this.serviceTemplateService = ServiceTemplateViewContainer.getServiceTemplateService();
		
		// initialize datasource views		
		initView();	
		
	}

	private void initView() {
		// initialize Slide View Organization View
		dgServiceTemplate.setImmediate(true);		
		dgServiceTemplate.setSelectable(true);
		
		refreshBindindSource();
		
		// STEP 01: create grid view for slide Organization View
		try {
			dgServiceTemplate.setBindingSource(bsServiceTemplate);
			dgServiceTemplate.addGeneratedColumn(FileColumn.FILE_COLUMN_ID, new FileColumn());
			dgServiceTemplate.setVisibleColumns(new String[] { "code", "description", FileColumn.FILE_COLUMN_ID} );       
			dgServiceTemplate.setColumnHeaders(new String[] { "code", "Descripción", "Fichero" } );
			
		}
		catch(Exception e) {
			throw new RuntimeException("¡Error al crear el grid de Planrtilla Servicios!", e);
		}
			
		// STEP 02: create toolbar for slide Organization View
		navigationToolbar = new NavigationToolbar(0, bsServiceTemplate, viewContainer);
		editionToolbar = new EditionToolbar(1, bsServiceTemplate);
		boxToolbar = new BoxToolbar(2, bsServiceTemplate);
		serviceTemplateToolbar = new ServiceTemplateToolbar(3, bsServiceTemplate, viewContainer);
		
		navigationToolbar.addListenerRefreshButton(this);
		navigationToolbar.setDownButton(false);
		navigationToolbar.setUpButton(false);
		
		editionToolbar.addListenerAddButton(this);
		editionToolbar.addListenerEditButton(this);
		editionToolbar.addListenerDeleteButton(this);
		
		boxToolbar.addListenerFilterButton(this);
		boxToolbar.addListenerPrintButton(this);
		
		serviceTemplateToolbar.addListenerParsingTemplateButton(this);
		
		dgServiceTemplate.addListenerAddButton(this);
		dgServiceTemplate.addListenerEditButton(this);
		dgServiceTemplate.addListenerDeleteButton(this);
		
		
		removeAllToolbar();
		
		addToolbar(navigationToolbar);
		addToolbar(editionToolbar);
		addToolbar(boxToolbar);
		addToolbar(serviceTemplateToolbar);

	}
	
	private void refreshBindindSource() {
		try {		
			bsServiceTemplate.removeAllItems();
			bsServiceTemplate.addAll(serviceTemplateService.getAll());		
		} catch (IllegalArgumentException e) {
			throw new RuntimeException("¡No se pudo refrescar las Plantillas de Servicios!", e);
		} catch (Exception e) {
			throw new RuntimeException("¡No se pudo refrescar los Plantillas de Servicios!", e);
		}		
	}		
	
	@Override
	public void refreshButtonClick(ClickNavigationEvent event) {
		refreshBindindSource();
		
	}
	
	private void refreshDataGridView(ServiceTemplate serviceTemplateSaved) {
		if(bsServiceTemplate.containsId(serviceTemplateSaved)){			
			ServiceTemplate previousServiceTemplate = bsServiceTemplate.prevItemId(serviceTemplateSaved);
			
			bsServiceTemplate.removeItem(serviceTemplateSaved);
			bsServiceTemplate.addItemAfter(previousServiceTemplate, serviceTemplateSaved);
			bsServiceTemplate.setItemId(serviceTemplateSaved);
		}
		else
			bsServiceTemplate.addItem(serviceTemplateSaved);
		
	}
	
	@Override
	public void addButtonClick(EditionToolbar.ClickNavigationEvent event) {
		ServiceTemplate serviceTemplate = new ServiceTemplate();

		try {
			@SuppressWarnings("unused")
			WindowDialog<ServiceTemplate> windowDialog = new WindowDialog<ServiceTemplate>(getWindow(), "Nueva Plantilla de Servicio", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new ServiceTemplateViewForm(), serviceTemplate, 
					new WindowDialog.CloseWindowDialogListener<ServiceTemplate>() {
			    public void windowDialogClose(WindowDialog<ServiceTemplate>.CloseWindowDialogEvent<ServiceTemplate> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {
			    		ServiceTemplate savingServiceTemplate= event.getDomainEntity();
			    					    		
			    		ServiceTemplate savedServiceTemplate = serviceTemplateService.save(savingServiceTemplate);
			    		
			    		refreshDataGridView(savedServiceTemplate);
					} catch (Exception e) {
						throw new RuntimeException("¡No se pudo crear el nuevo Plantilla de Servicios!", e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException("¡No se pudo abrir el formulario Nuevo Plantilla de Servicios!", e);

		} catch (Exception e) {
			throw new RuntimeException("¡No se pudo abrir el formulario Nuevo Plantilla de Servicios!", e);
		}
		
	}
	
	@Override
	public void editButtonClick(EditionToolbar.ClickNavigationEvent event) {
		editFormView(event.getRegister());
		
	}
	
	private void editFormView(Object serviceTemplate) {
		ServiceTemplate editingServiceTemplate = (ServiceTemplate) serviceTemplate;
		
		try {
			@SuppressWarnings("unused")
			WindowDialog<ServiceTemplate> windowDialog = new WindowDialog<ServiceTemplate>(getApplication().getMainWindow() , "Editor Plantilla de Servicios", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new ServiceTemplateViewForm(),editingServiceTemplate, 
					new WindowDialog.CloseWindowDialogListener<ServiceTemplate>() {
			    public void windowDialogClose(WindowDialog<ServiceTemplate>.CloseWindowDialogEvent<ServiceTemplate> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {			    		
			    		ServiceTemplate savingServiceTemplate = event.getDomainEntity();
			    		
			    		ServiceTemplate savedServiceTemplate = serviceTemplateService.save(savingServiceTemplate);			    					    		
			    		
			    		refreshDataGridView(savingServiceTemplate);
					} catch (Exception e) {
						throw new RuntimeException("¡No se pudo modificar la Plantilla de Servicios!", e);
												
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException("¡No se pudo abrir el formulario la Plantilla de Servicios!", e);
		} catch (Exception e) {
			throw new RuntimeException("¡No se pudo abrir el formulario Editor la Plantilla de Servicios!", e);
		} 
				
	}
	
	@Override
	public void deleteButtonClick(EditionToolbar.ClickNavigationEvent event) {
		final ServiceTemplate editingServiceTemplate = (ServiceTemplate) event.getRegister();
		
		if (editingServiceTemplate == null)
			return;
		
		ConfirmDialog.show(getWindow(), "Borrar Plantilla de Servicios", "¿Estás seguro?", "Si", "No",
		        new ConfirmDialog.Listener() {

		            public void onClose(ConfirmDialog dialog) {
		                if (dialog.isConfirmed()) {
		            		try {
		            			serviceTemplateService.delete(editingServiceTemplate);
		            			
		            			bsServiceTemplate.removeItem(editingServiceTemplate);		            			
		            		} catch (IllegalArgumentException e) {
		            			throw new RuntimeException("¡No se pudo borrar la plantilla de servicios!", e);
		            		} catch (Exception e) {
		            			throw new RuntimeException("¡No se pudo borrar el plantilla de servicios!", e);
		            		}
		                } 
		            }
		        });
		
	}
	

	@Override
	public void filterButtonClick(BoxToolbar.ClickNavigationEvent event) {
		dgServiceTemplate.setFilterBarVisible();
		
	}

	@Override
	public void printButtonClick(BoxToolbar.ClickNavigationEvent event) {
		try {
			dgServiceTemplate.print("Maestro Plantilla de Servicios");
		}
		catch (Exception e) {
			throw new RuntimeException("¡No se pudo imprimir el informe!", e);
		}
		
	}
	
	@Override
	public void parsingTemplateButtonClick(ServiceTemplateToolbar.ClickNavigationEvent event) {
		final ServiceTemplate editingServiceTemplate = (ServiceTemplate) event.getRegister();
		
		List<Service> services = null;
		try {
			services = serviceTemplateParser.parse(editingServiceTemplate);
			
		} catch (FileNotFoundException e) {
			throw new RuntimeException("¡No se puede parsear el fichero!", e);
		} catch (IOException e) {
			throw new RuntimeException("¡No se puede parsear el fichero!", e);
		} catch (ServiceParsingException e) {
			throw new RuntimeException("¡No se puede parsear el fichero!", e);
		} catch (NoServiceException e) {
			throw new RuntimeException("¡No se puede parsear el fichero!", e);
		} catch (Exception e) {
			throw new RuntimeException("¡No se puede parsear el fichero!", e);
		}
		
		if (services.size() == 0)
			return;
		
		try {
			serviceTemplateService.saveAllServiceTemplate(services);
			
		} catch (Exception e) {
			throw new RuntimeException("¡No se puede parsear el fichero!", e);
		}
		
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// dataGridView_1
		dgServiceTemplate = new DataGridView();
		dgServiceTemplate.setImmediate(false);
		dgServiceTemplate.setWidth("100.0%");
		dgServiceTemplate.setHeight("100.0%");
		mainLayout.addComponent(dgServiceTemplate);
		mainLayout.setExpandRatio(dgServiceTemplate, 1.0f);
		
		return mainLayout;
	}

	private class FileColumn implements ColumnGenerator {
		static final String FILE_COLUMN_ID = "file_column-id";

		@Override
		public Object generateCell(CustomTable source, final Object itemId, Object columnId) {

			final ServiceTemplate serviceTemplate = (ServiceTemplate)itemId;
							
			Button fileButton = new Button();
			
			if (serviceTemplate.getFile() != null)
				fileButton.setIcon(new ThemeResource("../konekti/images/icons/servicetemplate-module/document-excel.png"));
			
			fileButton.setCaption("Adjuntar Plantilla Excel");
			fileButton.addListener(new ClickListener() {				
				@Override
				public void buttonClick(ClickEvent event) {					
					final UploadViewForm uploadViewForm = new UploadViewForm(serviceTemplate.getFile());
					
					uploadViewForm.setWidth("300px");
					uploadViewForm.setHeight("-1px");
					uploadViewForm.addListener(new CloseListener() {				
						@Override
						public void windowClose(CloseEvent e) {
							serviceTemplate.setFile(uploadViewForm.getFile());
							
							try {
								serviceTemplateService.save(serviceTemplate);
							} catch (Exception e1) {
								throw new RuntimeException("¡No se pudo borrar la plantilla de servicios!", e1);
							}			    					    		
				    		
				    		refreshDataGridView(serviceTemplate);
				    		
						}
					});
					
					getApplication().getMainWindow().addWindow(uploadViewForm);				
					
				}
			});
				
			return fileButton;
		}

	}
	
}

package com.thingtrack.bustrack.view.module.invoice.internal;

import java.text.SimpleDateFormat;
import java.util.Date;

import org.vaadin.dialogs.ConfirmDialog;

import com.thingtrack.konekti.domain.Invoice;
import com.thingtrack.konekti.domain.InvoiceLine;
import com.thingtrack.konekti.service.api.InvoiceLineService;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickFilterButtonListener;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickPrintButtonListener;
import com.thingtrack.konekti.view.addon.ui.DataGridView;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickAddButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickEditButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickNavigationEvent;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickRemoveButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickDownButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickRefreshButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickUpButtonListener;
import com.thingtrack.konekti.view.addon.ui.WindowDialog;
import com.thingtrack.konekti.view.addon.ui.WindowDialog.DialogResult;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;
import com.thingtrack.konekti.view.web.form.InvoiceLineViewForm;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.data.Property;

@SuppressWarnings("serial")
public class InvoiceLineView extends AbstractView 
	implements ClickDownButtonListener, ClickUpButtonListener, ClickRefreshButtonListener, ClickAddButtonListener, ClickEditButtonListener, ClickRemoveButtonListener, ClickFilterButtonListener, ClickPrintButtonListener {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private DataGridView dgInvoiceLine;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private Invoice invoice;
		
	private InvoiceLineService invoiceLineService;
	
	private BindingSource<InvoiceLine> bsInvoiceLine = new BindingSource<InvoiceLine>(InvoiceLine.class, 1);
			
	private NavigationToolbar navigationToolbar;
	private EditionToolbar editionToolbar;
	private BoxToolbar boxToolbar;
	
	private IViewContainer viewContainer;
	private IWorkbenchContext context;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public InvoiceLineView(IViewContainer viewContainer, IWorkbenchContext context) {		
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		// TODO add user code here	
		// set Slide View Services and ViewContainer to navigate
		this.viewContainer = viewContainer;
		this.context = context;		
		
		this.invoiceLineService = InvoiceViewContainer.getInvoiceLineService();
		
		dgInvoiceLine.setImmediate(true);
	}
	
	
	public void setInvoice(Invoice invoice) {
		this.invoice = invoice;
				
		// refresh datasource
		refreshBindindSource();
		injectBindingSource();
				
	}
	
	private void refreshBindindSource() {
		try {		
			bsInvoiceLine.removeAllItems();				
			bsInvoiceLine.addAll(invoice.getInvoiceLines());
			
			bsInvoiceLine.addNestedContainerProperty("invoiceLineStatus.description");
			bsInvoiceLine.addNestedContainerProperty("invoice.code");
			
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}
	
	private void injectBindingSource() {
		try {
			//STEP 01: create grid view for slide Organization View
			dgInvoiceLine.setBindingSource(bsInvoiceLine);
			dgInvoiceLine.setVisibleColumns(new String[]  { "invoice.code", "number", "price", "comment", "invoiceLineStatus.description", "invoiceLineDate"} );        
			dgInvoiceLine.setColumnHeaders(new String[] { "Código Factura", "Número", "Precio", "Comentario", "Estado", "Fecha" } );
			
			dgInvoiceLine.setColumnCollapsed("comment", true);
			
			// STEP 02: create toolbar for slide
			navigationToolbar = new NavigationToolbar(0, bsInvoiceLine, viewContainer);
			editionToolbar = new EditionToolbar(1, bsInvoiceLine);
			boxToolbar = new BoxToolbar(2, bsInvoiceLine);
			
			navigationToolbar.addListenerDownButton(this);
			navigationToolbar.addListenerUpButton(this);
			
			editionToolbar.addListenerAddButton(this);
			editionToolbar.addListenerEditButton(this);
			editionToolbar.addListenerDeleteButton(this);
			
			boxToolbar.addListenerFilterButton(this);
			boxToolbar.addListenerPrintButton(this);
			
			dgInvoiceLine.addListenerAddButton(this);
			dgInvoiceLine.addListenerEditButton(this);
			dgInvoiceLine.addListenerDeleteButton(this);
			
			removeAllToolbar();
			
			addToolbar(navigationToolbar);
			addToolbar(editionToolbar);
			addToolbar(boxToolbar);
			
		} catch (Exception ex) {
			ex.getMessage();
			
		}
		
	}
	
	@Override
	public void downButtonClick(NavigationToolbar.ClickNavigationEvent event) {
		InvoiceLine invoiceLineSelected  = null;
		
		if (bsInvoiceLine.getItemIds().size() > 0) {
			// get selected Organization
			invoiceLineSelected = (InvoiceLine)bsInvoiceLine.getItemId();
			
			// inject the locations data from organization in the detail Location View
			ServiceView serviceView = (ServiceView)viewContainer.getNext();
			serviceView.setInvoiceLine(invoiceLineSelected);
			
			// roll to the detail Location View
			viewContainer.getSliderView().rollNext();
		}
		
	}
	
	@Override
	public void upButtonClick(NavigationToolbar.ClickNavigationEvent event) {
		viewContainer.getSliderView().rollPrevious();
		
	}	
	
	@Override
	public void refreshButtonClick(NavigationToolbar.ClickNavigationEvent event) {
		refreshBindindSource();
		
	}
	
	@Override
	public void addButtonClick(ClickNavigationEvent event) {
		InvoiceLine invoiceLine = null;
		try {
			invoiceLine = invoiceLineService.createNewInvoiceLine(invoice);
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
			return;
		}				
		
		try {
			@SuppressWarnings("unused")
			WindowDialog<InvoiceLine> windowDialog = new WindowDialog<InvoiceLine>(getWindow(), "Nueva Linea Factura", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new InvoiceLineViewForm(), invoiceLine, 
					new WindowDialog.CloseWindowDialogListener<InvoiceLine>() {
			    public void windowDialogClose(WindowDialog<InvoiceLine>.CloseWindowDialogEvent<InvoiceLine> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {			    		
			    		invoiceLineService.save(event.getDomainEntity());			    		
			    		
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo crear el nueva línea factura!",
								e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nueva Línea Factura!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nueva Línea Factura!", e);
		}
		
	}

	@Override
	public void editButtonClick(ClickNavigationEvent event) {
		InvoiceLine editingInvoiceLine = (InvoiceLine) event.getRegister();
		
		try {
			@SuppressWarnings("unused")
			WindowDialog<InvoiceLine> windowDialog = new WindowDialog<InvoiceLine>(getWindow(), "Editor Linea Factura", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new InvoiceLineViewForm(), editingInvoiceLine, 
					new WindowDialog.CloseWindowDialogListener<InvoiceLine>() {
			    public void windowDialogClose(WindowDialog<InvoiceLine>.CloseWindowDialogEvent<InvoiceLine> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {			    		
			    		invoiceLineService.save(event.getDomainEntity());			    		
			    		
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo modificar la línea de factura!", e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario EditorLínea Factura!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario EditorLínea Factura!", e);
		}
		
	}
	
	@Override
	public void deleteButtonClick(ClickNavigationEvent event) {
		final InvoiceLine editingInvoiceLinee = (InvoiceLine) event.getRegister();
		
		if (editingInvoiceLinee == null)
			return;
		
		ConfirmDialog.show(getWindow(), "Borrar Línea Factura",
		        "¿Estás seguro?", "Si", "No",
		        new ConfirmDialog.Listener() {

		            public void onClose(ConfirmDialog dialog) {
		                if (dialog.isConfirmed()) {
		            		try {
		            			invoiceLineService.delete(editingInvoiceLinee);
		            			
		            			// refresh
		            			refreshBindindSource();
		            			
		            		} catch (IllegalArgumentException e) {
								throw new RuntimeException(
										"¡No se pudo borrar la línea factura!", e);
		            		} catch (Exception e) {
								throw new RuntimeException(
										"¡No se pudo borrar la línea factura!", e);
		            		}
		                } 
		            }
		        });
		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// dgOfferLine
		dgInvoiceLine = new DataGridView() {
		    @Override
		    protected String formatPropertyValue(Object rowId,
		            Object colId, Property property) {
		    	// Format by property type
		        if (property.getType() == Date.class) {
		            SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm");
		            
		            return df.format((Date)property.getValue());
		        }

		        return super.formatPropertyValue(rowId, colId, property);
		    }
		};
		dgInvoiceLine.setImmediate(false);
		dgInvoiceLine.setWidth("100.0%");
		dgInvoiceLine.setHeight("100.0%");
		mainLayout.addComponent(dgInvoiceLine);
		mainLayout.setExpandRatio(dgInvoiceLine, 1.0f);
		
		return mainLayout;
	}


	@Override
	public void filterButtonClick(BoxToolbar.ClickNavigationEvent event) {		
		dgInvoiceLine.setFilterBarVisible();
		
	}


	@Override
	public void printButtonClick(BoxToolbar.ClickNavigationEvent event) {
		try {
			dgInvoiceLine.print("Listado Líneas Factura de " + invoice.getCode() + " Factura");
		}
		catch (Exception e) {
			throw new RuntimeException("¡No se pudo imprimir el informe!", e);
		}
		
	}
	
}

package com.thingtrack.bustrack.view.module.invoice.internal;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.springframework.beans.factory.annotation.Autowired;

import com.thingtrack.konekti.service.api.InvoiceLineService;
import com.thingtrack.konekti.service.api.InvoiceService;
import com.thingtrack.konekti.service.api.ServiceService;
import com.thingtrack.konekti.view.addon.ui.AbstractViewContainer;
import com.thingtrack.konekti.view.addon.ui.SliderView;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.kernel.ui.layout.ISliderView;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewChangeListener;
import com.thingtrack.konekti.view.kernel.ui.layout.IView;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class InvoiceViewContainer extends AbstractViewContainer {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private SliderView sliderView;

	/** Views **/
	private InvoiceView invoiceView;
	private InvoiceLineView invoiceLineView;	
	private ServiceView serviceView;
	
	/** Business services **/	
	@Autowired
	private InvoiceService invoiceService;

	@Autowired
	private InvoiceLineService invoiceLineService;

	@Autowired
	private ServiceService serviceService;
	
	private IWorkbenchContext context; 
	
	// Thread Local Bundle Business Services
	private static ThreadLocal<InvoiceService> threadInvoiceService = new ThreadLocal<InvoiceService>();
	private static ThreadLocal<InvoiceLineService> threadInvoiceLineService = new ThreadLocal<InvoiceLineService>();
	private static ThreadLocal<ServiceService> threadServiceService = new ThreadLocal<ServiceService>();
	private static ThreadLocal<IWorkbenchContext> threadContext = new ThreadLocal<IWorkbenchContext>();
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public InvoiceViewContainer(IWorkbenchContext context) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		this.context = context;
	}
	
	@SuppressWarnings("unused")
	@PostConstruct
	private void createViews() {
		// initialize thread local bundle services
		threadInvoiceService.set(invoiceService);
		threadInvoiceLineService.set(invoiceLineService);
		threadServiceService.set(serviceService);
		threadContext.set(context);
		
		// add all views controlled by SliderView Component
		invoiceView = new InvoiceView(this);
		sliderView.addView(invoiceView);
		views.put(0, invoiceView);
		
		// add all views controlled by SliderView Component
		invoiceLineView = new InvoiceLineView(this, context);
		sliderView.addView(invoiceLineView);
		views.put(1, invoiceLineView);
		
		// add all views controlled by SliderView Component
		serviceView = new ServiceView(this, context);
		sliderView.addView(serviceView);
		views.put(2, serviceView);
	}
		
	@SuppressWarnings("unused")
	@PreDestroy
	private void destroyViews() {
		// destroy thread local bundle services
		threadInvoiceService.set(null);
		threadInvoiceLineService.set(null);
		threadServiceService.set(null);
		threadContext.set(null);
	}
	
    public static InvoiceService getInvoiceService() {
        return threadInvoiceService.get();
        
    }
    
    public static InvoiceLineService getInvoiceLineService() {
        return threadInvoiceLineService.get();
        
    }

    public static ServiceService getServiceService() {
        return threadServiceService.get();
        
    }
    
    public static IWorkbenchContext getContext() {
        return threadContext.get();
        
    }  
    
	@Override
	public ISliderView getSliderView() {
		return sliderView;
		
	}
	
	@Override
	public IView getSelectedView() {
		return sliderView.getSelectedView();
		
	}
	
	@Override
	public void addListener(IViewChangeListener listener) {
		sliderView.addListener(listener);
		
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// sliderView
		sliderView = new SliderView();
		sliderView.setImmediate(false);
		sliderView.setWidth("100.0%");
		sliderView.setHeight("100.0%");
		mainLayout.addComponent(sliderView);
		mainLayout.setExpandRatio(sliderView, 1.0f);
		
		return mainLayout;
	}
}

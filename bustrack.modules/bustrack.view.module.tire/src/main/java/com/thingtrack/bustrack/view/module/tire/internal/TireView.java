package com.thingtrack.bustrack.view.module.tire.internal;

import org.vaadin.dialogs.ConfirmDialog;

import com.thingtrack.bustrack.domain.Tire;
import com.thingtrack.bustrack.service.api.TireService;
import com.thingtrack.bustrack.view.web.form.TireViewForm;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickPrintButtonListener;
import com.thingtrack.konekti.view.addon.ui.DataGridView;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickFilterButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickAddButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickEditButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickRemoveButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickNavigationEvent;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickRefreshButtonListener;
import com.thingtrack.konekti.view.addon.ui.WindowDialog;
import com.thingtrack.konekti.view.addon.ui.WindowDialog.DialogResult;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.CustomTable;
import com.vaadin.ui.CustomTable.ColumnGenerator;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class TireView extends AbstractView 
	implements ClickRefreshButtonListener, ClickAddButtonListener, ClickEditButtonListener, ClickRemoveButtonListener, ClickFilterButtonListener, ClickPrintButtonListener {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private DataGridView dgTire;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private TireService tireService;
	
	private BindingSource<Tire> bsTire =  new BindingSource<Tire>(Tire.class, 1);
	
	private NavigationToolbar navigationToolbar;
	private EditionToolbar editionToolbar;
	private BoxToolbar boxToolbar;
		
	private IViewContainer viewContainer;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public TireView(IViewContainer viewContainer) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		// set Slide View Services and ViewContainer to navigate
		this.viewContainer = viewContainer;
		this.tireService = TireViewContainer.getTireService();
		
		// initialize datasource views		
		initView();	
		
	}

	private void initView() {
		// initialize Slide View Organization View
		dgTire.setImmediate(true);		
		
		refreshBindindSource();
		
		// STEP 01: create grid view for slide Organization View
		try {
			dgTire.setBindingSource(bsTire);
			dgTire.addGeneratedColumn(VehicleNumberColumn.VEHICLE_COLUMN_ID, new VehicleNumberColumn());
			dgTire.addGeneratedColumn(SupplierNameColumn.SUPPLIER_COLUMN_ID, new SupplierNameColumn());
			dgTire.setVisibleColumns(new String[] { VehicleNumberColumn.VEHICLE_COLUMN_ID, "tireType.description", "serialNumber", "vehicleLocation", "km", "puncture", "tireStatus.description", SupplierNameColumn.SUPPLIER_COLUMN_ID } );       
			dgTire.setColumnHeaders(new String[] { "Número vehículo", "Tipo", "Número Serie", "Ubicación", "Km", "Pinchazos", "Estado", "Proveedor" } );
			
			dgTire.setColumnCollapsed("comment", true);
		}
		catch(Exception ex) {
			ex.getMessage();
		}
			
		// STEP 02: create toolbar for slide Organization View
		navigationToolbar = new NavigationToolbar(0, bsTire, viewContainer);
		editionToolbar = new EditionToolbar(1, bsTire);
		boxToolbar = new BoxToolbar(2, bsTire);
		
		navigationToolbar.addListenerRefreshButton(this);
		navigationToolbar.setUpButton(false);
		navigationToolbar.setDownButton(false);
		
		editionToolbar.addListenerAddButton(this);
		editionToolbar.addListenerEditButton(this);
		editionToolbar.addListenerDeleteButton(this);
		
		boxToolbar.addListenerFilterButton(this);
		boxToolbar.addListenerPrintButton(this);
		
		dgTire.addListenerAddButton(this);
		dgTire.addListenerEditButton(this);
		dgTire.addListenerDeleteButton(this);
		
		removeAllToolbar();
		
		addToolbar(navigationToolbar);
		addToolbar(editionToolbar);
		addToolbar(boxToolbar);

	}
	
	private void refreshBindindSource() {
		try {		
			bsTire.removeAllItems();
			bsTire.addAll(tireService.getAll());
	
			bsTire.addNestedContainerProperty("tireType.description");
			bsTire.addNestedContainerProperty("tireStatus.description");
			//bsTire.addNestedContainerProperty("supplier.name");
			
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}		
	
	private void refreshDataGridView(Tire tireSaved) {
		if(bsTire.containsId(tireSaved)){			
			Tire previousTire = bsTire.prevItemId(tireSaved);
			
			bsTire.removeItem(tireSaved);
			bsTire.addItemAfter(previousTire, tireSaved);
			bsTire.setItemId(tireSaved);
		}
		else
			bsTire.addItem(tireSaved);
		
	}
	
	@Override
	public void refreshButtonClick(ClickNavigationEvent event) {
		refreshBindindSource();
		
	}
	
	@Override
	public void addButtonClick(EditionToolbar.ClickNavigationEvent event) {
		Tire tire = new Tire();

		try {
			@SuppressWarnings("unused")
			WindowDialog<Tire> windowDialog = new WindowDialog<Tire>(getWindow(), "Nueva Neumático", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new TireViewForm(), tire, 
					new WindowDialog.CloseWindowDialogListener<Tire>() {
			    public void windowDialogClose(WindowDialog<Tire>.CloseWindowDialogEvent<Tire> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {
			    		Tire savingTire = event.getDomainEntity();
			    		
			    		Tire savedTire = tireService.save(savingTire);
			    		
			    		refreshDataGridView(savedTire);			    		
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo crear el nuevo neumático!",
								e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nuevo Neumático!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nuevo Neumático!", e);
		} 
		
	}
	
	@Override
	public void editButtonClick(EditionToolbar.ClickNavigationEvent event) {
		Tire editingTirer = (Tire) event.getRegister();
				
		try {
			@SuppressWarnings("unused")
			WindowDialog<Tire> windowDialog = new WindowDialog<Tire>(getApplication().getMainWindow() , "Editor Neumático", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new TireViewForm(),editingTirer, 
					new WindowDialog.CloseWindowDialogListener<Tire>() {
			    public void windowDialogClose(WindowDialog<Tire>.CloseWindowDialogEvent<Tire> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {
			    		
			    		Tire savingTire = event.getDomainEntity();
			    		
			    		Tire savedTire = tireService.save(savingTire);
			    		
			    		refreshDataGridView(savedTire);			    		
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo modificar el neumático!", e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Neumáticos!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Neumáticos!", e);
		} 
		
	}
	
	@Override
	public void deleteButtonClick(EditionToolbar.ClickNavigationEvent event) {
		final Tire editingTire = (Tire) event.getRegister();
				
		ConfirmDialog.show(getWindow(), "Borrar Neumático",
		        "¿Estás seguro?", "Si", "No",
		        new ConfirmDialog.Listener() {

		            public void onClose(ConfirmDialog dialog) {
		                if (dialog.isConfirmed()) {
		            		try {
		            			tireService.delete(editingTire);
		            			
		            			bsTire.removeItem(editingTire);		            			
		            		} catch (IllegalArgumentException e) {
								throw new RuntimeException(
										"¡No se pudo borrar el neumático!", e);
		            		} catch (Exception e) {
								throw new RuntimeException(
										"¡No se pudo borrar el neumático!", e);
		            		}
		                } 
		            }
		        });
		
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// dataGridView_1
		dgTire = new DataGridView();
		dgTire.setImmediate(false);
		dgTire.setWidth("100.0%");
		dgTire.setHeight("100.0%");
		mainLayout.addComponent(dgTire);
		mainLayout.setExpandRatio(dgTire, 1.0f);
		
		return mainLayout;
	}
	
	private class VehicleNumberColumn implements ColumnGenerator {

		static final String VEHICLE_COLUMN_ID = "vehicle-column-id";
		
		@Override
		public Object generateCell(CustomTable source, Object itemId, Object columnId) {
			
			Label vehicleNumberLabel = new Label();
			
			Tire tire = (Tire) itemId;
			
			if(tire.getVehicle() != null)
				vehicleNumberLabel.setValue(tire.getVehicle().getVehicleNumber());
			
			return vehicleNumberLabel;
		}
				
	} 

	private class SupplierNameColumn implements ColumnGenerator {

		static final String SUPPLIER_COLUMN_ID = "supplier-column-id";
		
		@Override
		public Object generateCell(CustomTable source, Object itemId, Object columnId) {
			
			Label supplierNameLabel = new Label();
			
			Tire tire = (Tire) itemId;
			
			if(tire.getSupplier() != null)
				supplierNameLabel.setValue(tire.getSupplier().getName());
			
			return supplierNameLabel;
		}
				
	}

	@Override
	public void filterButtonClick(BoxToolbar.ClickNavigationEvent event) {
		dgTire.setFilterBarVisible();
				
	}

	@Override
	public void printButtonClick(BoxToolbar.ClickNavigationEvent event) {
		try {
			dgTire.print("Listado Neumáticos");
		}
		catch (Exception e) {
			throw new RuntimeException("¡No se pudo imprimir el informe!", e);
		}
		
	} 
}
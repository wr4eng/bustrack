package com.thingtrack.bustrack.view.module.organization.internal;

import org.vaadin.dialogs.ConfirmDialog;

import com.thingtrack.konekti.domain.Location;
import com.thingtrack.konekti.domain.Organization;

import com.thingtrack.konekti.service.api.LocationService;
import com.thingtrack.konekti.service.api.OrganizationService;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickFilterButtonListener;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickPrintButtonListener;
import com.thingtrack.konekti.view.addon.ui.DataGridView;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar;
import com.thingtrack.konekti.view.addon.ui.WindowDialog;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickAddButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickEditButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickRemoveButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickDownButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickNavigationEvent;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickRefreshButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickUpButtonListener;
import com.thingtrack.konekti.view.addon.ui.WindowDialog.DialogResult;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;
import com.thingtrack.konekti.view.web.form.LocationViewForm;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.MethodProperty;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.Field;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class LocationView extends AbstractView 
	implements ClickDownButtonListener, ClickUpButtonListener, ClickRefreshButtonListener, ClickAddButtonListener, ClickEditButtonListener, ClickRemoveButtonListener, ClickFilterButtonListener, ClickPrintButtonListener {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private DataGridView dgLocation;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	private Organization organization;
	private OrganizationService organizationService;
	private LocationService locationService;
	
	private BindingSource<Location> bsLocation =  new BindingSource<Location>(Location.class, 1);
	
	private NavigationToolbar navigationToolbar;
	private EditionToolbar editionToolbar;
	private BoxToolbar boxToolbar;
	
	private IViewContainer viewContainer;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public LocationView(IViewContainer viewContainer) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here		
		// set Slide View Services and ViewContainer to navigate
		this.viewContainer = viewContainer;
		this.locationService = OrganizationViewContainer.getLocationService();
		this.organizationService = OrganizationViewContainer.getOrganizationService();
		
		dgLocation.setImmediate(true);
	}
	
	public void setOrganization(Organization organization) {
		this.organization = organization;
				
		// refresh datasource
		refreshBindindSource();
		injectBindingSource();
		
	}
	
	private void refreshBindindSource() {
		try {		
			bsLocation.removeAllItems();				
			bsLocation.addAll(organization.getLocations());
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}
	
	private void injectBindingSource() {
		try {
			//STEP 01: create grid view for slide Organization View
			dgLocation.setBindingSource(bsLocation);
			dgLocation.setVisibleColumns(new String[] { "code", "name", "description", "comment", "active"} );       
			dgLocation.setColumnHeaders(new String[] { "Código", "Nombre", "Descriptión", "Comentarios", "Activa" } );
			dgLocation.setEditable(true);
			dgLocation.setTableFieldFactory(new TableFieldFactory() {					
				@Override
				public Field createField(Container container, Object itemId, Object propertyId, Component uiContext) {
					if("active".equals(propertyId)) {						
						CheckBox field = new CheckBox();
						field.setReadOnly(true);						
						return field;
					}
					
					return null;
				}
			});
			
			// STEP 02: create toolbar for slide
			navigationToolbar = new NavigationToolbar(0, bsLocation, viewContainer);
			editionToolbar = new EditionToolbar(1, bsLocation);
			boxToolbar = new BoxToolbar(2, bsLocation);
			
			navigationToolbar.addListenerDownButton(this);
			navigationToolbar.addListenerUpButton(this);
			
			editionToolbar.addListenerAddButton(this);
			editionToolbar.addListenerEditButton(this);
			editionToolbar.addListenerDeleteButton(this);
			
			boxToolbar.addListenerFilterButton(this);
			boxToolbar.addListenerPrintButton(this);
			
			dgLocation.addListenerAddButton(this);
			dgLocation.addListenerEditButton(this);
			dgLocation.addListenerDeleteButton(this);
			
			removeAllToolbar();
			
			addToolbar(navigationToolbar);
			addToolbar(editionToolbar);
			addToolbar(boxToolbar);
			
		} catch (Exception ex) {
			ex.getMessage();
			
		}
		
	}
	
	@Override
	public void downButtonClick(ClickNavigationEvent event) {
		Location locationSelected = null;
		
		if (bsLocation.getItemIds().size() > 0) {
			// get selected Location
			locationSelected = (Location)bsLocation.getItemId();
		
			// inject the locations data from organization in the detail Location View
			WorkshopView workshopView = (WorkshopView)viewContainer.getNext();
			
			workshopView.setLocation(locationSelected);
						
			// roll to the detail Workshop Detail View
			viewContainer.getSliderView().rollNext();
		}
			
	}
	
	@Override
	public void upButtonClick(ClickNavigationEvent event) {
		// roll to the detail Organization Parent View
		viewContainer.getSliderView().rollPrevious();
				
	}

	@Override
	public void refreshButtonClick(ClickNavigationEvent event) {
		refreshBindindSource();
		
	}

	private void refreshDataGridView(Location savedLocation) {
		if(bsLocation.containsId(savedLocation)){			
			Location previousLocation = bsLocation.prevItemId(savedLocation);
			
			bsLocation.removeItem(savedLocation);
			bsLocation.addItemAfter(previousLocation, savedLocation);
			bsLocation.setItemId(savedLocation);
		}
		else
			bsLocation.addItem(savedLocation);
		
	}
	
	@Override
	public void addButtonClick(EditionToolbar.ClickNavigationEvent event) {
		final Location location;
		try {
			location = locationService.createEntity(organization);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo crear el nuevo código de ubicación!",
					e);
		}
				
		try {
			@SuppressWarnings("unused")
			WindowDialog<Location> windowDialog = new WindowDialog<Location>(getWindow(), "Nueva Ubicación", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new LocationViewForm(), location, 
					new WindowDialog.CloseWindowDialogListener<Location>() {
			    public void windowDialogClose(WindowDialog<Location>.CloseWindowDialogEvent<Location> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {		    			    		
			    		Organization savedOrganization = organizationService.save(organization);			    		
			    		organization = savedOrganization;
			    		
			    		// refresh
			    		bsLocation.removeAllItems();				
						bsLocation.addAll(savedOrganization.getLocations());	    		
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo crear la nueva ubicación!",
								e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nueva Ubicación!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nueva Ubicación!", e);
		}
		
	}
	
	@SuppressWarnings("rawtypes")
	@Override
	public void editButtonClick(EditionToolbar.ClickNavigationEvent event) {
		Location editingLocation = (Location) event.getRegister();
		
		BeanItem<Location> locationBeanItem = new BeanItem<Location>(editingLocation);
		locationBeanItem.addItemProperty("warehouseCollection", new MethodProperty(editingLocation, "warehouses"));		
		locationBeanItem.addItemProperty("workshopCollection", new MethodProperty(editingLocation, "workshops"));
		
		try {
			@SuppressWarnings("unused")
			WindowDialog<Location> windowDialog = new WindowDialog<Location>(getApplication().getMainWindow() , "Editor Ubicación", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new LocationViewForm(),locationBeanItem, 
					new WindowDialog.CloseWindowDialogListener<Location>() {
			    public void windowDialogClose(WindowDialog<Location>.CloseWindowDialogEvent<Location> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {
			    		Location savedLocation = locationService.save(event.getDomainEntity());
			    		
			    		// refresh
						refreshDataGridView(savedLocation);
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo modificar la ubicación!", e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Ubicación!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Ubicación!", e);
		} 
		
	}
	
	@Override
	public void deleteButtonClick(EditionToolbar.ClickNavigationEvent event) {
		final Location editingLocation = (Location) event.getRegister();
		
		if (editingLocation == null)
			return;
		
		ConfirmDialog.show(getWindow(), "Borrar Ubicación",
		        "¿Estás seguro?", "Si", "No",
		        new ConfirmDialog.Listener() {

		            public void onClose(ConfirmDialog dialog) {
		                if (dialog.isConfirmed()) {
		            		try {
		            			// delete from data
		            			locationService.delete(editingLocation);
		            			
		            			// syncronize removing from memory
					    		organization.removeLocation(editingLocation);
					    		
					    		// refresh
					    		bsLocation.removeAllItems();				
								bsLocation.addAll(organization.getLocations());
		            		} catch (IllegalArgumentException e) {
								throw new RuntimeException(
										"¡No se pudo borrar la ubicación!", e);
		            		} catch (Exception e) {
								throw new RuntimeException(
										"¡No se pudo borrar la ubicación!", e);
		            		}
		                } 
		            }
		        });
		
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// dgLocation
		dgLocation = new DataGridView();
		dgLocation.setImmediate(false);
		dgLocation.setWidth("100.0%");
		dgLocation.setHeight("100.0%");
		mainLayout.addComponent(dgLocation);
		mainLayout.setExpandRatio(dgLocation, 1.0f);
		
		return mainLayout;
	}

	@Override
	public void filterButtonClick(BoxToolbar.ClickNavigationEvent event) {
		dgLocation.setFilterBarVisible();
		
	}

	@Override
	public void printButtonClick(BoxToolbar.ClickNavigationEvent event) {
		try {
			dgLocation.print("Listado Ubicaciones de la Organización " + organization.getName());
		}
		catch (Exception e) {
			throw new RuntimeException("¡No se pudo imprimir el informe!", e);
		}
		
	}

}

package com.thingtrack.bustrack.view.module.organization.internal;

import java.util.List;

import org.vaadin.dialogs.ConfirmDialog;

import com.thingtrack.konekti.domain.Location;
import com.thingtrack.konekti.domain.Warehouse;
import com.thingtrack.konekti.domain.Workshop;
import com.thingtrack.konekti.service.api.WarehouseService;
import com.thingtrack.konekti.service.api.WorkshopService;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickFilterButtonListener;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickPrintButtonListener;
import com.thingtrack.konekti.view.addon.ui.DataGridView;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar;
import com.thingtrack.konekti.view.addon.ui.WindowDialog;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickAddButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickEditButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickRemoveButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickDownButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickNavigationEvent;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickRefreshButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickUpButtonListener;
import com.thingtrack.konekti.view.addon.ui.WindowDialog.DialogResult;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;
import com.thingtrack.konekti.view.web.form.WarehouseViewForm;
import com.thingtrack.konekti.view.web.form.WorkshopViewForm;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TabSheet.SelectedTabChangeListener;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.TabSheet.SelectedTabChangeEvent;

@SuppressWarnings("serial")
public class WorkshopView extends AbstractView 
	implements ClickDownButtonListener, ClickUpButtonListener, ClickRefreshButtonListener, ClickAddButtonListener, ClickEditButtonListener, ClickRemoveButtonListener, ClickFilterButtonListener, ClickPrintButtonListener {

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private TabSheet tabSheetWorkshop;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private DataGridView dgWarehouse;
	private DataGridView dgWorkshop;
	
	private Location location;
	private WarehouseService warehouseService;
	private WorkshopService workshopService;
	
	private BindingSource<Warehouse> bsWarehouse = new BindingSource<Warehouse>(Warehouse.class, 2);
	private BindingSource<Workshop> bsWorkshop = new BindingSource<Workshop>(Workshop.class, 2);
		
	private List<Warehouse> warehouses;
	private List<Workshop> workshops;
	
	private NavigationToolbar navigationToolbar;
	private EditionToolbar editionToolbar;
	private BoxToolbar boxToolbar;
		
	private IViewContainer viewContainer;
	private IWorkbenchContext context;
	
	private final static String WAREHOUSE_TAB_NAME = "Almacenes";
	private final static String WORKSHOP_TAB_NAME = "Talleres";
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public WorkshopView(IViewContainer viewContainer, IWorkbenchContext context) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		this.viewContainer = viewContainer;
		this.context = context;
		
		this.warehouseService = OrganizationViewContainer.getWarehouseService();
		this.workshopService = OrganizationViewContainer.getWorkshopService();
		
		dgWarehouse = new DataGridView();
		dgWarehouse.setSizeFull();
		dgWarehouse.setImmediate(true);
		tabSheetWorkshop.addTab(dgWarehouse, WAREHOUSE_TAB_NAME);
		
		dgWorkshop = new DataGridView();
		dgWorkshop.setSizeFull();
		dgWorkshop.setImmediate(true);
		tabSheetWorkshop.addTab(dgWorkshop, WORKSHOP_TAB_NAME);
			
		tabSheetWorkshop.setSelectedTab(dgWarehouse);
		
		tabSheetWorkshop.addListener(new SelectedTabChangeListener() {
			@Override
			public void selectedTabChange(SelectedTabChangeEvent event) {
				RefreshDataSource(event.getTabSheet().getTab(tabSheetWorkshop.getSelectedTab()).getCaption());
								
			}
		});
	
	}

	public void setLocation(Location location) {
		this.location = location;
		
		this.warehouses = location.getWarehouses();
		this.workshops = location.getWorkshops();
		
		RefreshDataSource(tabSheetWorkshop.getTab(tabSheetWorkshop.getSelectedTab()).getCaption());
	}
	
	private void RefreshDataSource(String tabName) {
		if (tabName.equals(WAREHOUSE_TAB_NAME)) {
			refreshWarehouseBindindSource();
			injectWarehouseBindingSource();
		}
		else {
			refreshWorkshopBindindSource();
			injectWorkshopBindingSource();
		}	
	}
			
	private void refreshWarehouseBindindSource() {
		try {			
			bsWarehouse.removeAllItems();
			bsWarehouse.addAll(warehouses);					
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}
	
	private void injectWarehouseBindingSource() {
		try {					
			dgWarehouse.setBindingSource(bsWarehouse);
			dgWarehouse.setVisibleColumns(new String[] { "code", "name", "description", "comment", "active"} );       
			dgWarehouse.setColumnHeaders(new String[] { "Código", "Nombre", "Descriptión", "Comentarios", "Activa" } );
			
			// create toolbar for slide
			navigationToolbar = new NavigationToolbar(0, bsWarehouse, viewContainer);
			editionToolbar = new EditionToolbar(1, bsWarehouse);
			boxToolbar = new BoxToolbar(2, bsWarehouse);
			
			navigationToolbar.addListenerDownButton(this);	
			navigationToolbar.addListenerUpButton(this);		
			
			editionToolbar.addListenerAddButton(this);
			editionToolbar.addListenerEditButton(this);
			editionToolbar.addListenerDeleteButton(this);
			
			boxToolbar.addListenerFilterButton(this);
			boxToolbar.addListenerPrintButton(this);
			
			dgWarehouse.addListenerAddButton(this);
			dgWarehouse.addListenerEditButton(this);
			dgWarehouse.addListenerDeleteButton(this);
			
			removeAllToolbar();
			
			addToolbar(navigationToolbar);
			addToolbar(editionToolbar);
			addToolbar(boxToolbar);
			
			context.getToolbarManager().addToolbars(toolbars);
			
		} catch (Exception ex) {
			ex.getMessage();
			
		}
		
	}
	
	private void refreshWorkshopBindindSource() {
		try {			
			bsWorkshop.removeAllItems();
			bsWorkshop.addAll(workshops);						
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}

	private void injectWorkshopBindingSource() {
		try {				
			dgWorkshop.setBindingSource(bsWorkshop);
			dgWorkshop.setVisibleColumns(new String[] { "code", "name", "description", "comment", "active"} );       
			dgWorkshop.setColumnHeaders(new String[] { "Código", "Nombre", "Descriptión", "Comentarios", "Activa" } );
			
			// create toolbar for slide
			navigationToolbar = new NavigationToolbar(0, bsWorkshop, viewContainer);
			editionToolbar = new EditionToolbar(1, bsWorkshop);
			boxToolbar = new BoxToolbar(2, bsWorkshop);
			
			navigationToolbar.addListenerDownButton(this);
			navigationToolbar.addListenerUpButton(this);		

			editionToolbar.addListenerAddButton(this);
			editionToolbar.addListenerEditButton(this);
			editionToolbar.addListenerDeleteButton(this);
			
			boxToolbar.addListenerFilterButton(this);
			boxToolbar.addListenerPrintButton(this);
			
			dgWorkshop.addListenerAddButton(this);
			dgWorkshop.addListenerEditButton(this);
			dgWorkshop.addListenerDeleteButton(this);
			
			removeAllToolbar();
			
			addToolbar(navigationToolbar);
			addToolbar(editionToolbar);
			addToolbar(boxToolbar);
			
			context.getToolbarManager().addToolbars(toolbars);
			
		} catch (Exception ex) {
			ex.getMessage();
			
		}
		
	}

	private void AddEntity(String tabName) {
		if (tabName.equals(WAREHOUSE_TAB_NAME))
			AddWarehouseEntity();		
		else
			AddWorkshopEntity();		
	}
	
	private void EditEntity(String tabName, Object entity) {
		if (tabName.equals(WAREHOUSE_TAB_NAME))
			EditWarehouseEntity(entity);		
		else
			EditWorkshopEntity(entity);
	}
	
	private void RemoveEntity(String tabName, Object entity) {
		if (tabName.equals(WAREHOUSE_TAB_NAME))
			RemoveWarehouseEntity(entity);		
		else
			RemoveWorkshopEntity(entity);
	}
	
	private void refreshDataGridView(String tabName, Object entity) {
		if (tabName.equals(WAREHOUSE_TAB_NAME))
			refreshDataGridViewWarehouse((Warehouse) entity);		
		else
			refreshDataGridViewWorkshop((Workshop) entity);
	}
	
	private void refreshDataGridViewWarehouse(Warehouse savedWarehouse) {
		if(bsWarehouse.containsId(savedWarehouse)){			
			Warehouse previousWarehouse = bsWarehouse.prevItemId(savedWarehouse);
			
			bsWarehouse.removeItem(savedWarehouse);
			bsWarehouse.addItemAfter(previousWarehouse, savedWarehouse);
			bsWarehouse.setItemId(savedWarehouse);
		}
		else
			bsWarehouse.addItem(savedWarehouse);
		
	}
	
	private void refreshDataGridViewWorkshop(Workshop savedWorkshop) {
		if(bsWorkshop.containsId(savedWorkshop)){			
			Workshop previousWorkshop = bsWorkshop.prevItemId(savedWorkshop);
			
			bsWorkshop.removeItem(savedWorkshop);
			bsWorkshop.addItemAfter(previousWorkshop, savedWorkshop);
			bsWorkshop.setItemId(savedWorkshop);
		}
		else
			bsWorkshop.addItem(savedWorkshop);
		
	}
	
	private void AddWarehouseEntity() {
		final Warehouse warehouse;
		try {
			warehouse = warehouseService.createEntity(location);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo crear el nuevo código de almacén!",
					e);
		}
				
		try {
			@SuppressWarnings("unused")
			WindowDialog<Warehouse> windowDialog = new WindowDialog<Warehouse>(getWindow(), "Nueva Almacén", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new WarehouseViewForm(), warehouse, 
					new WindowDialog.CloseWindowDialogListener<Warehouse>() {
			    public void windowDialogClose(WindowDialog<Warehouse>.CloseWindowDialogEvent<Warehouse> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {			    		
			    		Warehouse savedWarehouse = warehouseService.save(event.getDomainEntity());		
						location.addWarehouse(warehouse);
			    		
						refreshDataGridView(WAREHOUSE_TAB_NAME, savedWarehouse);
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo crear el nuevo almacén!",
								e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nuevo Almacén!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nuevo Almacén!", e);
		}
		
	}
	
	private void AddWorkshopEntity() {
		final Workshop workshop;
		try {
			workshop = workshopService.createEntity(location);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo crear el nuevo código de taller!",
					e);
		}
						
		try {
			@SuppressWarnings("unused")
			WindowDialog<Workshop> windowDialog = new WindowDialog<Workshop>(getWindow(), "Nueva Taller", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new WorkshopViewForm(), workshop, 
					new WindowDialog.CloseWindowDialogListener<Workshop>() {
			    public void windowDialogClose(WindowDialog<Workshop>.CloseWindowDialogEvent<Workshop> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {			    		
			    		Workshop savedWorkshop = workshopService.save(event.getDomainEntity());	
						//location.addWorkshop(workshop);
			    		
						refreshDataGridView(WORKSHOP_TAB_NAME, savedWorkshop);
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo crear el nuevo taller!",
								e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nuevo Taller!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nuevo Taller!", e);
		}
		
	}
	
	private void EditWarehouseEntity(Object entity) {
		Warehouse editingWarehouse = (Warehouse) entity;
				
		try {
			@SuppressWarnings("unused")
			WindowDialog<Warehouse> windowDialog = new WindowDialog<Warehouse>(getWindow(), "Editor Almacén", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new WarehouseViewForm(), editingWarehouse, 
					new WindowDialog.CloseWindowDialogListener<Warehouse>() {
			    public void windowDialogClose(WindowDialog<Warehouse>.CloseWindowDialogEvent<Warehouse> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {			    		
			    		Warehouse savedWarehouse = warehouseService.save(event.getDomainEntity());			    		
						refreshDataGridView(WAREHOUSE_TAB_NAME, savedWarehouse);
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo modificar la almacén!", e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Almacén!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Almacén!", e);
		}
	}
	
	private void EditWorkshopEntity(Object entity) {
		Workshop editingWorkshop= (Workshop) entity;
		
		try {
			@SuppressWarnings("unused")
			WindowDialog<Workshop> windowDialog = new WindowDialog<Workshop>(getWindow(), "Editor Taller", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new WorkshopViewForm(), editingWorkshop, 
					new WindowDialog.CloseWindowDialogListener<Workshop>() {
			    public void windowDialogClose(WindowDialog<Workshop>.CloseWindowDialogEvent<Workshop> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {			    		
			    		Workshop savedWorkshop = workshopService.save(event.getDomainEntity());			    		
						refreshDataGridView(WORKSHOP_TAB_NAME, savedWorkshop);
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo modificar la taller!", e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Taller!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Taller!", e);
		}
	}
	
	private void RemoveWarehouseEntity(Object entity) {
		final Warehouse editingWarehouse = (Warehouse) entity;
		
		if (editingWarehouse == null)
			return;
		
		ConfirmDialog.show(getWindow(), "Borrar Almacén",
		        "¿Estás seguro?", "Si", "No",
		        new ConfirmDialog.Listener() {

		            public void onClose(ConfirmDialog dialog) {
		                if (dialog.isConfirmed()) {
		            		try {
		            			warehouseService.delete(editingWarehouse);
		            			
		            			RefreshDataSource(WAREHOUSE_TAB_NAME);
		            			
		            		} catch (IllegalArgumentException e) {
								throw new RuntimeException(
										"¡No se pudo borrar el almacén!", e);
		            		} catch (Exception e) {
								throw new RuntimeException(
										"¡No se pudo borrar el almacén!", e);
		            		}
		                } 
		            }
		        });
	}
	
	private void RemoveWorkshopEntity(Object entity) {
		final Workshop editingWorkshop = (Workshop) entity;
		
		if (editingWorkshop == null)
			return;
		
		ConfirmDialog.show(getWindow(), "Borrar Taller",
		        "¿Estás seguro?", "Si", "No",
		        new ConfirmDialog.Listener() {

		            public void onClose(ConfirmDialog dialog) {
		                if (dialog.isConfirmed()) {
		            		try {
		            			workshopService.delete(editingWorkshop);
		            			
		            			RefreshDataSource(WORKSHOP_TAB_NAME);
		            			
		            		} catch (IllegalArgumentException e) {
								throw new RuntimeException(
										"¡No se pudo borrar el taller!", e);
		            		} catch (Exception e) {
								throw new RuntimeException(
										"¡No se pudo borrar el taller!", e);
		            		}
		                } 
		            }
		        });	
	}
	
	@Override
	public void downButtonClick(ClickNavigationEvent event) {
		Workshop workshopSelected = null;
		
		if (!tabSheetWorkshop.getTab(tabSheetWorkshop.getSelectedTab()).getCaption().equals(WORKSHOP_TAB_NAME))
			return;
		
		if (bsWorkshop.getItemIds().size() > 0) {
			// get selected Location
			workshopSelected = (Workshop)bsWorkshop.getItemId();
		
			// inject the locations data from organization in the detail Location View
			GasStationView gasStationView = (GasStationView)viewContainer.getNext();		
			gasStationView.setGasStations(workshopSelected);
			
			// roll to the detail Workshop Detail View
			viewContainer.getSliderView().rollNext();
		}
		
	}
	
	@Override
	public void upButtonClick(ClickNavigationEvent event) {
		// roll to the parent Location Parent View
		viewContainer.getSliderView().rollPrevious();
		
	}

	@Override
	public void refreshButtonClick(ClickNavigationEvent event) {
		RefreshDataSource(tabSheetWorkshop.getTab(tabSheetWorkshop.getSelectedTab()).getCaption());
		
	}
	
	@Override
	public void addButtonClick(EditionToolbar.ClickNavigationEvent event) {
		AddEntity(tabSheetWorkshop.getTab(tabSheetWorkshop.getSelectedTab()).getCaption());
		
	}
	
	@Override
	public void editButtonClick(EditionToolbar.ClickNavigationEvent event) {
		EditEntity(tabSheetWorkshop.getTab(tabSheetWorkshop.getSelectedTab()).getCaption(), event.getRegister());
		
	}

	@Override
	public void deleteButtonClick(EditionToolbar.ClickNavigationEvent event) {
		RemoveEntity(tabSheetWorkshop.getTab(tabSheetWorkshop.getSelectedTab()).getCaption(), event.getRegister());
		
	}
		
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// tabSheet_1
		tabSheetWorkshop = new TabSheet();
		tabSheetWorkshop.setImmediate(false);
		tabSheetWorkshop.setWidth("100.0%");
		tabSheetWorkshop.setHeight("100.0%");
		mainLayout.addComponent(tabSheetWorkshop);
		mainLayout.setExpandRatio(tabSheetWorkshop, 1.0f);
		
		return mainLayout;
	}

	@Override
	public void filterButtonClick(BoxToolbar.ClickNavigationEvent event) {
		if (tabSheetWorkshop.getTab(tabSheetWorkshop.getSelectedTab()).getCaption().equals(WAREHOUSE_TAB_NAME))
			dgWarehouse.setFilterBarVisible();
		else
			dgWorkshop.setFilterBarVisible();
		
	}

	@Override
	public void printButtonClick(BoxToolbar.ClickNavigationEvent event) {
		if (tabSheetWorkshop.getTab(tabSheetWorkshop.getSelectedTab()).getCaption().equals(WAREHOUSE_TAB_NAME)) {
			try {
				dgWarehouse.print("Listado Almacenes de la Ubicación " + location.getName());
			}
			catch (Exception e) {
				throw new RuntimeException("¡No se pudo imprimir el informe!", e);
			}
		}
		else {
			try {
				dgWorkshop.print("Listado Talleres de la Ubicación " + location.getName());
			}
			catch (Exception e) {
				throw new RuntimeException("¡No se pudo imprimir el informe!", e);
			}
		}
		
	}

}

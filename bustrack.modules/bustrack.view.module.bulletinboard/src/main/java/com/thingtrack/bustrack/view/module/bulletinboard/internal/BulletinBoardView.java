package com.thingtrack.bustrack.view.module.bulletinboard.internal;

import java.text.SimpleDateFormat;
import java.util.Date;

import com.thingtrack.bustrack.domain.BulletinBoard;
import com.thingtrack.bustrack.service.api.BulletinBoardService;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickPrintButtonListener;
import com.thingtrack.konekti.view.addon.ui.DataGridView;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickFilterButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickNavigationEvent;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickRefreshButtonListener;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class BulletinBoardView extends AbstractView implements
		ClickRefreshButtonListener, ClickFilterButtonListener,
		ClickPrintButtonListener {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private DataGridView dgBulletinBoard;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private BulletinBoardService bulletinBoardService;

	private BindingSource<BulletinBoard> bsBulletinBoard = new BindingSource<BulletinBoard>(BulletinBoard.class, 0);

	private NavigationToolbar navigationToolbar;
	private BoxToolbar boxToolbar;

	private IViewContainer viewContainer;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public BulletinBoardView(IViewContainer viewContainer) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		// set Slide View Services and ViewContainer to navigate
		this.viewContainer = viewContainer;
		this.bulletinBoardService = BulletinBoardViewContainer
				.getBulletinBoardService();

		// initialize datasource views
		initView();

	}

	private void initView() {
		// initialize Slide View Organization View
		dgBulletinBoard.setImmediate(true);

		refreshBindindSource();

		// STEP 01: create grid view for slide Organization View
		try {
			dgBulletinBoard.setBindingSource(bsBulletinBoard);
			dgBulletinBoard.setVisibleColumns(new String[] { "name", "phone",
					"mobile", "email", "message", "bulletinType.description",
					"bulletinDate" });
			dgBulletinBoard.setColumnHeaders(new String[] { "Nombre",
					"Teléfono", "Movil", "Email", "Mensaje", "Tipo",
					"Fecha Registro" });
		} catch (Exception ex) {
			ex.getMessage();
		}

		// STEP 02: create toolbar for slide Organization View
		navigationToolbar = new NavigationToolbar(0, bsBulletinBoard,
				viewContainer);
		boxToolbar = new BoxToolbar(1, bsBulletinBoard);

		navigationToolbar.addListenerRefreshButton(this);
		
		boxToolbar.addListenerFilterButton(this);
		boxToolbar.addListenerPrintButton(this);
		
		// set navigation toolbar visibility
		navigationToolbar.setUpButton(false);
		navigationToolbar.setDownButton(false);

		removeAllToolbar();

		addToolbar(navigationToolbar);
		addToolbar(boxToolbar);

	}

	private void refreshBindindSource() {
		try {
			bsBulletinBoard.removeAllItems();
			bsBulletinBoard.addAll(bulletinBoardService.getAll());

			bsBulletinBoard
					.addNestedContainerProperty("bulletinType.description");

		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void refreshButtonClick(ClickNavigationEvent event) {
		refreshBindindSource();

	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// dataGridView_1
		dgBulletinBoard = new DataGridView() {
			@Override
			protected String formatPropertyValue(Object rowId, Object colId,
					Property property) {
				// Format by property type
				if (property.getType() == Date.class) {
					SimpleDateFormat df = new SimpleDateFormat(
							"dd/MM/yyyy HH:mm");

					return df.format((Date) property.getValue());
				}

				return super.formatPropertyValue(rowId, colId, property);
			}
		};

		dgBulletinBoard.setImmediate(false);
		dgBulletinBoard.setWidth("100.0%");
		dgBulletinBoard.setHeight("100.0%");
		mainLayout.addComponent(dgBulletinBoard);
		mainLayout.setExpandRatio(dgBulletinBoard, 1.0f);

		return mainLayout;
	}

	@Override
	public void filterButtonClick(BoxToolbar.ClickNavigationEvent event) {
		dgBulletinBoard.setFilterBarVisible();

	}

	@Override
	public void printButtonClick(BoxToolbar.ClickNavigationEvent event) {
		try {
			dgBulletinBoard.print("Tablon de Anuncios");
		}
		catch (Exception e) {
			throw new RuntimeException("¡No se pudo imprimir el informe!", e);
		}
		
	}

}

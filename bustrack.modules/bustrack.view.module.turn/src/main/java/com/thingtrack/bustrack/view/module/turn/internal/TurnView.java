package com.thingtrack.bustrack.view.module.turn.internal;

import org.vaadin.dialogs.ConfirmDialog;

import com.thingtrack.bustrack.domain.Turn;
import com.thingtrack.bustrack.service.api.TurnService;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickFilterButtonListener;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickPrintButtonListener;
import com.thingtrack.konekti.view.addon.ui.DataGridView;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickAddButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickEditButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickRemoveButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickDownButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickNavigationEvent;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickRefreshButtonListener;
import com.thingtrack.konekti.view.addon.ui.WindowDialog;
import com.thingtrack.konekti.view.addon.ui.WindowDialog.DialogResult;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;
import com.thingtrack.bustrack.view.web.form.TurnViewForm;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.MethodProperty;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class TurnView extends AbstractView 
	implements ClickDownButtonListener, ClickRefreshButtonListener, ClickAddButtonListener, ClickEditButtonListener, ClickRemoveButtonListener, ClickFilterButtonListener, ClickPrintButtonListener {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private DataGridView dgTurn;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	private TurnService turnService;
	
	private BindingSource<Turn> bsTurn = new BindingSource<Turn>(Turn.class, 0);
		
	private NavigationToolbar navigationToolbar;
	private EditionToolbar editionToolbar;
	private BoxToolbar boxToolbar;
			
	private IViewContainer viewContainer;

	private static final String CARD_SELECTED_COLOR = "orange";
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public TurnView(IViewContainer viewContainer) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		// TODO add user code here				
		// set Slide View Services and ViewContainer to navigate
		this.viewContainer = viewContainer;
		this.turnService = TurnViewContainer.getTurnService();
				
		// initialize datasource views		
		initView();	
		
	}
	
	private void initView() {
		// initialize Slide View Organization View
		dgTurn.setImmediate(true);
		dgTurn.setSelectable(true);
		
		refreshBindindSource();
		
		// STEP 01: create grid view for slide Turn View
		try {
			dgTurn.setBindingSource(bsTurn);
			dgTurn.setVisibleColumns(new String[] { "code", "description" } );       
			dgTurn.setColumnHeaders(new String[] { "Código", "Descriptión" } );
			
			dgTurn.setColumnCollapsed("code", true);
		}
		catch(Exception ex) {
			ex.getMessage();
		}
			
		// STEP 02: create toolbar for slide Organization View
		navigationToolbar = new NavigationToolbar(0, bsTurn, viewContainer);
		editionToolbar = new EditionToolbar(1, bsTurn);
		boxToolbar = new BoxToolbar(2, bsTurn);
		
		navigationToolbar.addListenerDownButton(this);	
		navigationToolbar.addListenerRefreshButton(this);
		
		editionToolbar.addListenerAddButton(this);
		editionToolbar.addListenerEditButton(this);
		editionToolbar.addListenerDeleteButton(this);
		
		boxToolbar.addListenerFilterButton(this);
		boxToolbar.addListenerPrintButton(this);
		
		dgTurn.addListenerAddButton(this);
		dgTurn.addListenerEditButton(this);
		dgTurn.addListenerDeleteButton(this);
		
		removeAllToolbar();
		
		addToolbar(navigationToolbar);
		addToolbar(editionToolbar);
		addToolbar(boxToolbar);

	}
	
	private void refreshBindindSource() {
		try {		
			bsTurn.removeAllItems();
			bsTurn.addAll(turnService.getAll());		
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}
		
	@Override
	public void downButtonClick(ClickNavigationEvent event) {
		Turn turnSelected  = null;
		
		if (bsTurn.getItemIds().size() > 0) {
			// get selected Organization
			turnSelected = (Turn)bsTurn.getItemId();
			
			// inject the locations data from organization in the detail Location View
			ServiceView serviceView = (ServiceView)viewContainer.getNext();
			serviceView.setTurn(turnSelected);
			
			// roll to the detail Location View
			viewContainer.getSliderView().rollNext();
		}
		
	}

	@Override
	public void refreshButtonClick(ClickNavigationEvent event) {
		refreshBindindSource();
		
	}
	
	private void refreshDataGridView(Turn turnSaved) {
		if(bsTurn.containsId(turnSaved)){			
			Turn previousTurn = bsTurn.prevItemId(turnSaved);
			
			bsTurn.removeItem(turnSaved);
			bsTurn.addItemAfter(previousTurn, turnSaved);
			bsTurn.setItemId(turnSaved);
		}
		else
			bsTurn.addItem(turnSaved);
		
	}
	
	@Override
	public void addButtonClick(EditionToolbar.ClickNavigationEvent event) {
		Turn turn = new Turn();

		try {
			@SuppressWarnings("unused")
			WindowDialog<Turn> windowDialog = new WindowDialog<Turn>(getWindow(), "Nuevo Turno", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new TurnViewForm(), turn, 
					new WindowDialog.CloseWindowDialogListener<Turn>() {
			    public void windowDialogClose(WindowDialog<Turn>.CloseWindowDialogEvent<Turn> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {
			    		Turn savingTurn = event.getDomainEntity();
			    		
			    		Turn savedTurn = turnService.save(savingTurn);
			    		
			    		refreshDataGridView(savedTurn);
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo crear el nuevo turno!",
								e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nuevo Turno!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nuevo Turno!", e);
		} 
		
	}

	@Override
	@SuppressWarnings("rawtypes")
	public void editButtonClick(EditionToolbar.ClickNavigationEvent event) {						
		Turn editingTurn = (Turn) event.getRegister();
		
		BeanItem<Turn> turnBeanItem = new BeanItem<Turn>(editingTurn);		
		turnBeanItem.addItemProperty("serviceCollection", new MethodProperty(editingTurn, "services"));
		
		try {
			@SuppressWarnings("unused")
			WindowDialog<Turn> windowDialog = new WindowDialog<Turn>(getApplication().getMainWindow() , "Editor Turno", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new TurnViewForm(),turnBeanItem, 
					new WindowDialog.CloseWindowDialogListener<Turn>() {
			    public void windowDialogClose(WindowDialog<Turn>.CloseWindowDialogEvent<Turn> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {
			    		
			    		Turn savingTurn = event.getDomainEntity();
			    		
			    		Turn savedTurn = turnService.save(savingTurn);
			    		
			    		refreshDataGridView(savingTurn);
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo modificar el turno!", e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Turnos!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Turnos!", e);
		} 
		
	}

	@Override
	public void deleteButtonClick(EditionToolbar.ClickNavigationEvent event) {
		final Turn editingTurn = (Turn) event.getRegister();
		
		if (editingTurn == null)
			return;
		
		ConfirmDialog.show(getWindow(), "Borrar Turno",
		        "¿Estás seguro?", "Si", "No",
		        new ConfirmDialog.Listener() {

		            public void onClose(ConfirmDialog dialog) {
		                if (dialog.isConfirmed()) {
		            		try {
		            			turnService.delete(editingTurn);
		            			
		            			bsTurn.removeItem(editingTurn);		            			
		            		} catch (IllegalArgumentException e) {
								throw new RuntimeException(
										"¡No se pudo borrar el turno!", e);
		            		} catch (Exception e) {
								throw new RuntimeException(
										"¡No se pudo borrar el turno!", e);
		            		}
		                } 
		            }
		        });
		 
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// dgOrganization
		dgTurn = new DataGridView();
		dgTurn.setImmediate(false);
		dgTurn.setWidth("100.0%");
		dgTurn.setHeight("100.0%");
		mainLayout.addComponent(dgTurn);
		mainLayout.setExpandRatio(dgTurn, 1.0f);
		
		return mainLayout;
	}

	@Override
	public void filterButtonClick(BoxToolbar.ClickNavigationEvent event) {		
		dgTurn.setFilterBarVisible();
		
	}

	@Override
	public void printButtonClick(BoxToolbar.ClickNavigationEvent event) {
		try {
			dgTurn.print("Maestro Turnos");
		}
		catch (Exception e) {
			throw new RuntimeException("¡No se pudo imprimir el informe!", e);
		}
		
	}
	
}

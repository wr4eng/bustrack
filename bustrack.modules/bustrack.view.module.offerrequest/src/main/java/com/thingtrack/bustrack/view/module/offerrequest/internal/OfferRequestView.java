package com.thingtrack.bustrack.view.module.offerrequest.internal;

import java.text.SimpleDateFormat;
import java.util.Date;

import org.vaadin.dialogs.ConfirmDialog;

import com.thingtrack.bustrack.knowledge.service.api.OfferRequestKnowledgeService;
import com.thingtrack.bustrack.view.module.offerrequest.addon.OfferRequestToolbar;
import com.thingtrack.bustrack.view.module.offerrequest.addon.OfferRequestToolbar.ClickPendingButtonListener;
import com.thingtrack.bustrack.view.module.offerrequest.addon.OfferRequestToolbar.ClickReOpenButtonListener;
import com.thingtrack.bustrack.view.module.offerrequest.addon.OfferRequestToolbar.ClickTransferButtonListener;
import com.thingtrack.bustrack.view.module.offerrequest.addon.OfferRequestToolbar.ClickRejectButtonListener;
import com.thingtrack.konekti.domain.Invoice;
import com.thingtrack.konekti.domain.OfferRequest;
import com.thingtrack.konekti.service.api.OfferRequestService;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickFilterButtonListener;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickPrintButtonListener;
import com.thingtrack.konekti.view.addon.ui.DataGridView;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickNavigationEvent;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickAddButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickEditButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickRemoveButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickDownButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickRefreshButtonListener;
import com.thingtrack.konekti.view.addon.ui.WindowDialog;
import com.thingtrack.konekti.view.addon.ui.WindowDialog.DialogResult;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;
import com.thingtrack.konekti.view.web.form.OfferRequestViewForm;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class OfferRequestView extends AbstractView 
	implements ClickDownButtonListener, ClickRefreshButtonListener, ClickAddButtonListener, 
			   ClickEditButtonListener, ClickRemoveButtonListener, 
			   ClickFilterButtonListener, ClickPrintButtonListener,
			   ClickPendingButtonListener, ClickReOpenButtonListener, ClickTransferButtonListener, ClickRejectButtonListener {
			
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private DataGridView dgOfferRequest;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private IWorkbenchContext context;
	
	private OfferRequestService offerRequestService;
	private OfferRequestKnowledgeService offerRequestKnowledgeService;
	
	private BindingSource<OfferRequest> bsOfferRequest =  new BindingSource<OfferRequest>(OfferRequest.class, 0);
	
	private NavigationToolbar navigationToolbar;
	private EditionToolbar editionToolbar;
	private BoxToolbar boxToolbar;
	private OfferRequestToolbar offerRequestToolbar;
		
	private IViewContainer viewContainer;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public OfferRequestView(IWorkbenchContext context, IViewContainer viewContainer) {		
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here	
		// set Slide View Services and ViewContainer to navigate
		this.viewContainer = viewContainer;
		this.context = context;
		
		this.offerRequestService = OfferRequestViewContainer.getOfferRequestService();
		this.offerRequestKnowledgeService = OfferRequestViewContainer.getOfferRequestKnowledgeService();
		
		// initialize datasource views		
		initView();	
	}

	private void initView() {
		// initialize Slide View Organization View
		dgOfferRequest.setImmediate(true);		
		
		refreshBindindSource();
		
		// STEP 01: create grid view for slide Organization View
		try {
			dgOfferRequest.setBindingSource(bsOfferRequest);
			dgOfferRequest.setVisibleColumns(new String[] { "organization.name", "code", "offerRequestType.description", "client.name", "observation", "offerRequestStatus.description", "offerRequestDate" } );       
			dgOfferRequest.setColumnHeaders(new String[] { "Organización", "Código", "Tipo", "Cliente", "Observaciones", "Estado", "Fecha" } );
			
			dgOfferRequest.setColumnCollapsed("organization.name", true);
			dgOfferRequest.setColumnCollapsed("code", true);
		}
		catch(Exception ex) {
			ex.getMessage();
		}
			
		// STEP 02: create toolbar for slide Employee Agent View
		navigationToolbar = new NavigationToolbar(0, bsOfferRequest, viewContainer);
		editionToolbar = new EditionToolbar(1, bsOfferRequest);
		boxToolbar = new BoxToolbar(2, bsOfferRequest);
		offerRequestToolbar = new OfferRequestToolbar(3, bsOfferRequest, viewContainer);
		
		navigationToolbar.addListenerDownButton(this);
		navigationToolbar.addListenerRefreshButton(this);
		
		editionToolbar.addListenerAddButton(this);
		editionToolbar.addListenerEditButton(this);
		editionToolbar.addListenerDeleteButton(this);
		
		boxToolbar.addListenerFilterButton(this);
		boxToolbar.addListenerPrintButton(this);
		
		offerRequestToolbar.addListenerPendingButton(this);
		offerRequestToolbar.addListenerReOpenButton(this);
		offerRequestToolbar.addListenerTransferButton(this);
		offerRequestToolbar.addListenerRejectButton(this);
		
		dgOfferRequest.addListenerAddButton(this);
		dgOfferRequest.addListenerEditButton(this);
		dgOfferRequest.addListenerDeleteButton(this);
		
		removeAllToolbar();
		
		addToolbar(navigationToolbar);
		addToolbar(boxToolbar);
		addToolbar(editionToolbar);
		addToolbar(offerRequestToolbar);

	}
	
	private void refreshBindindSource() {
		try {		
			bsOfferRequest.removeAllItems();
			bsOfferRequest.addAll(offerRequestService.getAll());	
			
			bsOfferRequest.addNestedContainerProperty("organization.name");
			bsOfferRequest.addNestedContainerProperty("client.name");
			bsOfferRequest.addNestedContainerProperty("offerRequestType.description");
			bsOfferRequest.addNestedContainerProperty("offerRequestStatus.description");
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}
	
	@Override
	public void downButtonClick(NavigationToolbar.ClickNavigationEvent event) {
		OfferRequest offerRequestSelected  = null;
		
		if (bsOfferRequest.getItemIds().size() > 0) {
			// get selected Organization
			offerRequestSelected = (OfferRequest)bsOfferRequest.getItemId();
			
			// inject the locations data from organization in the detail Location View
			OfferRequestLineView offerRequestLineView = (OfferRequestLineView)viewContainer.getNext();
			offerRequestLineView.setOfferRequest(offerRequestSelected);
			
			// roll to the detail Location View
			viewContainer.getSliderView().rollNext();
		}
		
	}
	
	@Override
	public void refreshButtonClick(NavigationToolbar.ClickNavigationEvent event) {
		refreshBindindSource();
		
	}

	private void refreshDataGridView(OfferRequest savedOfferRequest) {
		if(bsOfferRequest.containsId(savedOfferRequest)){			
			OfferRequest previousOfferRequest = bsOfferRequest.prevItemId(savedOfferRequest);
			
			bsOfferRequest.removeItem(savedOfferRequest);
			bsOfferRequest.addItemAfter(previousOfferRequest, savedOfferRequest);
			bsOfferRequest.setItemId(savedOfferRequest);
		}
		else
			bsOfferRequest.addItem(savedOfferRequest);
		
	}
	
	@Override
	public void addButtonClick(ClickNavigationEvent event) {
		OfferRequest offerRequest = null;
		try {
			offerRequest = offerRequestService.createNewOfferRequest(context.getOrganization());
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo crear el nuevo código petición oferta!",
					e);
		}
				
		try {
			@SuppressWarnings("unused")
			WindowDialog<OfferRequest> windowDialog = new WindowDialog<OfferRequest>(getWindow(), "Nuevo Petición Oferta", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new OfferRequestViewForm(), offerRequest, 
					new WindowDialog.CloseWindowDialogListener<OfferRequest>() {
			    public void windowDialogClose(WindowDialog<OfferRequest>.CloseWindowDialogEvent<OfferRequest> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {
			    		OfferRequest savingOfferRequest = event.getDomainEntity();
			    		
			    		OfferRequest savedOfferRequest = offerRequestService.save(savingOfferRequest);
			    		
			    		refreshDataGridView(savedOfferRequest);
			    		
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo crear la nueva petición de oferta!",
								e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nueva Petición de Oferta!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nueva Petición de Oferta!", e);
		} 
		
	}
	
	@Override
	public void editButtonClick(ClickNavigationEvent event) {
		OfferRequest editingOfferRequest = (OfferRequest) event.getRegister();

		try {
			@SuppressWarnings("unused")
			WindowDialog<OfferRequest> windowDialog = new WindowDialog<OfferRequest>(getWindow(), "Editor Petición Oferta", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new OfferRequestViewForm(), editingOfferRequest, 
					new WindowDialog.CloseWindowDialogListener<OfferRequest>() {
			    public void windowDialogClose(WindowDialog<OfferRequest>.CloseWindowDialogEvent<OfferRequest> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {
			    		OfferRequest savingOfferRequest = event.getDomainEntity();
			    		
			    		OfferRequest savedOfferRequest = offerRequestService.save(savingOfferRequest);
			    		
			    		refreshDataGridView(savedOfferRequest);
			    		
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo modificar la petición de oferta!", e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Petición de Oferta!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Petición de Oferta!", e);
		} 
		
	}
	
	@Override
	public void deleteButtonClick(ClickNavigationEvent event) {
		final OfferRequest editingOfferRequest = (OfferRequest) event.getRegister();
		
		if (editingOfferRequest == null)
			return;
		
		ConfirmDialog.show(getWindow(), "Borrar Petición Oferta",
		        "¿Estás seguro?", "Si", "No",
		        new ConfirmDialog.Listener() {

		            public void onClose(ConfirmDialog dialog) {
		                if (dialog.isConfirmed()) {
		            		try {
		            			offerRequestService.delete(editingOfferRequest);
		            			
		            			// refresh
		            			refreshBindindSource();
		            			
		            		} catch (IllegalArgumentException e) {
								throw new RuntimeException(
										"¡No se pudo borrar la petición de oferta!", e);
		            		} catch (Exception e) {
								throw new RuntimeException(
										"¡No se pudo borrar la petición de oferta!", e);
		            		}
		                } 
		            }
		        });
		
	}
	
	@Override
	public void pendingButtonClick(OfferRequestToolbar.ClickNavigationEvent event) {
		OfferRequest offerRequest = (OfferRequest) event.getRegister();
		
		if (offerRequest == null)
			return;
		
		try {
			offerRequestKnowledgeService.setPending(offerRequest);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo liberar la petición de oferta!", e);
		}
	}
	
	@Override
	public void reopenButtonClick(OfferRequestToolbar.ClickNavigationEvent event) {
		OfferRequest offerRequest = (OfferRequest) event.getRegister();
		
		if (offerRequest == null)
			return;
		
		try {
			offerRequestKnowledgeService.setReOpen(offerRequest);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo reabrir la petición de oferta!", e);
		}
	}

	@Override
	public void transferButtonClick(OfferRequestToolbar.ClickNavigationEvent event) {
		OfferRequest offerRequest = (OfferRequest) event.getRegister();
		
		if (offerRequest == null)
			return;
		
		try {
			offerRequestKnowledgeService.setTransfer(offerRequest);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo transferir la petición de oferta!", e);
		}
	}
	
	@Override
	public void rejectButtonClick(OfferRequestToolbar.ClickNavigationEvent event) {
		OfferRequest offerRequest = (OfferRequest) event.getRegister();
		
		if (offerRequest == null)
			return;
		
		try {
			offerRequestKnowledgeService.setRejected(offerRequest);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo rechazar la petición de oferta!", e);
		}
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// dgEmployee
		dgOfferRequest = new DataGridView() {
		    @Override
		    protected String formatPropertyValue(Object rowId,
		            Object colId, Property property) {
		    	// Format by property type
		        if (property.getType() == Date.class) {
		            SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm");
		            
		            return df.format((Date)property.getValue());
		        }

		        return super.formatPropertyValue(rowId, colId, property);
		    }
		};
		
		dgOfferRequest.setImmediate(false);
		dgOfferRequest.setWidth("100.0%");
		dgOfferRequest.setHeight("100.0%");
		mainLayout.addComponent(dgOfferRequest);
		mainLayout.setExpandRatio(dgOfferRequest, 1.0f);
		
		return mainLayout;
	}

	@Override
	public void filterButtonClick(BoxToolbar.ClickNavigationEvent event) {
		dgOfferRequest.setFilterBarVisible();
		
	}

	@Override
	public void printButtonClick(BoxToolbar.ClickNavigationEvent event) {
		try {
			dgOfferRequest.print("Listado Peticiones Oferta");
		}
		catch (Exception e) {
			throw new RuntimeException("¡No se pudo imprimir el informe!", e);
		}
		
	}
	
}

package com.thingtrack.bustrack.view.module.offerrequest.addon;

import java.io.Serializable;

import org.vaadin.peter.buttongroup.ButtonGroup;

import com.thingtrack.konekti.domain.OfferRequest;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.data.BindingSource.IndexChangeEvent;
import com.thingtrack.konekti.view.addon.data.BindingSource.IndexChangeListener;
import com.thingtrack.konekti.view.addon.ui.AbstractToolbar;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.terminal.gwt.client.MouseEventDetails;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.ComponentContainer;
import com.vaadin.ui.HorizontalLayout;

@SuppressWarnings("serial")
public class OfferRequestToolbar extends AbstractToolbar {
	@AutoGenerated
	private HorizontalLayout toolbarLayout;

	@AutoGenerated
	private Button btnRejection;

	@AutoGenerated
	private Button btnTransfer;

	@AutoGenerated
	private Button btnReOpen;

	@AutoGenerated
	private Button btnPending;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private Object register;
	
	private int position = 0;
		
	// navigator button listeners
	private ClickPendingButtonListener listenerPendingButton = null;
	private ClickReOpenButtonListener listenerReOpenButton = null;
	private ClickTransferButtonListener listenerTransferButton = null;
	private ClickRejectButtonListener listenerRejectButton = null;
	
	private IViewContainer viewContainer;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */	
	public OfferRequestToolbar(int position, final BindingSource<?> bindingSource, IViewContainer viewContainer) {
		super(position, bindingSource);
			
		buildMainLayout();
		//setCompositionRoot(mainLayout);

		// TODO add user code here
		this.position = position;
		this.viewContainer = viewContainer;
		
		setBindingSource(bindingSource);
		
		btnPending.setDescription("Liberar Petici贸n Oferta");
		btnTransfer.setDescription("Transferir Petici贸n Oferta");
		btnReOpen.setDescription("Reabrir Petici贸n Oferta");
		btnRejection.setDescription("Rechazo Petici贸n Oferta");
		
		// set toolabar button listener
		btnPending.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				int index = bindingSource.getIndex();
				
				if (index == 0)
					return;
				
				register = bindingSource.getItemId();
				
				if (listenerRejectButton != null)
					listenerPendingButton.pendingButtonClick(new ClickNavigationEvent(event.getButton(), event.getComponent() , null, register, 0));					
				
			}
		});
		
		btnReOpen.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				int index = bindingSource.getIndex();
				
				if (index == 0)
					return;
				
				register = bindingSource.getItemId();
				
				if (listenerReOpenButton != null)
					listenerReOpenButton.reopenButtonClick(new ClickNavigationEvent(event.getButton(), event.getComponent() , null, register, 0));					
				
			}
		});
		
		btnTransfer.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				int index = bindingSource.getIndex();
				
				if (index == 0)
					return;
				
				register = bindingSource.getItemId();
				
				if (listenerTransferButton != null)
					listenerTransferButton.transferButtonClick(new ClickNavigationEvent(event.getButton(), event.getComponent() , null, register, 0));					
				
			}
		});
		
		btnRejection.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				int index = bindingSource.getIndex();
				
				if (index == 0)
					return;
				
				register = bindingSource.getItemId();
				
				if (listenerRejectButton != null)
					listenerRejectButton.rejectButtonClick(new ClickNavigationEvent(event.getButton(), event.getComponent() , null, register, 0));					
				
			}
		});
		
	}
	
	@Override
	public int getPosition() {
		return this.position;
		
	}

	@Override
	public ComponentContainer getContent() {
		return this.toolbarLayout;
		
	}
	
	public void addListenerPendingButton(ClickPendingButtonListener listener) {
		this.listenerPendingButton = listener;
		
	}
	
	public void addListenerReOpenButton(ClickReOpenButtonListener listener) {
		this.listenerReOpenButton = listener;
		
	}
	
	public void addListenerTransferButton(ClickTransferButtonListener listener) {
		this.listenerTransferButton = listener;
		
	}
	
	public void addListenerRejectButton(ClickRejectButtonListener listener) {
		this.listenerRejectButton = listener;
		
	}

	public interface ClickPendingButtonListener extends Serializable {
        public void pendingButtonClick(ClickNavigationEvent event);

    }
	
	public interface ClickReOpenButtonListener extends Serializable {
        public void reopenButtonClick(ClickNavigationEvent event);

    }
	
	public interface ClickTransferButtonListener extends Serializable {
        public void transferButtonClick(ClickNavigationEvent event);

    }
	
	public interface ClickRejectButtonListener extends Serializable {
        public void rejectButtonClick(ClickNavigationEvent event);

    }
	
	public class ClickNavigationEvent extends ClickEvent {
		private int index;
		private Object register;
		
		public ClickNavigationEvent(Button button, Component source) {
			button.super(source);
			
		}

		public ClickNavigationEvent(Button button, Component source, MouseEventDetails details) {
			button.super(source, details);
			
		}

		public ClickNavigationEvent(Button button, Component source, MouseEventDetails details, Object register, int index) {
			button.super(source, details);
			
			this.index = index;
			this.register = register;
		}

		public int getIndex() {
			return this.index;
			
		}
		
		public Object getRegister() {
			return this.register;
			
		}
		
	  }
		
	@Override
	public void setBindingSource(BindingSource<?> bindingSource) {
		this.bindingSource = bindingSource;
		
		// add change index binding source
		if (bindingSource != null) {
			bindingSource.addListenerToolBar((IndexChangeListener)this);
			
		}
		
	}

	@Override
	public void bindingSourceIndexChange(IndexChangeEvent event) {
		if (bindingSource != null) {
			OfferRequest offerRequestSelected = (OfferRequest)event.getRegister();
			
			if (offerRequestSelected == null)
				return;
						
			if (offerRequestSelected.getOfferRequestStatus().getCode().equals(OfferRequest.STATUS.OPENED.name())) {
				btnPending.setEnabled(true);
				btnReOpen.setEnabled(false);
				btnTransfer.setEnabled(false);
				btnRejection.setEnabled(true);
			}
			else if (offerRequestSelected.getOfferRequestStatus().getCode().equals(OfferRequest.STATUS.PENDING.name())) {
				btnPending.setEnabled(false);
				btnReOpen.setEnabled(true);
				btnTransfer.setEnabled(true);
				btnRejection.setEnabled(true);
			}
			else if (offerRequestSelected.getOfferRequestStatus().getCode().equals(OfferRequest.STATUS.TRANSFERRED.name())) { 
				btnPending.setEnabled(false);
				btnReOpen.setEnabled(false);
				btnTransfer.setEnabled(false);
				btnRejection.setEnabled(false);
			}
			else if (offerRequestSelected.getOfferRequestStatus().getCode().equals(OfferRequest.STATUS.REJECTED.name())) { 
				btnPending.setEnabled(false);
				btnReOpen.setEnabled(false);
				btnTransfer.setEnabled(false);
				btnRejection.setEnabled(false);
			}
			else if (offerRequestSelected.getOfferRequestStatus().getCode().equals(OfferRequest.STATUS.CLOSED.name())) { 
				btnPending.setEnabled(false);
				btnReOpen.setEnabled(false);
				btnTransfer.setEnabled(false);
				btnRejection.setEnabled(false);
			}	
			else {
				btnPending.setEnabled(false);
				btnReOpen.setEnabled(false);
				btnTransfer.setEnabled(false);
				btnRejection.setEnabled(false);
			}
		}
		
	}
	@AutoGenerated
	private void buildMainLayout() {
		toolbarLayout = buildToolbarLayout();
		addComponent(toolbarLayout);
		
	}
	
	@AutoGenerated
	private HorizontalLayout buildToolbarLayout() {		
		toolbarLayout = new HorizontalLayout();
		toolbarLayout.setImmediate(false);
		toolbarLayout.setSpacing(true);
		
		ButtonGroup editionButtonGroup = new ButtonGroup();
		toolbarLayout.addComponent(editionButtonGroup);
		
		// btnPending
		btnPending = new Button();
		btnPending.setImmediate(true);
		btnPending.setCaption("Pendiente");
		btnPending.setWidth("-1px");
		btnPending.setHeight("-1px");
		btnPending.setIcon(new ThemeResource("../konekti/images/icons/offerrequest-toolbar/paper-bag--pencil.png"));
		
		editionButtonGroup.addButton(btnPending);
		
		// btnReOpen
		btnReOpen = new Button();
		btnReOpen.setImmediate(true);
		btnReOpen.setCaption("Reabrir");
		btnReOpen.setWidth("-1px");
		btnReOpen.setHeight("-1px");
		btnReOpen.setIcon(new ThemeResource("../konekti/images/icons/offerrequest-toolbar/paper-bag-recycle.png"));
		
		editionButtonGroup.addButton(btnReOpen);
		
		// btnTransfer
		btnTransfer = new Button();
		btnTransfer.setCaption("Transferir");
		btnTransfer.setImmediate(true);
		btnTransfer.setWidth("-1px");
		btnTransfer.setHeight("-1px");
		btnTransfer.setIcon(new ThemeResource("../konekti/images/icons/offerrequest-toolbar/paper-bag--arrow.png"));
		
		editionButtonGroup.addButton(btnTransfer);
		
		// btnRejection
		btnRejection = new Button();
		btnRejection.setCaption("Rechazo");
		btnRejection.setImmediate(true);
		btnRejection.setWidth("-1px");
		btnRejection.setHeight("-1px");
		btnRejection.setIcon(new ThemeResource("../konekti/images/icons/offerrequest-toolbar/paper-bag--exclamation.png"));
		
		editionButtonGroup.addButton(btnRejection);
		
		return toolbarLayout;
	}
}

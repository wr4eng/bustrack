package com.thingtrack.bustrack.view.module.offerrequest.internal;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.vaadin.dialogs.ConfirmDialog;

import com.thingtrack.bustrack.domain.OfferRequestLineFixService;
import com.thingtrack.bustrack.domain.OfferRequestLineRegularService;
import com.thingtrack.bustrack.service.api.OfferRequestLineFixServiceService;
import com.thingtrack.bustrack.service.api.OfferRequestLineRegularServiceService;
import com.thingtrack.bustrack.view.web.form.OfferRequestLineFixServiceViewForm;
import com.thingtrack.bustrack.view.web.form.OfferRequestLineRegularServiceViewForm;
import com.thingtrack.konekti.domain.OfferRequest;
import com.thingtrack.konekti.domain.OfferRequestLine;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickFilterButtonListener;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickNavigationEvent;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickPrintButtonListener;
import com.thingtrack.konekti.view.addon.ui.DataGridView;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickAddButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickEditButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickRemoveButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickRefreshButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickUpButtonListener;
import com.thingtrack.konekti.view.addon.ui.WindowDialog;
import com.thingtrack.konekti.view.addon.ui.WindowDialog.DialogResult;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Property;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomTable;
import com.vaadin.ui.CustomTable.ColumnGenerator;
import com.vaadin.ui.Field;
import com.vaadin.ui.Label;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TabSheet.SelectedTabChangeEvent;
import com.vaadin.ui.TabSheet.SelectedTabChangeListener;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class OfferRequestLineView extends AbstractView 
	implements ClickUpButtonListener, ClickRefreshButtonListener, ClickAddButtonListener, ClickEditButtonListener, ClickRemoveButtonListener, ClickFilterButtonListener, ClickPrintButtonListener {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private TabSheet tabSheetOfferRequestLine;
	
	private OfferRequest offerRequest;
	
	private DataGridView dgOfferRequestLineFixService;
	private DataGridView dgOfferRequestLineRegularService;
	
	private OfferRequestLineFixServiceService offerRequestLineFixServiceService;
	private OfferRequestLineRegularServiceService offerRequestLineRegularServiceService;
	
	private BindingSource<OfferRequestLineFixService> bsOfferRequestLineFixService = new BindingSource<OfferRequestLineFixService>(OfferRequestLineFixService.class, 1);
	private BindingSource<OfferRequestLineRegularService> bsOfferRequestLineRegularService = new BindingSource<OfferRequestLineRegularService>(OfferRequestLineRegularService.class, 1);
		
	private List<OfferRequestLineFixService> offerRequestLineFixServices;
	private List<OfferRequestLineRegularService> offerRequestLineRegularServices;
	
	private NavigationToolbar navigationToolbar;
	private EditionToolbar editionToolbar;
	private BoxToolbar boxToolbar;
	
	private IViewContainer viewContainer;
	private IWorkbenchContext context;
	
	private final static String OFFER_REQUEST_FIX_TAB_NAME = "Petición Ofertas Discrecionales";
	private final static String OFFER_REQUEST_REGULAR_TAB_NAME = "Petición Ofertas Regulares";
	
	private DriverNameColumn driverNameColumn;
	private CalendarNameColumn calendarNameColumn;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public OfferRequestLineView(IWorkbenchContext context, IViewContainer viewContainer) {		
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		// TODO add user code here	
		// set Slide View Services and ViewContainer to navigate
		this.viewContainer = viewContainer;
		this.context = context;
		
		this.offerRequestLineFixServiceService = OfferRequestViewContainer.getOfferRequestLineFixServiceService();
		this.offerRequestLineRegularServiceService = OfferRequestViewContainer.getOfferRequestLineRegularServiceService();
		
		// add column generator
		driverNameColumn = new DriverNameColumn();
		calendarNameColumn = new CalendarNameColumn();
		
		dgOfferRequestLineFixService = new DataGridView() {
		    @Override
		    protected String formatPropertyValue(Object rowId, Object colId, Property property) {
		    	// Format by property type
		        if (property.getType() == Date.class) {
		            SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm");
		            
		            return df.format((Date)property.getValue());
		        }

		        return super.formatPropertyValue(rowId, colId, property);
		    }
		};
		
		dgOfferRequestLineFixService.setSizeFull();
		dgOfferRequestLineFixService.setImmediate(true);
		tabSheetOfferRequestLine.addTab(dgOfferRequestLineFixService, OFFER_REQUEST_FIX_TAB_NAME);
		
		dgOfferRequestLineRegularService = new DataGridView() {
		    @Override
		    protected String formatPropertyValue(Object rowId, Object colId, Property property) {
		    	// Format by property type
		        if (property.getType() == Date.class) {
		            SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm");
		            
		            return df.format((Date)property.getValue());
		        }

		        return super.formatPropertyValue(rowId, colId, property);
		    }
		};
		
		dgOfferRequestLineRegularService.setSizeFull();
		dgOfferRequestLineRegularService.setImmediate(true);
		tabSheetOfferRequestLine.addTab(dgOfferRequestLineRegularService, OFFER_REQUEST_REGULAR_TAB_NAME);
			
		tabSheetOfferRequestLine.addListener(new SelectedTabChangeListener() {
			@Override
			public void selectedTabChange(SelectedTabChangeEvent event) {
				RefreshDataSource(event.getTabSheet().getTab(tabSheetOfferRequestLine.getSelectedTab()).getCaption());
								
			}
		});
		
		tabSheetOfferRequestLine.setSelectedTab(dgOfferRequestLineFixService);
		
	}
	
	
	public void setOfferRequest(OfferRequest offerRequest) {
		this.offerRequest = offerRequest;
				
		this.offerRequestLineFixServices = offerRequest.getOfferRequestLineFixServices();
		this.offerRequestLineRegularServices = offerRequest.getOfferRequestLineRegularServices();
		
		// refresh datasource
		RefreshDataSource(tabSheetOfferRequestLine.getTab(tabSheetOfferRequestLine.getSelectedTab()).getCaption());
		
	}
	
	private void RefreshDataSource(String tabName) {
		if (tabName.equals(OFFER_REQUEST_FIX_TAB_NAME)) {
			refreshOfferRequestFixLineBindindSource();
			injectOfferRequestFixLineBindingSource();
		}
		else {
			refreshOfferRequestRegularLineBindindSource();
			injectOfferRequestRegularLineBindingSource();
		}	
	}
	
	private void refreshOfferRequestFixLineBindindSource() {
		try {			
			bsOfferRequestLineFixService.removeAllItems();
			bsOfferRequestLineFixService.addAll(offerRequestLineFixServices);
			
			bsOfferRequestLineFixService.addNestedContainerProperty("offerRequestLineStatus.description");
			bsOfferRequestLineFixService.addNestedContainerProperty("serviceType.description");
			
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}
	
	private void injectOfferRequestFixLineBindingSource() {
		try {					
			dgOfferRequestLineFixService.setBindingSource(bsOfferRequestLineFixService);
			if (dgOfferRequestLineFixService.getColumnGenerator(DriverNameColumn.DRIVER_COLUMN_ID) == null) 
				dgOfferRequestLineFixService.addGeneratedColumn(DriverNameColumn.DRIVER_COLUMN_ID , driverNameColumn);
			dgOfferRequestLineFixService.setVisibleColumns(new String[] { "number", "startDate", "startStop", "intermediateStops", "endStop", "endDate", "serviceType.description", "passengers", DriverNameColumn.DRIVER_COLUMN_ID, "breackfast", "lunch", "dinner", "accomodation", "payment", "comment", "offerRequestLineStatus.description", "offerRequestLineDate" } );       
			dgOfferRequestLineFixService.setColumnHeaders(new String[] { "Número", "Fecha Salida", "Parada Inicial", "Paradas Intermedias", "Parada Final", "Fecha Llegada", "Tipo Servicio", "Número Pasajeros", "Conductor", "Desayuno", "Almuerzo", "Cena", "Alojamiento", "Forma de Pago", "Comentario", "Estado", "Fecha Registro" } );

			dgOfferRequestLineFixService.setColumnCollapsed("breackfast", true);
			dgOfferRequestLineFixService.setColumnCollapsed("lunch", true);
			dgOfferRequestLineFixService.setColumnCollapsed("dinner", true);
			dgOfferRequestLineFixService.setColumnCollapsed("accomodation", true);
			dgOfferRequestLineFixService.setColumnCollapsed(DriverNameColumn.DRIVER_COLUMN_ID, true);
			dgOfferRequestLineFixService.setColumnCollapsed(CalendarNameColumn.CALENDAR_COLUMN_ID, true);
			dgOfferRequestLineFixService.setColumnCollapsed("comment", true);
			dgOfferRequestLineFixService.setColumnCollapsed("payment", true);
			
			dgOfferRequestLineFixService.setEditable(true);
			dgOfferRequestLineFixService.setTableFieldFactory(new TableFieldFactory() {					
				@Override
				public Field createField(Container container, Object itemId, Object propertyId, Component uiContext) {
					if("breackfast".equals(propertyId) || "lunch".equals(propertyId) || "dinner".equals(propertyId) || "accomodation".equals(propertyId)) {
						
						CheckBox field = new CheckBox();
						field.setReadOnly(true);
						return field;
					}
					
					return null;
				}
			});
			
			// create toolbar for slide
			navigationToolbar = new NavigationToolbar(0, bsOfferRequestLineFixService, viewContainer);
			editionToolbar = new EditionToolbar(1, bsOfferRequestLineFixService);
			boxToolbar = new BoxToolbar(2, bsOfferRequestLineFixService);
			
			navigationToolbar.addListenerUpButton(this);		
			
			editionToolbar.addListenerAddButton(this);
			editionToolbar.addListenerEditButton(this);
			editionToolbar.addListenerDeleteButton(this);

			boxToolbar.addListenerFilterButton(this);
			boxToolbar.addListenerPrintButton(this);
			
			dgOfferRequestLineFixService.addListenerAddButton(this);
			dgOfferRequestLineFixService.addListenerEditButton(this);
			dgOfferRequestLineFixService.addListenerDeleteButton(this);
			
			removeAllToolbar();
			
			addToolbar(navigationToolbar);
			addToolbar(editionToolbar);
			addToolbar(boxToolbar);
			
			context.getToolbarManager().addToolbars(toolbars);
			
		} catch (Exception ex) {
			ex.getMessage();
			
		}
		
	}

	private void refreshOfferRequestRegularLineBindindSource() {
		try {			
			bsOfferRequestLineRegularService.removeAllItems();
			bsOfferRequestLineRegularService.addAll(offerRequestLineRegularServices);
			
			bsOfferRequestLineRegularService.addNestedContainerProperty("offerRequestLineStatus.description");
			bsOfferRequestLineRegularService.addNestedContainerProperty("serviceType.description");
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}
	
	private void injectOfferRequestRegularLineBindingSource() {
		try {					
			dgOfferRequestLineRegularService.setBindingSource(bsOfferRequestLineRegularService);
			if (dgOfferRequestLineRegularService.getColumnGenerator(DriverNameColumn.DRIVER_COLUMN_ID) == null)
				dgOfferRequestLineRegularService.addGeneratedColumn(DriverNameColumn.DRIVER_COLUMN_ID , driverNameColumn);
			if (dgOfferRequestLineRegularService.getColumnGenerator(CalendarNameColumn.CALENDAR_COLUMN_ID) == null)
				dgOfferRequestLineRegularService.addGeneratedColumn(CalendarNameColumn.CALENDAR_COLUMN_ID, calendarNameColumn);
			dgOfferRequestLineRegularService.setVisibleColumns(new String[] { "number", "serviceType.description", DriverNameColumn.DRIVER_COLUMN_ID, "payment", CalendarNameColumn.CALENDAR_COLUMN_ID, "comment", "offerRequestLineStatus.description", "offerRequestLineDate" } );       
			dgOfferRequestLineRegularService.setColumnHeaders(new String[] { "Número", "Tipo Servicio", "Conductor", "Forma de Pago", "Calendario", "Comentario", "Estado", "Fecha Registro" } );
						
			dgOfferRequestLineRegularService.setColumnCollapsed(DriverNameColumn.DRIVER_COLUMN_ID, true);
			dgOfferRequestLineRegularService.setColumnCollapsed(CalendarNameColumn.CALENDAR_COLUMN_ID, true);
			dgOfferRequestLineRegularService.setColumnCollapsed("comment", true);
			dgOfferRequestLineRegularService.setColumnCollapsed("payment", true);		
			
			// create toolbar for slide
			navigationToolbar = new NavigationToolbar(0, bsOfferRequestLineRegularService, viewContainer);
			editionToolbar = new EditionToolbar(1, bsOfferRequestLineRegularService);
			boxToolbar = new BoxToolbar(2, bsOfferRequestLineRegularService);
			
			navigationToolbar.addListenerUpButton(this);		
			
			editionToolbar.addListenerAddButton(this);
			editionToolbar.addListenerEditButton(this);
			editionToolbar.addListenerDeleteButton(this);
			
			boxToolbar.addListenerFilterButton(this);
			boxToolbar.addListenerPrintButton(this);
			
			dgOfferRequestLineRegularService.addListenerAddButton(this);
			dgOfferRequestLineRegularService.addListenerEditButton(this);
			dgOfferRequestLineRegularService.addListenerDeleteButton(this);
			
			removeAllToolbar();
			
			addToolbar(navigationToolbar);
			addToolbar(editionToolbar);
			addToolbar(boxToolbar);
			
			context.getToolbarManager().addToolbars(toolbars);
			
		} catch (Exception ex) {
			ex.getMessage();
			
		}
		
	}
	
	private void AddEntity(String tabName) {
		if (tabName.equals(OFFER_REQUEST_FIX_TAB_NAME))
			AddOfferRequestLineFixServiceEntity();		
		else
			AddOfferRequestLineRegularServiceEntity();		
	}
	
	private void EditEntity(String tabName, Object entity) {
		if (tabName.equals(OFFER_REQUEST_FIX_TAB_NAME))
			EditOfferRequestLineFixServiceEntity(entity);		
		else
			EditOfferRequestLineRegularServiceEntity(entity);
	}
	
	private void RemoveEntity(String tabName, Object entity) {
		if (tabName.equals(OFFER_REQUEST_FIX_TAB_NAME))
			RemoveOfferRequestLineFixServiceEntity(entity);		
		else
			RemoveOfferRequestLineRegularServiceEntity(entity);
	}
	
	private void AddOfferRequestLineFixServiceEntity() {
		OfferRequestLineFixService offerRequestLineFixService = new OfferRequestLineFixService();
		
		offerRequest.addOfferRequestLineFixService(offerRequestLineFixService);
		offerRequestLineFixService.setOfferRequest(offerRequest);
		
		try {
			@SuppressWarnings("unused")
			WindowDialog<OfferRequestLineFixService> windowDialog = new WindowDialog<OfferRequestLineFixService>(getWindow(), "Nueva Petición Oferta Discrecional", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new OfferRequestLineFixServiceViewForm(), offerRequestLineFixService, 
					new WindowDialog.CloseWindowDialogListener<OfferRequestLineFixService>() {
			    public void windowDialogClose(WindowDialog<OfferRequestLineFixService>.CloseWindowDialogEvent<OfferRequestLineFixService> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {			    		
			    		offerRequestLineFixServiceService.save(event.getDomainEntity());			    		
			    		
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo crear la nueva línea de petición de oferta discrecional!",
								e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nueva Línea Petición de Oferta Discrecional!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nueva Línea Petición de Oferta Discrecional!", e);
		}
		
	}
	
	private void AddOfferRequestLineRegularServiceEntity() {
		OfferRequestLineRegularService offerRequestLineRegularService = new OfferRequestLineRegularService();
		
		offerRequest.addOfferRequestLineRegularService(offerRequestLineRegularService);
		offerRequestLineRegularService.setOfferRequest(offerRequest);
		
		try {
			@SuppressWarnings("unused")
			WindowDialog<OfferRequestLineRegularService> windowDialog = new WindowDialog<OfferRequestLineRegularService>(getWindow(), "Nueva Petición Oferta Regular", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new OfferRequestLineRegularServiceViewForm(context), offerRequestLineRegularService, 
					new WindowDialog.CloseWindowDialogListener<OfferRequestLineRegularService>() {
			    public void windowDialogClose(WindowDialog<OfferRequestLineRegularService>.CloseWindowDialogEvent<OfferRequestLineRegularService> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {			    		
			    		offerRequestLineRegularServiceService.save(event.getDomainEntity());			    		
			    		
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo crear la nueva línea de petición de oferta regular!",
								e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nueva Línea Petición de Oferta Regular!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nueva Línea Petición de Oferta Regular!", e);
		}
		
	}
	
	private void EditOfferRequestLineFixServiceEntity(Object entity) {
		OfferRequestLineFixService editingOfferRequestLineFixService = (OfferRequestLineFixService) entity;
				
		try {
			@SuppressWarnings("unused")
			WindowDialog<OfferRequestLineFixService> windowDialog = new WindowDialog<OfferRequestLineFixService>(getWindow(), "Editor Petición Oferta Discrecional", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new OfferRequestLineFixServiceViewForm(), editingOfferRequestLineFixService, 
					new WindowDialog.CloseWindowDialogListener<OfferRequestLineFixService>() {
			    public void windowDialogClose(WindowDialog<OfferRequestLineFixService>.CloseWindowDialogEvent<OfferRequestLineFixService> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {			    		
			    		offerRequestLineFixServiceService.save(event.getDomainEntity());			    		
			    		
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo modificar la línea de petición de oferta discrecional!", e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Línea Petición de Oferta Discrecional!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Línea Petición de Oferta Discrecional!", e);
		}
	}
	
	private void EditOfferRequestLineRegularServiceEntity(Object entity) {
		final OfferRequestLineRegularService editingOfferRequestLineRegularService = (OfferRequestLineRegularService) entity;
		
		try {
			@SuppressWarnings("unused")
			WindowDialog<OfferRequestLineRegularService> windowDialog = new WindowDialog<OfferRequestLineRegularService>(getWindow(), "Editor Petición Oferta Regular", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new OfferRequestLineRegularServiceViewForm(context), editingOfferRequestLineRegularService, 
					new WindowDialog.CloseWindowDialogListener<OfferRequestLineRegularService>() {
			    public void windowDialogClose(WindowDialog<OfferRequestLineRegularService>.CloseWindowDialogEvent<OfferRequestLineRegularService> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {			    		
			    		offerRequestLineRegularServiceService.save(event.getDomainEntity());			    		
			    		
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo modificar la línea de petición de oferta regular!", e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Línea Petición de Oferta Regular!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Línea Petición de Oferta Regular!", e);
		}
	}
	
	private void RemoveOfferRequestLineFixServiceEntity(Object entity) {
		final OfferRequestLineFixService editingOfferRequestLineFixService = (OfferRequestLineFixService) entity;
		
		if (editingOfferRequestLineFixService == null)
			return;
		
		ConfirmDialog.show(getWindow(), "Borrar Petición Oferta Discrecional",
		        "¿Estás seguro?", "Si", "No",
		        new ConfirmDialog.Listener() {

		            public void onClose(ConfirmDialog dialog) {
		                if (dialog.isConfirmed()) {
		            		try {
		            			offerRequestLineFixServiceService.delete(editingOfferRequestLineFixService);
		            			
		            		} catch (IllegalArgumentException e) {
								throw new RuntimeException(
										"¡No se pudo borrar la línea de petición de oferta discrecional!", e);
		            		} catch (Exception e) {
								throw new RuntimeException(
										"¡No se pudo borrar la línea de petición de oferta discrecional!", e);
		            		}
		                } 
		            }
		        });
	}
	
	private void RemoveOfferRequestLineRegularServiceEntity(Object entity) {
		final OfferRequestLineRegularService editingOfferRequestLineRegularService = (OfferRequestLineRegularService) entity;
		
		if (editingOfferRequestLineRegularService == null)
			return;
		
		ConfirmDialog.show(getWindow(), "Borrar Petición Oferta Regular",
		        "¿Estás seguro?", "Si", "No",
		        new ConfirmDialog.Listener() {

		            public void onClose(ConfirmDialog dialog) {
		                if (dialog.isConfirmed()) {
		            		try {
		            			offerRequestLineRegularServiceService.delete(editingOfferRequestLineRegularService);
		            			
		            		} catch (IllegalArgumentException e) {
								throw new RuntimeException(
										"¡No se pudo borrar la línea de petición de oferta regular!", e);
		            		} catch (Exception e) {
								throw new RuntimeException(
										"¡No se pudo borrar la línea de petición de oferta regular!", e);
		            		}
		                } 
		            }
		        });
	}	
	
	@Override
	public void upButtonClick(NavigationToolbar.ClickNavigationEvent event) {
		viewContainer.getSliderView().rollPrevious();
		
	}
	
	@Override
	public void refreshButtonClick(NavigationToolbar.ClickNavigationEvent event) {
		RefreshDataSource(tabSheetOfferRequestLine.getTab(tabSheetOfferRequestLine.getSelectedTab()).getCaption());
		
	}

	@Override
	public void addButtonClick(EditionToolbar.ClickNavigationEvent event) {
		AddEntity(tabSheetOfferRequestLine.getTab(tabSheetOfferRequestLine.getSelectedTab()).getCaption());
		
	}
	
	@Override
	public void editButtonClick(EditionToolbar.ClickNavigationEvent event) {
		EditEntity(tabSheetOfferRequestLine.getTab(tabSheetOfferRequestLine.getSelectedTab()).getCaption(), event.getRegister());
		
	}

	@Override
	public void deleteButtonClick(EditionToolbar.ClickNavigationEvent event) {
		RemoveEntity(tabSheetOfferRequestLine.getTab(tabSheetOfferRequestLine.getSelectedTab()).getCaption(), event.getRegister());
		
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// tabSheetOfferRequestLine
		tabSheetOfferRequestLine = new TabSheet();
		tabSheetOfferRequestLine.setImmediate(false);
		tabSheetOfferRequestLine.setWidth("100.0%");
		tabSheetOfferRequestLine.setHeight("100.0%");
		mainLayout.addComponent(tabSheetOfferRequestLine);
		mainLayout.setExpandRatio(tabSheetOfferRequestLine, 1.0f);
		
		return mainLayout;
	}

	private class DriverNameColumn implements ColumnGenerator {

		static final String DRIVER_COLUMN_ID = "driver-column-id";
		
		@Override
		public Object generateCell(CustomTable source, Object itemId, Object columnId) {
			
			Label driverNameLabel = new Label();
			
			OfferRequestLine offerRequestLine = (OfferRequestLine) itemId;
			
			if(offerRequestLine.getDriver() != null)
				driverNameLabel.setValue(offerRequestLine.getDriver().getName());
			
			return driverNameLabel;
		}
				
	} 
	
	private class CalendarNameColumn implements ColumnGenerator {

		static final String CALENDAR_COLUMN_ID = "calendar-column-id";
		
		@Override
		public Object generateCell(CustomTable source, Object itemId, Object columnId) {
			
			Label calendarNameLabel = new Label();
			
			OfferRequestLineRegularService offerRequestLineRegularService = (OfferRequestLineRegularService) itemId;
			
			if(offerRequestLineRegularService.getCalendar() != null)
				calendarNameLabel.setValue(offerRequestLineRegularService.getCalendar().getName());
			
			return calendarNameLabel;
		}
				
	}

	@Override
	public void filterButtonClick(ClickNavigationEvent event) {
		if (tabSheetOfferRequestLine.getTab(tabSheetOfferRequestLine.getSelectedTab()).getCaption().equals(OFFER_REQUEST_FIX_TAB_NAME))
			dgOfferRequestLineFixService.setFilterBarVisible();
		else
			dgOfferRequestLineRegularService.setFilterBarVisible();
		
	}


	@Override
	public void printButtonClick(ClickNavigationEvent event) {
		if (tabSheetOfferRequestLine.getTab(tabSheetOfferRequestLine.getSelectedTab()).getCaption().equals(OFFER_REQUEST_FIX_TAB_NAME)) {
			try {
				dgOfferRequestLineFixService.print("Listado Líneas Peticiones Oferta de " + offerRequest.getCode() + " Petición Oferta");
			}
			catch (Exception e) {
				throw new RuntimeException("¡No se pudo imprimir el informe!", e);
			}
		}
		else {
			try {
				dgOfferRequestLineRegularService.print("Listado Líneas Peticiones Oferta de " + offerRequest.getCode() + " Petición Oferta");
			}
			catch (Exception e) {
				throw new RuntimeException("¡No se pudo imprimir el informe!", e);
			}
		}	
				
	} 
}

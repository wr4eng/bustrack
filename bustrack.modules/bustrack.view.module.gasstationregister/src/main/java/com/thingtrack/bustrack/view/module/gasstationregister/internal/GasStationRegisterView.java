package com.thingtrack.bustrack.view.module.gasstationregister.internal;

import java.text.SimpleDateFormat;
import java.util.Date;

import org.vaadin.dialogs.ConfirmDialog;

import com.thingtrack.bustrack.domain.GasStationRegister;
import com.thingtrack.bustrack.service.api.GasStationRegisterService;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickFilterButtonListener;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickPrintButtonListener;
import com.thingtrack.konekti.view.addon.ui.DataGridView;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickAddButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickEditButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickRemoveButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickNavigationEvent;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickRefreshButtonListener;
import com.thingtrack.konekti.view.addon.ui.WindowDialog;
import com.thingtrack.konekti.view.addon.ui.WindowDialog.DialogResult;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;
import com.thingtrack.bustrack.view.web.form.GasRegisterViewForm;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.data.Property;

@SuppressWarnings("serial")
public class GasStationRegisterView extends AbstractView implements
		ClickRefreshButtonListener, ClickAddButtonListener,
		ClickEditButtonListener, ClickRemoveButtonListener,
		ClickFilterButtonListener, ClickPrintButtonListener {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private DataGridView dgGasStationRegister;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private GasStationRegisterService gasStationRegisterService;

	private BindingSource<GasStationRegister> bsGasStationRegister = new BindingSource<GasStationRegister>(GasStationRegister.class, 0);

	private NavigationToolbar navigationToolbar;
	private EditionToolbar editionToolbar;
	private BoxToolbar boxToolbar;

	private IViewContainer viewContainer;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public GasStationRegisterView(IViewContainer viewContainer) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		// set Slide View Services and ViewContainer to navigate
		this.viewContainer = viewContainer;
		this.gasStationRegisterService = GasStationRegisterViewContainer
				.getGasStationRegisterService();

		// initialize datasource views
		initView();

	}

	private void initView() {
		// initialize Slide View Organization View
		dgGasStationRegister.setImmediate(true);

		refreshBindindSource();

		// STEP 01: create grid view for slide Organization View
		try {
			dgGasStationRegister.setBindingSource(bsGasStationRegister);
			dgGasStationRegister.setVisibleColumns(new String[] {
					"gasStation.description", "volume", "price",
					"gasType.description", "gasStationRegisterDate" });
			dgGasStationRegister.setColumnHeaders(new String[] {
					"Estación Carburante", "Volumen", "Precio",
					"Tipo Carburante", "Fecha Registro" });

			dgGasStationRegister.setColumnCollapsed("comment", true);

		} catch (Exception ex) {
			ex.getMessage();
		}

		// STEP 02: create toolbar for slide Organization View
		navigationToolbar = new NavigationToolbar(0, bsGasStationRegister,
				viewContainer);
		editionToolbar = new EditionToolbar(1, bsGasStationRegister);
		boxToolbar = new BoxToolbar(2, bsGasStationRegister);

		// set navigation toolbar visibility
		navigationToolbar.setUpButton(false);
		navigationToolbar.setDownButton(false);

		navigationToolbar.addListenerRefreshButton(this);
		navigationToolbar.setUpButton(false);
		navigationToolbar.setDownButton(false);

		editionToolbar.addListenerAddButton(this);
		editionToolbar.addListenerEditButton(this);
		editionToolbar.addListenerDeleteButton(this);
		
		boxToolbar.addListenerFilterButton(this);
		boxToolbar.addListenerPrintButton(this);
		
		dgGasStationRegister.addListenerAddButton(this);
		dgGasStationRegister.addListenerEditButton(this);
		dgGasStationRegister.addListenerDeleteButton(this);
		
		removeAllToolbar();

		addToolbar(navigationToolbar);
		addToolbar(editionToolbar);
		addToolbar(boxToolbar);

	}

	private void refreshBindindSource() {
		try {
			bsGasStationRegister.removeAllItems();
			bsGasStationRegister.addAll(gasStationRegisterService.getAll());

			bsGasStationRegister
					.addNestedContainerProperty("gasType.description");
			bsGasStationRegister
					.addNestedContainerProperty("gasStation.description");

		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void refreshDataGridView(GasStationRegister savedGasStationRegister) {
		if (bsGasStationRegister.containsId(savedGasStationRegister)) {
			GasStationRegister previousGasStationRegister = bsGasStationRegister
					.prevItemId(savedGasStationRegister);

			bsGasStationRegister.removeItem(savedGasStationRegister);
			bsGasStationRegister.addItemAfter(previousGasStationRegister,
					savedGasStationRegister);
			bsGasStationRegister.setItemId(savedGasStationRegister);
		} else
			bsGasStationRegister.addItem(savedGasStationRegister);

	}

	@Override
	public void refreshButtonClick(ClickNavigationEvent event) {
		refreshBindindSource();

	}

	@Override
	public void addButtonClick(EditionToolbar.ClickNavigationEvent event) {
		GasStationRegister gasStationRegister = new GasStationRegister();

		try {
			@SuppressWarnings("unused")
			WindowDialog<GasStationRegister> windowDialog = new WindowDialog<GasStationRegister>(
					getWindow(),
					"Nueva Registro Carburante",
					"Guardar",
					DialogResult.SAVE,
					"Cancelar",
					DialogResult.CANCEL,
					new GasRegisterViewForm(),
					gasStationRegister,
					new WindowDialog.CloseWindowDialogListener<GasStationRegister>() {
						public void windowDialogClose(
								WindowDialog<GasStationRegister>.CloseWindowDialogEvent<GasStationRegister> event) {
							if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
								return;

							try {
								GasStationRegister savingGasStationRegister = event
										.getDomainEntity();

								GasStationRegister savedGasStationRegister = gasStationRegisterService
										.save(savingGasStationRegister);

								refreshDataGridView(savedGasStationRegister);

							} catch (Exception e) {
								throw new RuntimeException(
										"¡No se pudo crear el nuevo registro carburante!",
										e);

							}
						}

					});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nuevo Registro carburante!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nuevo Registro carburante!", e);
		}

	}

	@Override
	public void editButtonClick(EditionToolbar.ClickNavigationEvent event) {
		GasStationRegister editingGasStationRegister = (GasStationRegister) event
				.getRegister();

		try {
			@SuppressWarnings("unused")
			WindowDialog<GasStationRegister> windowDialog = new WindowDialog<GasStationRegister>(
					getApplication().getMainWindow(),
					"Editor Registro Carburante",
					"Guardar",
					DialogResult.SAVE,
					"Cancelar",
					DialogResult.CANCEL,
					new GasRegisterViewForm(),
					editingGasStationRegister,
					new WindowDialog.CloseWindowDialogListener<GasStationRegister>() {
						public void windowDialogClose(
								WindowDialog<GasStationRegister>.CloseWindowDialogEvent<GasStationRegister> event) {
							if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
								return;

							try {

								GasStationRegister savingGasStationRegister = event
										.getDomainEntity();

								GasStationRegister savedGasStationRegister = gasStationRegisterService
										.save(savingGasStationRegister);

								refreshDataGridView(savedGasStationRegister);
							} catch (Exception e) {
								throw new RuntimeException(
										"¡No se pudo modificar el registro carburante!", e);

							}
						}

					});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Registro Carburante!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Registro Carburante!", e);
		}

	}

	@Override
	public void deleteButtonClick(EditionToolbar.ClickNavigationEvent event) {
		final GasStationRegister editingGasStationRegister = (GasStationRegister) event
				.getRegister();

		if (editingGasStationRegister == null)
			return;

		ConfirmDialog.show(getWindow(), "Borrar Registro Carburante",
				"¿Estás seguro?", "Si", "No", new ConfirmDialog.Listener() {

					public void onClose(ConfirmDialog dialog) {
						if (dialog.isConfirmed()) {
							try {
								gasStationRegisterService
										.delete(editingGasStationRegister);

								// refresh
								bsGasStationRegister
										.removeItem(editingGasStationRegister);

							} catch (IllegalArgumentException e) {
								throw new RuntimeException(
										"¡No se pudo borrar el registro carburante!", e);
							} catch (Exception e) {
								throw new RuntimeException(
										"¡No se pudo borrar el registro carburante!", e);
							}
						}
					}
				});

	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// dataGridView_1
		dgGasStationRegister = new DataGridView() {
			@Override
			protected String formatPropertyValue(Object rowId, Object colId,
					Property property) {
				// Format by property type
				if (property.getType() == Date.class) {
					SimpleDateFormat df = new SimpleDateFormat(
							"dd/MM/yyyy HH:mm");

					return df.format((Date) property.getValue());
				}

				return super.formatPropertyValue(rowId, colId, property);
			}
		};

		dgGasStationRegister.setImmediate(false);
		dgGasStationRegister.setWidth("100.0%");
		dgGasStationRegister.setHeight("100.0%");
		mainLayout.addComponent(dgGasStationRegister);
		mainLayout.setExpandRatio(dgGasStationRegister, 1.0f);

		return mainLayout;
	}

	@Override
	public void filterButtonClick(BoxToolbar.ClickNavigationEvent event) {
		dgGasStationRegister.setFilterBarVisible();

	}

	@Override
	public void printButtonClick(BoxToolbar.ClickNavigationEvent event) {
		try {
			dgGasStationRegister.print("Listado Consumo Carburante");
		}
		catch (Exception e) {
			throw new RuntimeException("¡No se pudo imprimir el informe!", e);
		}
		
	}

}

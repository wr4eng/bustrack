package com.thingtrack.bustrack.view.module.scheduler.internal;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.vaadin.addon.formbinder.ViewBoundForm;
import org.vaadin.cssinject.CSSInject;
import org.vaadin.dialogs.ConfirmDialog;
import org.vaadin.peter.buttongroup.ButtonGroup;

import com.thingtrack.bustrack.view.module.scheduler.SchedulerModule;
import com.thingtrack.bustrack.view.module.scheduler.internal.calendar.ServiceEvent;
import com.thingtrack.bustrack.view.module.scheduler.internal.calendar.ServiceEventProvider;
import com.thingtrack.bustrack.view.module.scheduler.internal.form.ServiceCodeInvalidException;
import com.thingtrack.bustrack.view.module.scheduler.internal.form.ServiceEventView;
import com.thingtrack.konekti.domain.Service;
import com.thingtrack.konekti.service.api.ServiceService;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.kernel.ui.layout.IToolbar;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;
import com.vaadin.addon.calendar.event.CalendarEvent;
import com.vaadin.addon.calendar.ui.Calendar;
import com.vaadin.addon.calendar.ui.CalendarComponentEvents;
import com.vaadin.addon.calendar.ui.CalendarComponentEvents.EventClick;
import com.vaadin.addon.calendar.ui.CalendarComponentEvents.RangeSelectEvent;
import com.vaadin.addon.calendar.ui.CalendarDateRange;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Validator.EmptyValueException;
import com.vaadin.data.Validator.InvalidValueException;
import com.vaadin.data.util.BeanItem;
import com.vaadin.event.Action;
import com.vaadin.event.Action.Handler;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComponentContainer;
import com.vaadin.ui.DateField.UnparsableDateString;
import com.vaadin.ui.CssLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.InlineDateField;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Window.Notification;
import com.vaadin.ui.themes.Reindeer;

@SuppressWarnings("serial")
public class CalendarView extends AbstractView {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout horizontalLayout;
	@AutoGenerated
	private VerticalLayout calendarLayout;
	@AutoGenerated
	private Calendar serviceCalendar;
	@AutoGenerated
	private VerticalLayout selectorLayout;
	@AutoGenerated
	private InlineDateField dateSelector;

	private CssLayout navigationLayout;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	public static final String CREATE_SERVICE_EVENT_CAPTION = "Crear servicio";
	public static final String UPDATE_SERVICE_EVENT_CAPTION = "Editar servicio";
	public static final String DAILY_VIEW_FORMAT = "EEEE, dd MMMM yyyy";
	public static final String WEEKLY_VIEW_FORMAT = "dd MMMM yyyy";
	public static final String MONTHLY_VIEW_FORMAT = "MMMM yyyy";

	private Label dateViewModeLabel;

	private ServiceEventProvider serviceCalendarEventProvider;

	// Enterprise services
	@Autowired
	private ServiceService serviceService;

	private enum CalendarViewMode {
		DAILY, WEEKLY, MONTHLY
	}

	private IWorkbenchContext context;

	private CalendarViewMode viewMode = CalendarViewMode.WEEKLY;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private IViewContainer viewContainer;
	
	/**
	 * Custom constructor to pass the Konekti Workbench Context;
	 * @throws Exception 
	 */
	public CalendarView(IWorkbenchContext context) throws Exception {

		this();
		this.context = context;
	}

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 * @throws Exception 
	 */
	public CalendarView() {

		buildMainLayout();
		setCompositionRoot(mainLayout);

		serviceCalendar.setImmediate(true);
		serviceCalendar.addActionHandler(new ServiceCalendarActionHandler());

		// Custom Calendar Event's CSSs
		mainLayout
				.addComponent(new CSSInject(
						".v-calendar .v-calendar-event-"
								+ ServiceEvent.OPENED_STYLE
								+ " .v-calendar-event-content { background-color: #f1ffb8; border-color: #779100; }"));
		mainLayout.addComponent(new CSSInject(".v-calendar .v-calendar-event-"
				+ ServiceEvent.OPENED_STYLE
				+ " .v-calendar-event-caption { color: #394700; }"));
		mainLayout
				.addComponent(new CSSInject(
						".v-calendar .v-calendar-event-"
								+ ServiceEvent.EXECUTING_STYLE
								+ " .v-calendar-event-content { background-color: #c7ffb8; border: #1d9200; } "));
		mainLayout.addComponent(new CSSInject(".v-calendar .v-calendar-event-"
				+ ServiceEvent.EXECUTING_STYLE
				+ " .v-calendar-event-caption { color: #0f4700; } "));
		mainLayout
				.addComponent(new CSSInject(
						".v-calendar .v-calendar-event-"
								+ ServiceEvent.COMPLETED_STYLE
								+ " .v-calendar-event-content { background-color: #e6e6e6; border-color: #4d4d4d; } "));
		mainLayout.addComponent(new CSSInject(".v-calendar .v-calendar-event-"
				+ ServiceEvent.COMPLETED_STYLE
				+ " .v-calendar-event-caption { color: #1a1a1a; } "));
		mainLayout
				.addComponent(new CSSInject(
						".v-calendar .v-calendar-event-"
								+ ServiceEvent.ASSIGNED_STYLE
								+ " .v-calendar-event-content { background-color: #b8d4ff; border-color: #003a91; } "));
		mainLayout.addComponent(new CSSInject(".v-calendar .v-calendar-event-"
				+ ServiceEvent.ASSIGNED_STYLE
				+ " .v-calendar-event-caption { color: #001d49; } "));
		mainLayout
				.addComponent(new CSSInject(
						".v-calendar .v-calendar-event-"
								+ ServiceEvent.CANCELLED_STYLE
								+ " .v-calendar-event-content { background-color: #ffb8b8; border-color: #910000; } "));
		mainLayout.addComponent(new CSSInject(".v-calendar .v-calendar-event-"
				+ ServiceEvent.CANCELLED_STYLE
				+ " .v-calendar-event-caption { color: #470000; } "));
		mainLayout
				.addComponent(new CSSInject(
						".v-calendar .v-calendar-event-"
								+ ServiceEvent.STOPPED_STYLE
								+ "  .v-calendar-event-content { background-color: #ffe2b8;  border-color: #915500; } "));
		mainLayout.addComponent(new CSSInject(".v-calendar .v-calendar-event-"
				+ ServiceEvent.STOPPED_STYLE
				+ "  .v-calendar-event-caption { color: #472b00; } "));
		// Add toolbars
		addToolbar(new CalendarToolBar());

		// Inline Date Selector
		dateSelector.setImmediate(true);
		dateSelector.addListener(new Property.ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {

				Date startDate = (Date) event.getProperty().getValue();

				switchCalendarViewMode(startDate);

			}

		});

		// Create a new Service Event by dragging in the calendar
		serviceCalendar
				.setHandler(new CalendarComponentEvents.RangeSelectHandler() {

					@Override
					public void rangeSelect(RangeSelectEvent event) {

						final ServiceEvent serviceEvent = new ServiceEvent();

						serviceEvent.setStart(event.getStart());
						serviceEvent.setEnd(event.getEnd());

						serviceEvent.setScheduleDate(event.getStart());
						serviceEvent.setReservationDate(new Date());

						Window window = null;
						try {
							window = servicePopupWindow(
									CREATE_SERVICE_EVENT_CAPTION, serviceEvent);
							getApplication().getMainWindow().addWindow(window);
						} catch (IllegalArgumentException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}
				});

		// Edit an existing Service Event
		serviceCalendar
				.setHandler(new CalendarComponentEvents.EventClickHandler() {

					@Override
					public void eventClick(EventClick event) {

						if (!(event.getCalendarEvent() instanceof ServiceEvent))
							return;

						ServiceEvent editingServiceEvent = (ServiceEvent) event
								.getCalendarEvent();

						Window window = null;
						try {
							window = servicePopupWindow(
									UPDATE_SERVICE_EVENT_CAPTION,
									editingServiceEvent);
							getApplication().getMainWindow().addWindow(window);
						} catch (IllegalArgumentException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}
				});

	}

	/**
	* The constructor should first build the main layout, set the
	* composition root and then do any custom initialization.
	*
	* The constructor will not be automatically regenerated by the
	* visual editor.
	 * @throws Exception 
	*/
	public CalendarView(IViewContainer viewContainer) throws Exception {
		this();
		
		this.viewContainer = viewContainer;
		this.context = ((SchedulerViewContainer)this.viewContainer).getContext();
		this.serviceService = SchedulerViewContainer.getServiceService();
		
		loadData();
	}
	
	@SuppressWarnings("serial")
	private CssLayout buildNavigationbar() {

		CssLayout upperLayout = new CssLayout();
		HorizontalLayout toolbarLayout = new HorizontalLayout();
		upperLayout.addComponent(toolbarLayout);
		
		toolbarLayout.setImmediate(false);
		toolbarLayout.setWidth("100.0%");
		toolbarLayout.setSpacing(true);


		ButtonGroup controlbar = new ButtonGroup();

		toolbarLayout.addComponent(controlbar);

		dateViewModeLabel = new Label();
		dateViewModeLabel.setStyleName(Reindeer.LABEL_H2);
		toolbarLayout.addComponent(dateViewModeLabel);

		// Views
		HorizontalLayout viewLayout = new HorizontalLayout();
		viewLayout.setSpacing(true);

		toolbarLayout.addComponent(viewLayout);

		mainLayout.addComponent(toolbarLayout);
		mainLayout.setExpandRatio(toolbarLayout, 0.0f);

		return upperLayout;
	}

	@PostConstruct
	private void loadData() throws Exception {

		List<Service> allServices = new ArrayList<Service>(
				serviceService.getAllNonPlanned(context.getOrganization()));
		allServices.addAll(serviceService.getAllPlanned(context
				.getOrganization()));

		serviceCalendarEventProvider = new ServiceEventProvider(allServices);
		serviceCalendar.setEventProvider(serviceCalendarEventProvider);

		setDateViewModeLabelValue(WEEKLY_VIEW_FORMAT,
				serviceCalendar.getStartDate(), serviceCalendar.getEndDate());

	}

	private Window servicePopupWindow(String windowCaption,
			final ServiceEvent serviceEvent) throws IllegalArgumentException,
			Exception {
		// Create popup window and add a form in it.
		VerticalLayout layout = new VerticalLayout();
		layout.setMargin(true);
		layout.setSpacing(true);
		final Window window = new Window(windowCaption, layout);
		window.setResizable(false);
		window.setModal(true);
		window.setHeight("660px");
		window.setWidth("500px");
		window.center();

		// Wrap the calendar event to a BeanItem and pass it to the form
		final BeanItem<ServiceEvent> item = new BeanItem<ServiceEvent>(
				serviceEvent);

		ServiceEventView serviceEventView = new ServiceEventView();
		serviceEventView.setServiceDateRange(serviceEvent.getStart(),
				serviceEvent.getEnd());
		final ViewBoundForm form = new ViewBoundForm(serviceEventView);
		form.setSizeFull();
		form.setWriteThrough(false);
		form.setInvalidCommitted(false);

		form.setItemDataSource(item);

		layout.addComponent(form);
		HorizontalLayout footerLayout = (HorizontalLayout) form.getFooter();
		footerLayout.setWidth("100%");
		footerLayout.setMargin(true);

		HorizontalLayout buttonsLayout = new HorizontalLayout();
		buttonsLayout.setSpacing(true);

		footerLayout.addComponent(buttonsLayout);
		footerLayout.setComponentAlignment(buttonsLayout,
				Alignment.MIDDLE_RIGHT);

		buttonsLayout.addComponent(new Button("Guardar",
				new Button.ClickListener() {

					public void buttonClick(ClickEvent event) {

						try {

							form.commit();
						} catch (EmptyValueException e) {
							return;
						} catch (UnparsableDateString e) {
							return;
						} catch (InvalidValueException e) {

							if (e.getCauses().length > 0) {

								ServiceCodeInvalidException serviceCodeInvalidException = null;
								for (InvalidValueException exception : e
										.getCauses()) {

									if (exception instanceof ServiceCodeInvalidException) {
										serviceCodeInvalidException = (ServiceCodeInvalidException) exception;
										break;
									}
								}

								if (serviceCodeInvalidException != null) {

									Service service = serviceCodeInvalidException
											.getService();
									if (!service.getServiceId().equals(
											serviceEvent.getService()
													.getServiceId())) {
										form.setComponentError(e);
										return;
									} else {
										form.setComponentError(null);
									}
								}
							}

							else {
								form.setComponentError(e);
								return;
							}

						}

						BeanItem beanItem = (BeanItem) form.getItemDataSource();

						ServiceEvent serviceEvent = (ServiceEvent) beanItem
								.getBean();

						// Persist
						try {

							// Add the current organization
							Service savingService = serviceEvent.getService();

							if (savingService.getServiceId() == null) {
								savingService
										.setOrganization(CalendarView.this.context
												.getOrganization());
							}

							int savedServiceId = serviceService.save(
									savingService).getServiceId();
							// Set entity identifier
							savingService.setServiceId(savedServiceId);

							// Update event provider's data source
							if (serviceCalendarEventProvider
									.containsEvent(serviceEvent))
								serviceCalendarEventProvider
										.removeEvent(serviceEvent);
							serviceCalendarEventProvider.addEvent(item
									.getBean());

							// Calendar needs to be repainted
							serviceCalendar.requestRepaint();

							// Move the calendar to the created service event
							switchCalendarViewMode(serviceEvent.getStart());

						} catch (Exception e) {
							// TODO Auto-generated catch block
							getApplication().getMainWindow().showNotification(
									e.getMessage(),
									Notification.TYPE_ERROR_MESSAGE);
						}

						getApplication().getMainWindow().removeWindow(window);

					}
				}));
		buttonsLayout.addComponent(new Button("Cancelar",
				new Button.ClickListener() {

					public void buttonClick(ClickEvent event) {
						getApplication().getMainWindow().removeWindow(window);
					}
				}));

		return window;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// Navigation Layout
		navigationLayout = buildNavigationbar();
		mainLayout.addComponent(navigationLayout);

		// horizontalLayout
		horizontalLayout = buildHorizontalLayout();
		mainLayout.addComponent(horizontalLayout);
		mainLayout.setExpandRatio(horizontalLayout, 1.0f);

		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout() {
		// common part: create layout
		horizontalLayout = new HorizontalLayout();
		horizontalLayout.setImmediate(false);
		horizontalLayout.setWidth("100.0%");
		horizontalLayout.setHeight("100.0%");
		horizontalLayout.setMargin(false);
		horizontalLayout.setSpacing(true);

		// selectorLayout
		selectorLayout = buildSelectorLayout();
		horizontalLayout.addComponent(selectorLayout);

		// calendarLayout
		calendarLayout = buildCalendarLayout();
		horizontalLayout.addComponent(calendarLayout);
		horizontalLayout.setExpandRatio(calendarLayout, 1.0f);

		return horizontalLayout;
	}

	@AutoGenerated
	private VerticalLayout buildSelectorLayout() {
		// common part: create layout
		selectorLayout = new VerticalLayout();
		selectorLayout.setImmediate(false);
		selectorLayout.setWidth("-1px");
		selectorLayout.setHeight("100.0%");
		selectorLayout.setMargin(false);

		// dateSelector
		dateSelector = new InlineDateField();
		dateSelector.setImmediate(false);
		dateSelector.setWidth("-1px");
		dateSelector.setHeight("-1px");
		dateSelector.setInvalidAllowed(false);
		dateSelector.setResolution(4);
		selectorLayout.addComponent(dateSelector);

		return selectorLayout;
	}

	@AutoGenerated
	private VerticalLayout buildCalendarLayout() {
		// common part: create layout
		calendarLayout = new VerticalLayout();
		calendarLayout.setImmediate(false);
		calendarLayout.setWidth("100.0%");
		calendarLayout.setHeight("100.0%");
		calendarLayout.setMargin(false);
		calendarLayout.setSpacing(true);

		// serviceCalendar
		serviceCalendar = new Calendar();
		serviceCalendar.setImmediate(false);
		serviceCalendar.setWidth("100.0%");
		serviceCalendar.setHeight("100.0%");
		calendarLayout.addComponent(serviceCalendar);
		calendarLayout.setExpandRatio(serviceCalendar, 1.0f);

		return calendarLayout;
	}

	// PRIVATE METHODS TO SWITCH TO THE DIFERENT VIEW MODES INSIDE THE CALENDAR
	private void switchCalendarViewMode(Date startDate) {
		switch (viewMode) {

		case DAILY:
			switchDailyViewMode(startDate);

			setDateViewModeLabelValue(DAILY_VIEW_FORMAT,
					serviceCalendar.getStartDate());
			break;

		case WEEKLY:
			switchWeeklyViewMode(startDate);
			setDateViewModeLabelValue(WEEKLY_VIEW_FORMAT,
					serviceCalendar.getStartDate(),
					serviceCalendar.getEndDate());
			break;

		default:
			switchWeeklyViewMode(startDate);
			setDateViewModeLabelValue(WEEKLY_VIEW_FORMAT,
					serviceCalendar.getStartDate(),
					serviceCalendar.getEndDate());

		}
	}

	private final void switchDailyViewMode(Date startDate) {

		viewMode = CalendarViewMode.DAILY;

		GregorianCalendar gc = new GregorianCalendar(
				serviceCalendar.getTimeZone(), serviceCalendar.getLocale());

		gc.setTime(startDate);

		// Reset calendar's start time to the target month's first day.
		gc.set(GregorianCalendar.HOUR_OF_DAY, 0);
		gc.set(GregorianCalendar.MINUTE, 0);
		gc.set(GregorianCalendar.SECOND, 0);
		gc.set(GregorianCalendar.MILLISECOND, 0);
		serviceCalendar.setStartDate(gc.getTime());
		gc.set(GregorianCalendar.HOUR_OF_DAY, 23);
		gc.set(GregorianCalendar.MINUTE, 23);
		gc.set(GregorianCalendar.SECOND, 23);
		gc.set(GregorianCalendar.MILLISECOND, 23);
		serviceCalendar.setEndDate(gc.getTime());
	}

	private void switchWeeklyViewMode(Date startDate) {

		viewMode = CalendarViewMode.WEEKLY;

		GregorianCalendar gc = new GregorianCalendar(
				serviceCalendar.getTimeZone(), serviceCalendar.getLocale());

		gc.setTime(startDate);

		// Reset calendar's start time to the target month's first day.
		gc.set(GregorianCalendar.DAY_OF_WEEK, gc.getFirstDayOfWeek());
		serviceCalendar.setStartDate(gc.getTime());
		gc.add(GregorianCalendar.DATE, 6);
		serviceCalendar.setEndDate(gc.getTime());
	}

	private void switchMonthlyViewMode(Date startDate) {

		viewMode = CalendarViewMode.MONTHLY;

		GregorianCalendar gc = new GregorianCalendar(
				serviceCalendar.getTimeZone(), serviceCalendar.getLocale());

		gc.setTime(startDate);

		// Reset calendar's start time to the target month's first day.
		gc.set(GregorianCalendar.DATE,
				gc.getMinimum(GregorianCalendar.DAY_OF_MONTH));
		serviceCalendar.setStartDate(gc.getTime());
		gc.set(GregorianCalendar.DATE, gc.getActualMaximum(gc.DAY_OF_MONTH));
		serviceCalendar.setEndDate(gc.getTime());
	}

	private void setDateViewModeLabelValue(String format, Date date) {

		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format);
		simpleDateFormat.setTimeZone(serviceCalendar.getTimeZone());

		String dateRangeString = simpleDateFormat.format(date);

		dateViewModeLabel.setValue(dateRangeString);

	}

	private void setDateViewModeLabelValue(String format, Date startDate,
			Date endDate) {

		StringBuilder result = new StringBuilder();

		GregorianCalendar gc = new GregorianCalendar(
				serviceCalendar.getTimeZone());

		gc.setTime(startDate);

		result.append(gc.get(GregorianCalendar.DATE));
		result.append("-");

		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format);
		simpleDateFormat.setTimeZone(serviceCalendar.getTimeZone());

		String dateRangeString = simpleDateFormat.format(endDate);

		result.append(dateRangeString);

		dateViewModeLabel.setValue(result);

	}

	// Private Classes
	private class CalendarToolBar extends CssLayout implements IToolbar {

		private Button backwardButton;
		private Button forewardButton;
		private Button createServiceButton;
		private Button todayViewButton;
		private Button dailyViewButton;
		private Button weeklyViewButton;
		private Button monthlyViewButton;

		
		public CalendarToolBar(){
			
			super();
			addComponent(buildNavigationbar());
		}
		
		
		@Override
		public int getPosition() {
			return 0;
		}

		@Override
		public ComponentContainer getContent() {
			return this;
		}

		private HorizontalLayout buildNavigationbar() {

			HorizontalLayout toolbarLayout = new HorizontalLayout();
			toolbarLayout.setImmediate(false);
			toolbarLayout.setSpacing(true);

			ButtonGroup controlbar = new ButtonGroup();
			toolbarLayout.addComponent(controlbar);

			backwardButton = new Button("Atrás");
			forewardButton = new Button("Adelante");

			controlbar.addButton(backwardButton);
			controlbar.addButton(forewardButton);

			createServiceButton = new Button("Crear servicio");
			createServiceButton.setIcon(new ThemeResource(SchedulerModule.MODULE_ICONS_PATH + "calendar--plus.png"));

			toolbarLayout.addComponent(createServiceButton);

			// Views
			HorizontalLayout viewLayout = new HorizontalLayout();
			viewLayout.setSpacing(true);

			todayViewButton = new Button("Hoy");
			viewLayout.addComponent(todayViewButton);

			ButtonGroup viewbar = new ButtonGroup();
			dailyViewButton = new Button("Día");
			dailyViewButton.setIcon(new ThemeResource(SchedulerModule.MODULE_ICONS_PATH + "calendar-day.png"));

			weeklyViewButton = new Button("Semana");
			weeklyViewButton
					.setIcon(new ThemeResource(SchedulerModule.MODULE_ICONS_PATH + "calendar.png"));

			monthlyViewButton = new Button("Mes");
			monthlyViewButton.setIcon(new ThemeResource(
					SchedulerModule.MODULE_ICONS_PATH + "calendar-month.png"));

			viewbar.addButton(dailyViewButton);
			viewbar.addButton(weeklyViewButton);
			viewbar.addButton(monthlyViewButton);
			viewLayout.addComponent(viewbar);
			toolbarLayout.addComponent(viewLayout);
			toolbarLayout.setComponentAlignment(viewLayout,
					Alignment.MIDDLE_RIGHT);

			// Navigation bar handlers
			backwardButton.addListener(new ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {

					GregorianCalendar gc = new GregorianCalendar(
							serviceCalendar.getTimeZone(), serviceCalendar
									.getLocale());

					gc.setTime(serviceCalendar.getStartDate());

					switch (viewMode) {

					case DAILY:
						gc.add(GregorianCalendar.DATE, -1);
						switchDailyViewMode(gc.getTime());
						setDateViewModeLabelValue(DAILY_VIEW_FORMAT,
								serviceCalendar.getStartDate());
						break;
					case WEEKLY:
						gc.add(GregorianCalendar.WEEK_OF_YEAR, -1);
						switchWeeklyViewMode(gc.getTime());
						setDateViewModeLabelValue(WEEKLY_VIEW_FORMAT,
								serviceCalendar.getStartDate(),
								serviceCalendar.getEndDate());
						break;
					case MONTHLY:
						gc.add(GregorianCalendar.MONTH, -1);
						switchMonthlyViewMode(gc.getTime());
						setDateViewModeLabelValue(MONTHLY_VIEW_FORMAT,
								serviceCalendar.getStartDate());
						break;
					}

				}
			});

			forewardButton.addListener(new ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {

					GregorianCalendar gc = new GregorianCalendar(
							serviceCalendar.getTimeZone(), serviceCalendar
									.getLocale());

					gc.setTime(serviceCalendar.getStartDate());

					switch (viewMode) {

					case DAILY:
						gc.add(GregorianCalendar.DATE, 1);
						switchDailyViewMode(gc.getTime());
						setDateViewModeLabelValue(DAILY_VIEW_FORMAT,
								serviceCalendar.getStartDate());
						break;
					case WEEKLY:
						gc.add(GregorianCalendar.WEEK_OF_YEAR, 1);
						switchWeeklyViewMode(gc.getTime());
						setDateViewModeLabelValue(WEEKLY_VIEW_FORMAT,
								serviceCalendar.getStartDate(),
								serviceCalendar.getEndDate());
						break;
					case MONTHLY:
						gc.add(GregorianCalendar.MONTH, 1);
						switchMonthlyViewMode(gc.getTime());
						setDateViewModeLabelValue(MONTHLY_VIEW_FORMAT,
								serviceCalendar.getStartDate());
						break;
					}

				}
			});

			createServiceButton.addListener(new ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {

					final ServiceEvent serviceEvent = new ServiceEvent();

					Window window = null;
					try {
						window = servicePopupWindow(
								CREATE_SERVICE_EVENT_CAPTION, serviceEvent);
						getApplication().getMainWindow().addWindow(window);
					} catch (IllegalArgumentException e) {
						e.printStackTrace();
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			});

			todayViewButton.addListener(new ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {

					switchDailyViewMode(new Date());
					setDateViewModeLabelValue(DAILY_VIEW_FORMAT,
							serviceCalendar.getStartDate());
				}
			});

			dailyViewButton.addListener(new ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {

					GregorianCalendar gc = new GregorianCalendar(
							serviceCalendar.getTimeZone(), serviceCalendar
									.getLocale());

					gc.setTime(serviceCalendar.getStartDate());

					int dayWeekDiference = GregorianCalendar.WEDNESDAY
							- gc.get(GregorianCalendar.DAY_OF_WEEK);

					gc.add(GregorianCalendar.DAY_OF_MONTH, dayWeekDiference);

					switchDailyViewMode(gc.getTime());
					setDateViewModeLabelValue(DAILY_VIEW_FORMAT,
							serviceCalendar.getStartDate());

				}
			});

			weeklyViewButton.addListener(new ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {

					switchWeeklyViewMode(serviceCalendar.getStartDate());
					setDateViewModeLabelValue(WEEKLY_VIEW_FORMAT,
							serviceCalendar.getStartDate(),
							serviceCalendar.getEndDate());

				}
			});

			monthlyViewButton.addListener(new ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {

					switchMonthlyViewMode(serviceCalendar.getStartDate());
					setDateViewModeLabelValue(MONTHLY_VIEW_FORMAT,
							serviceCalendar.getStartDate());
				}
			});

			return toolbarLayout;
		}

	}

	private class ServiceCalendarActionHandler implements Handler {

		private Action addServiceEventAction = new Action("Crear servicio");
		private Action editServiceEventAction = new Action("Editar servicio");
		private Action removeServiceEventAction = new Action(
				"Eliminar servicio");

		@Override
		public Action[] getActions(Object target, Object sender) {

			// The target should be a CalendarDateRage for the
			// entire day from midnight to midnight.
			if (!(target instanceof CalendarDateRange))
				return null;

			CalendarDateRange dateRange = (CalendarDateRange) target;

			// The sender is the Calendar object
			if (!(sender instanceof Calendar))
				return null;

			Calendar calendar = (Calendar) sender;

			// List all the events on the requested day
			List<CalendarEvent> events = calendar.getEvents(
					dateRange.getStart(), dateRange.getEnd());

			if (events.size() == 0)
				return new Action[] { addServiceEventAction };
			else
				return new Action[] { addServiceEventAction,
						editServiceEventAction, removeServiceEventAction };

		}

		@Override
		public void handleAction(Action action, Object sender, final Object target) {

			// The sender is the Calendar object
			Calendar calendar = (Calendar) sender;

			if (action == addServiceEventAction) {

				// Check that the click was not done on an event
				if (target instanceof Date) {

					Date date = (Date) target;

					// Add an event from now to plus one hour
					GregorianCalendar start = new GregorianCalendar();
					start.setTime(date);
					GregorianCalendar end = new GregorianCalendar();
					end.setTime(date);
					end.add(java.util.Calendar.HOUR, 1);

					ServiceEvent serviceEvent = new ServiceEvent();

					serviceEvent.setStart(start.getTime());
					serviceEvent.setEnd(end.getTime());

					serviceEvent.setScheduleDate(start.getTime());
					serviceEvent.setReservationDate(new Date());

					Window window = null;
					try {
						window = servicePopupWindow(
								CREATE_SERVICE_EVENT_CAPTION, serviceEvent);
						getApplication().getMainWindow().addWindow(window);
					} catch (IllegalArgumentException e) {
						e.printStackTrace();
					} catch (Exception e) {
						e.printStackTrace();
					}
				} else {
					getWindow().showNotification(
							"No se puede añadir el servicio");
				}
			}

			if (action == editServiceEventAction) {

				if (target instanceof ServiceEvent) {

					ServiceEvent editingServiceEvent = (ServiceEvent) target;

					Window window = null;
					try {
						window = servicePopupWindow(
								UPDATE_SERVICE_EVENT_CAPTION,
								editingServiceEvent);
						getApplication().getMainWindow().addWindow(window);
					} catch (IllegalArgumentException e) {
						e.printStackTrace();
					} catch (Exception e) {
						e.printStackTrace();
					}
				}

				else {

					getWindow().showNotification(
							"No se puede editar el servicio");
				}

			}

			if (action == removeServiceEventAction) {

				if (target instanceof ServiceEvent) {

					ConfirmDialog.show(getWindow(), "Confirmar eliminar:",
							"¿Estás seguro de borrar el servicio?", "Sí", "No",
							new ConfirmDialog.Listener() {

								public void onClose(ConfirmDialog dialog) {
									if (dialog.isConfirmed()) {
										// Confirmed to continue
										
										ServiceEvent deletingServiceEvent = (ServiceEvent) target;
										
										try {
											//remove from the service layer
											serviceService.delete(deletingServiceEvent.getService());
											//remove from the calendar component
											serviceCalendarEventProvider.removeEvent(deletingServiceEvent);
											
										} catch (Exception e) {
											e.printStackTrace();
										}
									} else {
										// User did not confirm
										
									}
								}
							});
				}

				else {

					getWindow().showNotification(
							"No se puede borrar el servicio");
				}

			}

		}

	}

}

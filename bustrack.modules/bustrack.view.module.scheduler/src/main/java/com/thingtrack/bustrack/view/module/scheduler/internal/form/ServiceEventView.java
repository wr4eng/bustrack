package com.thingtrack.bustrack.view.module.scheduler.internal.form;

import java.util.Date;

import javax.annotation.PostConstruct;

import org.osgi.framework.BundleContext;
import org.osgi.framework.FrameworkUtil;
import org.osgi.framework.ServiceReference;
import org.springframework.beans.factory.annotation.Autowired;

import com.thingtrack.konekti.domain.Client;
import com.thingtrack.konekti.domain.ServiceStatus;
import com.thingtrack.konekti.domain.ServiceType;
import com.thingtrack.konekti.service.api.ClientService;
import com.thingtrack.konekti.service.api.EmployeeAgentService;
import com.thingtrack.konekti.service.api.ServiceService;
import com.thingtrack.konekti.service.api.ServiceStatusService;
import com.thingtrack.konekti.service.api.ServiceTypeService;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class ServiceEventView extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private RoutesField routesField;
	@AutoGenerated
	private HorizontalLayout clientLayout;
	@AutoGenerated
	private Button addClientButton;
	@AutoGenerated
	private ComboBox clientField;
	@AutoGenerated
	private HorizontalLayout serviceLayout;
	@AutoGenerated
	private ComboBox serviceStatusField;
	@AutoGenerated
	private ComboBox serviceTypeField;
	@AutoGenerated
	private HorizontalLayout dateLayout;
	@AutoGenerated
	private DateField scheduleDateField;
	@AutoGenerated
	private DateField reservationDateField;
	@AutoGenerated
	private TextField descriptionField;
	@AutoGenerated
	private TextField codeField;
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	// Service Date range
	private Date startFirstRoute;

	private Date endLastRoute;

	/** Enterprise Services **/
	private ServiceService serviceService;
	
	private ServiceStatusService serviceStatusService;

	private ServiceTypeService serviceTypeService;

	private ClientService clientService;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 * 
	 * @throws Exception
	 * @throws IllegalArgumentException
	 */
	@Autowired
	public ServiceEventView()  {

		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		codeField.setImmediate(true);
		scheduleDateField.setImmediate(true);
		reservationDateField.setImmediate(true);
		serviceTypeField.setImmediate(true);
		serviceStatusField.setImmediate(true);
		
		//Retrieve the enterprise services
		getServices();
		
		//Adding field validators
		codeField.setValidationVisible(false);
		codeField.addValidator(new ServiceCodeValidator(serviceService));
		routesField.addValidator(new RoutesValidator());
		
		//Load fields
		try {
			loadData();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void getServices(){
		
		BundleContext bundleContext = FrameworkUtil.getBundle(this.getClass()).getBundleContext();
		
		ServiceReference serviceServiceReference = (ServiceReference) bundleContext.getServiceReference(ServiceService.class.getName());
		serviceService = (ServiceService) bundleContext.getService(serviceServiceReference);
		
		ServiceReference serviceStatusServiceReference = bundleContext.getServiceReference(ServiceStatusService.class.getName());
		serviceStatusService = (ServiceStatusService) bundleContext.getService(serviceStatusServiceReference);
		
		ServiceReference serviceTypeServiceReference = bundleContext.getServiceReference(ServiceTypeService.class.getName());
		serviceTypeService = (ServiceTypeService) bundleContext.getService(serviceTypeServiceReference);
		
		ServiceReference clientServiceReference = bundleContext.getServiceReference(ClientService.class.getName());
		clientService = (ClientService) bundleContext.getService(clientServiceReference);
		
	}
	
	
	private void loadData() throws IllegalArgumentException, Exception {

		// Service type data source
		BeanItemContainer<ServiceType> serviceTypeDatasource = new BeanItemContainer<ServiceType>(
				ServiceType.class, serviceTypeService.getAll());

		serviceTypeField.setContainerDataSource(serviceTypeDatasource);
		serviceTypeField.setItemCaptionPropertyId("description");
		serviceTypeField.setNullSelectionAllowed(false);

		// Service Status data source
		BeanItemContainer<ServiceStatus> serviceStatusDatasource = new BeanItemContainer<ServiceStatus>(
				ServiceStatus.class, serviceStatusService.getAll());

		serviceStatusField.setContainerDataSource(serviceStatusDatasource);
		serviceStatusField.setItemCaptionPropertyId("description");
		serviceStatusField.setNullSelectionAllowed(false);

		// Client data source
		BeanItemContainer<Client> clientDatasource;

		clientDatasource = new BeanItemContainer<Client>(Client.class,
				clientService.getAll());

		clientField.setContainerDataSource(clientDatasource);
		clientField.setItemCaptionPropertyId("name");
		clientField.setNullSelectionAllowed(false);

	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// captionField
		codeField = new TextField();
		codeField.setCaption("Título");
		codeField.setImmediate(false);
		codeField.setWidth("50.0%");
		codeField.setHeight("-1px");
		codeField.setNullRepresentation("");
		codeField.setNullSettingAllowed(true);
		codeField.setSecret(false);
		codeField.setRequired(true);
		codeField.setRequiredError(codeField.getCaption() + " es un campo requerido");
		mainLayout.addComponent(codeField);

		// descriptionField
		descriptionField = new TextField();
		descriptionField.setCaption("Descripción");
		descriptionField.setImmediate(false);
		descriptionField.setWidth("100.0%");
		descriptionField.setHeight("120px");
		descriptionField.setSecret(false);
		descriptionField.setNullRepresentation("");
		mainLayout.addComponent(descriptionField);

		// dateLayout
		dateLayout = buildDateLayout();
		mainLayout.addComponent(dateLayout);

		// serviceLayout
		serviceLayout = buildServiceLayout();
		mainLayout.addComponent(serviceLayout);

		// clientLayout
		clientLayout = buildClientLayout();
		mainLayout.addComponent(clientLayout);

		// routesField
		routesField = new RoutesField();
		routesField.setCaption("Rutas");
		routesField.setImmediate(false);
		routesField.setWidth("100.0%");
		routesField.setHeight("100.0%");
		routesField.setRequired(true);
		routesField.setRequiredError(routesField.getCaption() + " es un campo requerido");
		mainLayout.addComponent(routesField);
		mainLayout.setExpandRatio(routesField, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildDateLayout() {
		// common part: create layout
		dateLayout = new HorizontalLayout();
		dateLayout.setImmediate(false);
		dateLayout.setWidth("100.0%");
		dateLayout.setHeight("-1px");
		dateLayout.setMargin(false);
		dateLayout.setSpacing(true);

		// reservationDateField
		reservationDateField = new DateField();
		reservationDateField.setCaption("Reserva");
		reservationDateField.setImmediate(false);
		reservationDateField.setWidth("100.0%");
		reservationDateField.setHeight("-1px");
		reservationDateField.setInvalidAllowed(false);
		reservationDateField.setResolution(2);
		reservationDateField.setRequired(true);
		reservationDateField.setRequiredError(reservationDateField.getCaption() +" es un campo requerido");
		dateLayout.addComponent(reservationDateField);
		dateLayout.setExpandRatio(reservationDateField, 1.0f);

		// scheduleDateField
		scheduleDateField = new DateField();
		scheduleDateField.setCaption("Planificación");
		scheduleDateField.setImmediate(false);
		scheduleDateField.setWidth("100.0%");
		scheduleDateField.setHeight("-1px");
		scheduleDateField.setInvalidAllowed(false);
		scheduleDateField.setResolution(2);
		dateLayout.addComponent(scheduleDateField);
		dateLayout.setExpandRatio(scheduleDateField, 1.0f);

		return dateLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildServiceLayout() {
		// common part: create layout
		serviceLayout = new HorizontalLayout();
		serviceLayout.setImmediate(false);
		serviceLayout.setWidth("100.0%");
		serviceLayout.setHeight("-1px");
		serviceLayout.setMargin(false);
		serviceLayout.setSpacing(true);

		// serviceTypeField
		serviceTypeField = new ComboBox();
		serviceTypeField.setCaption("Tipo");
		serviceTypeField.setImmediate(false);
		serviceTypeField.setWidth("100.0%");
		serviceTypeField.setHeight("-1px");
		serviceTypeField.setRequired(true);
		serviceTypeField.setRequiredError(serviceTypeField.getCaption() +" es un campo requerido");
		serviceLayout.addComponent(serviceTypeField);
		serviceLayout.setExpandRatio(serviceTypeField, 1.0f);

		// serviceStatusField
		serviceStatusField = new ComboBox();
		serviceStatusField.setCaption("Estado");
		serviceStatusField.setImmediate(false);
		serviceStatusField.setWidth("100.0%");
		serviceStatusField.setHeight("-1px");
		serviceStatusField.setRequired(true);
		serviceStatusField.setRequiredError(serviceStatusField.getCaption() +" es un campo requerido");
		serviceLayout.addComponent(serviceStatusField);
		serviceLayout.setExpandRatio(serviceStatusField, 1.0f);

		return serviceLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildClientLayout() {
		// common part: create layout
		clientLayout = new HorizontalLayout();
		clientLayout.setImmediate(false);
		clientLayout.setWidth("100.0%");
		clientLayout.setHeight("-1px");
		clientLayout.setMargin(false);
		clientLayout.setSpacing(true);

		// clientField
		clientField = new ComboBox();
		clientField.setCaption("Cliente");
		clientField.setImmediate(false);
		clientField.setWidth("100.0%");
		clientField.setHeight("-1px");
		clientLayout.addComponent(clientField);
		clientLayout.setExpandRatio(clientField, 1.0f);
		clientLayout.setComponentAlignment(clientField, new Alignment(33));

		// addClientButton
		addClientButton = new Button();
		addClientButton.setCaption("Añadir Cliente");
		addClientButton.setImmediate(true);
		addClientButton.setWidth("-1px");
		addClientButton.setHeight("-1px");
		clientLayout.addComponent(addClientButton);
		clientLayout.setComponentAlignment(addClientButton, new Alignment(9));

		return clientLayout;
	}

	public void setServiceDateRange(Date startFirstRoute, Date endLastRoute) {

		this.startFirstRoute = startFirstRoute;
		this.endLastRoute = endLastRoute;
		
		routesField.setStartFirstRoute(this.startFirstRoute);
		routesField.setEndLastRoute(this.endLastRoute);

	}
}

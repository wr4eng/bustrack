package com.thingtrack.bustrack.view.module.scheduler.internal;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.springframework.beans.factory.annotation.Autowired;

import com.thingtrack.konekti.service.api.ServiceService;
import com.thingtrack.konekti.view.addon.ui.AbstractViewContainer;
import com.thingtrack.konekti.view.addon.ui.SliderView;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.kernel.ui.layout.ISliderView;
import com.thingtrack.konekti.view.kernel.ui.layout.IView;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewChangeListener;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class SchedulerViewContainer extends AbstractViewContainer {
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private SliderView sliderView;

	/** Konekti Workbench Context **/
	private IWorkbenchContext context;

	/** Views **/
	private CalendarView calendarView;
	private AgendaView agendaView;

	/** Business services **/
	@Autowired
	private ServiceService serviceService;

	// Thread Local Bundle Business Services
	private static ThreadLocal<ServiceService> threadServiceService = new ThreadLocal<ServiceService>();

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */

	public SchedulerViewContainer(IWorkbenchContext context) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		this.context = context;
	}

	@SuppressWarnings("unused")
	@PostConstruct
	private void createViews() {
		// initialize thread local bundle services
		threadServiceService.set(serviceService);

		// add all views controlled by SliderView Component
		try {
			calendarView = new CalendarView(this);

			sliderView.addView(calendarView);
			views.put(0, calendarView);

			agendaView = new AgendaView(this);
			sliderView.addView(agendaView);
			views.put(1, agendaView);

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@SuppressWarnings("unused")
	@PreDestroy
	private void destroyViews() {
		// destroy thread local bundle services
		threadServiceService.set(null);
	}

	public static ServiceService getServiceService() {
		return threadServiceService.get();
	}

	@Override
	public IView getSelectedView() {
		return sliderView.getSelectedView();

	}

	@Override
	public ISliderView getSliderView() {
		return sliderView;

	}

	@Override
	public void addListener(IViewChangeListener listener) {
		sliderView.addListener(listener);

	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// sliderView_1
		sliderView = new SliderView();
		sliderView.setImmediate(false);
		sliderView.setWidth("100.0%");
		sliderView.setHeight("100.0%");
		mainLayout.addComponent(sliderView);
		mainLayout.setExpandRatio(sliderView, 1.0f);

		return mainLayout;
	}

	public IWorkbenchContext getContext() {
		return context;
	}
}

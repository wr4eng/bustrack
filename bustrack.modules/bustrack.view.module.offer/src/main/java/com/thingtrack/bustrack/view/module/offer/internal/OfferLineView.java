package com.thingtrack.bustrack.view.module.offer.internal;

import java.text.SimpleDateFormat;
import java.util.Date;

import org.vaadin.dialogs.ConfirmDialog;

import com.thingtrack.konekti.domain.Offer;
import com.thingtrack.konekti.domain.OfferLine;
import com.thingtrack.konekti.service.api.OfferLineService;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickFilterButtonListener;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickPrintButtonListener;
import com.thingtrack.konekti.view.addon.ui.DataGridView;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickAddButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickEditButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickNavigationEvent;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickRemoveButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickDownButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickRefreshButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickUpButtonListener;
import com.thingtrack.konekti.view.addon.ui.WindowDialog;
import com.thingtrack.konekti.view.addon.ui.WindowDialog.DialogResult;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;
import com.thingtrack.konekti.view.web.form.OfferLineViewForm;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.data.Property;

@SuppressWarnings("serial")
public class OfferLineView extends AbstractView 
	implements ClickUpButtonListener, ClickDownButtonListener, ClickRefreshButtonListener, ClickAddButtonListener, ClickEditButtonListener, ClickRemoveButtonListener, ClickFilterButtonListener, ClickPrintButtonListener {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private DataGridView dgOfferLine;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private Offer offer;
		
	private OfferLineService offerLineService;
	
	private BindingSource<OfferLine> bsOfferLine = new BindingSource<OfferLine>(OfferLine.class, 1);
			
	private NavigationToolbar navigationToolbar;
	private EditionToolbar editionToolbar;
	private BoxToolbar boxToolbar;
	
	private IViewContainer viewContainer;
	private IWorkbenchContext context;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public OfferLineView(IViewContainer viewContainer, IWorkbenchContext context) {		
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		// TODO add user code here	
		// set Slide View Services and ViewContainer to navigate
		this.viewContainer = viewContainer;
		this.context = context;		
		
		this.offerLineService =OfferViewContainer.getOfferLineService();
		
		dgOfferLine.setImmediate(true);
	}
	
	
	public void setOffer(Offer offer) {
		this.offer = offer;
				
		// refresh datasource
		refreshBindindSource();
		injectBindingSource();
				
	}
	
	private void refreshBindindSource() {
		try {		
			bsOfferLine.removeAllItems();				
			bsOfferLine.addAll(offer.getOfferLines());
			
			bsOfferLine.addNestedContainerProperty("offerLineStatus.description");
			bsOfferLine.addNestedContainerProperty("offer.code");
			
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}
	
	private void injectBindingSource() {
		try {
			//STEP 01: create grid view for slide Organization View
			dgOfferLine.setBindingSource(bsOfferLine);
			dgOfferLine.setVisibleColumns(new String[]  { "offer.code", "number", "price", "comment", "offerLineStatus.description", "offerLineDate"} );        
			dgOfferLine.setColumnHeaders(new String[] { "Oferta", "Número", "Precio", "Comentario", "Estado", "Fecha" } );
			
			dgOfferLine.setColumnCollapsed("comment", true);
			
			// STEP 02: create toolbar for slide
			navigationToolbar = new NavigationToolbar(0, bsOfferLine, viewContainer);
			editionToolbar = new EditionToolbar(1, bsOfferLine);
			boxToolbar = new BoxToolbar(2, bsOfferLine);
			
			navigationToolbar.addListenerUpButton(this);
			navigationToolbar.addListenerDownButton(this);
			
			editionToolbar.addListenerAddButton(this);
			editionToolbar.addListenerEditButton(this);
			editionToolbar.addListenerDeleteButton(this);
			
			boxToolbar.addListenerFilterButton(this);
			boxToolbar.addListenerPrintButton(this);
			
			dgOfferLine.addListenerAddButton(this);
			dgOfferLine.addListenerEditButton(this);
			dgOfferLine.addListenerDeleteButton(this);
			
			removeAllToolbar();
			
			addToolbar(navigationToolbar);
			addToolbar(editionToolbar);
			addToolbar(boxToolbar);
			
		} catch (Exception ex) {
			ex.getMessage();
			
		}
		
	}
	
	@Override
	public void downButtonClick(NavigationToolbar.ClickNavigationEvent event) {
		OfferLine offerLineSelected  = null;
		
		if (bsOfferLine.getItemIds().size() > 0) {
			// get selected Organization
			offerLineSelected = (OfferLine)bsOfferLine.getItemId();
			
			// inject the locations data from organization in the detail Location View
			ServiceView serviceView = (ServiceView)viewContainer.getNext();
			serviceView.setOfferLine(offerLineSelected);
			
			// roll to the detail Location View
			viewContainer.getSliderView().rollNext();
		}
		
	}
	
	@Override
	public void upButtonClick(NavigationToolbar.ClickNavigationEvent event) {
		viewContainer.getSliderView().rollPrevious();
		
	}
	
	@Override
	public void refreshButtonClick(NavigationToolbar.ClickNavigationEvent event) {
		refreshBindindSource();
		
	}
	
	@Override
	public void addButtonClick(ClickNavigationEvent event) {
		OfferLine offerLine = new OfferLine();
		
		offerLine.setOffer(offer); // set client 
		offerLine.setNumber(1); // TODO
		offerLine.setOfferLineDate(new Date());
		
		try {
			@SuppressWarnings("unused")
			WindowDialog<OfferLine> windowDialog = new WindowDialog<OfferLine>(getWindow(), "Nueva Linea Oferta", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new OfferLineViewForm(), offerLine, 
					new WindowDialog.CloseWindowDialogListener<OfferLine>() {
			    public void windowDialogClose(WindowDialog<OfferLine>.CloseWindowDialogEvent<OfferLine> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {			    		
			    		offerLineService.save(event.getDomainEntity());			    		
			    		
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo crear la nueva línea oferta!",
								e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nueva Línea Oferta!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nueva Línea Oferta!", e);
		}
		
	}

	@Override
	public void editButtonClick(ClickNavigationEvent event) {
		OfferLine editingOfferLine = (OfferLine) event.getRegister();
		
		try {
			@SuppressWarnings("unused")
			WindowDialog<OfferLine> windowDialog = new WindowDialog<OfferLine>(getWindow(), "Editor Linea Oferta", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new OfferLineViewForm(), editingOfferLine, 
					new WindowDialog.CloseWindowDialogListener<OfferLine>() {
			    public void windowDialogClose(WindowDialog<OfferLine>.CloseWindowDialogEvent<OfferLine> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {			    		
			    		offerLineService.save(event.getDomainEntity());			    		
			    		
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo modificar la línea oferta!", e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Línea Oferta!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Línea Oferta!", e);
		}
		
	}
	
	@Override
	public void deleteButtonClick(ClickNavigationEvent event) {
		final OfferLine editingOfferLine = (OfferLine) event.getRegister();
		
		if (editingOfferLine == null)
			return;
		
		ConfirmDialog.show(getWindow(), "Borrar Línea Oferta",
		        "¿Estás seguro?", "Si", "No",
		        new ConfirmDialog.Listener() {

		            public void onClose(ConfirmDialog dialog) {
		                if (dialog.isConfirmed()) {
		            		try {
		            			offerLineService.delete(editingOfferLine);
		            			
		            			// refresh
		            			refreshBindindSource();
		            			
		            		} catch (IllegalArgumentException e) {
								throw new RuntimeException(
										"¡No se pudo borrar la línéa oferta!", e);
		            		} catch (Exception e) {
								throw new RuntimeException(
										"¡No se pudo borrar la línéa oferta!", e);
		            		}
		                } 
		            }
		        });
		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// dgOfferLine
		dgOfferLine = new DataGridView() {
		    @Override
		    protected String formatPropertyValue(Object rowId,
		            Object colId, Property property) {
		    	// Format by property type
		        if (property.getType() == Date.class) {
		            SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm");
		            
		            return df.format((Date)property.getValue());
		        }

		        return super.formatPropertyValue(rowId, colId, property);
		    }
		};
		dgOfferLine.setImmediate(false);
		dgOfferLine.setWidth("100.0%");
		dgOfferLine.setHeight("100.0%");
		mainLayout.addComponent(dgOfferLine);
		mainLayout.setExpandRatio(dgOfferLine, 1.0f);
		
		return mainLayout;
	}


	@Override
	public void filterButtonClick(BoxToolbar.ClickNavigationEvent event) {
		dgOfferLine.setFilterBarVisible();
		
	}


	@Override
	public void printButtonClick(BoxToolbar.ClickNavigationEvent event) {
		try {
			dgOfferLine.print("Listado Líneas Oferta de la Oferta " + offer.getCode());
		}
		catch (Exception e) {
			throw new RuntimeException("¡No se pudo imprimir el informe!", e);
		}
		
	}

	
}
